			    Brook GPU Release Notes

Release v0.5 (??/??/??)

   * { ned } The OpenGL backend has been significantly modernised and
             has removed almost all vendor-specific code. v1.3 of OpenGL
             is now required for operation.

   * { ned } Integrated a copy of GLee v5.21 as the OpenGL extension
             wrapper, removing the old manual approach.

   * { ned } Removed many hardcoded limits in favour of queries to OpenGL.
             Textures sizes and output limits are now driver determined.

   * { ned } Moved GL runtime over to use Framebuffer objects instead
             of PBuffers.

   * { ned } OpenGL Pixel buffers are now used if available to speed
             CPU=>GPU data transfers, in particular by queuing up all
             data streams to be sent to the GPU asynchronously. This
             allows the data to be transferring while more streams are
             set up for transfer and/or other pre-computation work is
             performed.

   * { ned } Added support for outputting GLSL as a target via cgc's
             glslf profile.

   * { ned } Added brook::microseconds() which returns a microsecond count.

   * { ned } Added brook::runtimeTargets() which returns all available GPU's.
             This permits backends to be targeted at specific cards.

   * { ned } Made Brook runtime per-thread. This allows different threads
             to work with multiple runtimes simultaneously eg; to run
             separate backends on separate cards.

   * { ned } brcc now only compiles for cpu, PS30, FP40, CTM and GLSL
             techniques by default (use -p legacy to reenable the old ones).
             This greatly speeds compilation for complex shaders which
             wouldn't compile under legacy techniques anyway.

   * { ned } Added a direct op overload for vec<> operators =, *, /, +, -
             and % when the type is identical. This doubles the speed of
             these operations for the CPU backend.

   * { ned } Added support for int to GL, DX9 and CPU backends but ONLY
             internally to the kernel (NOT as a parameter). This allows for
             proper loop semantics and prepares the way for DX10 integer support.

   * { ned } Replaced all usage of malloc, free etc. with brmalloc, brfree etc.
             brmalloc() et al return 32 byte aligned allocations which is
             necessary for SSE support both now and into the future. Use
             BRTALIGNED for stack and static variables - brcc now outputs this
             as required.

   * { ned } Added a specialisation for vec<float,4> using Intel's SSE __m128
             implementation. This doubles the speed once again for the CPU
             backend when using vec<float,4>.

   * { ned } Fixed the problem on Linux where cgc v1.5 would fail to parse
             from redirected standard input.

   * { ned } Made all _cpu_inner functions static as so to give the optimiser
             more scope. Also made externally callable functions explicitly
             "extern" and made their parameters passed by reference & copied
             as MSVC won't respect alignment attributes on parameter values.

   * { ned } Fixed as many of the GCC v4.2 warnings about deprecated conversion
             from string constant to char * as possible (bison & flex need fixing)
             
   * { ned: 1871 } Added OpenMP support to the CPU backend. If compiled using
                   /openmp on MSVC or using -fopenmp on GCC, you will now use all
                   available CPU cores automatically for NON-reduce kernels.
                   Reduce kernels currently still only run in a single thread.
                   
   * { ned: 1878 } Made BRT_ADAPTER usage consistent for DX9 and OpenGL backends
   
   * { ned: 1882 } Moved new feature tests into their own directory and added
                   a Benchmarker program to the Mandelbrot program

   * { ned: XXXX } Added regression test for multi-backend usage



Release v0.4 (10/15/04)

   * Added domain() operator with support under all runtimes

   * Runtime fixes:

      * Integrated GL/DX runtimes into single GPU runtime:

      * Both GL and DX run on nv3x r3xx nv4x and r4xx

      * Address translation is supported under GL/DX for nv3x nv4x
        Added indexof, iterator and domain support for address trans.

      * Fixed Variable Output bugs for 0-sized streams,
        Improved search performance

      * Gather addressing precision improved
      
      * gcc-3.4 compliant

   * Build environment fixes:

      * Added Visual Studio 7.1 build files

      * Regression test failures summarized at end of make regression

   * BRCC fixes:

      * Corrected Indexof precedence
 
      * Allow casts in variable declarations

      * Added code generation for fp40 ps2a ps2b ps3.0

Release v0.3 (1/29/04)

   * Support typedef structures for stream types.

   * Variable output streams supported.

   * Kernels can now have more than one output stream per kernel.  
   
   * Fixed major NVIDIA memory leak bug.  Also fixed pbuffer copyteximage
     slowdown.
   
   * Added warning messages when BRT_RUNTIME env not set.

   * Added much more type checking

   * Preliminary support for streams which are larger than dimensions
     of a texture

Release v0.2 (12/19/03)

   * nv30gl backend compiles and runs on Linux.  Requires Linux cgc compiler
     from NVIDIA and the latest drivers.

   * Fixed nv30gl reduce to stream bug.  nv30gl now passes all regression 
     tests

   * BRCC properly handles missing cgc and fxc.
     Produces reasonable error messages.

   * Make system includes Default.mk which only compiles cpu backend.
     Also tries to detect OS to choose the right configuration.  Builds 
     safely on Darwin (OS X).


Known Issues In BRCC

   * There is very little type checking on stream arguments-- especially in
     terms of length or dimensionality.  Passing a stream that's too small
     to streamRead() or streamWrite() can cause all sorts of misbehaviors.

   * Handling of floatN (float2, float3, float4) constructors is very
     fragile.  They're only legal in three places: variable declaration
     initializers, iterator stream constructors, and as bare statements.

   * The preprocessor is not run on .br files, though it is run on the
     resulting C++ output.  This can make it hard to use #defines and macros
     in conjunction with kernels or stream constructs.
   
   * GatherOps and ScatterOps require the CPU runtime and programs using
     them must compile for at least the CPU target.

   * In addition to the above problem with GatherOp/ScatterOp, any program
     that uses reductions will generate some boilerplate CPU code. This code
     will fail to compile unless the CPU compile target is enabled.
     
Known Issues in the Runtimes

   * In general, error conditions result in undefined behaviors and
     incorrect results, not necessarily crashes or reported errors.
   
   * OpenGL runtime performance is sub-optimal, because of issues with
     allocating and switching pbuffers. Of particular note:

        * Switching from one output stream type to another may degrade
          performance. For best results all output streams should be of
          a single type.

        * Switching the number of outputs being written may degrade
          performance on hardware that is capable of multiple outputs
          per pass.

     Once a stable spec and implementation of the frame_buffer_object
     OpenGL extension becomes available, some of these issues may be
     resolved.

   * The Linux OpenGL runtime is even slower and more constrained than
     the Windows OpenGL runtime.

        * Driver bugs keep us from reallocating pbuffers at runtime,
          so only a single pbuffer is allocated at application startup.

        * As a result, maximum stream size is limited to 2048x1024.

        * Attempting to run a multiple-output shader will fail.

        * All GPU kernels will be compiled with cgc. The cgc compiler
          may fail to generate code, or produce incorrect code for
          some shaders for which the Windows-only fxc compiler
          succeeds.

   * When writing to multiple outputs on a GPU runtime, incorrect results
     may be generated unless all outputs are of the same type.

   * The dx9 runtime cannot allocate streams that are longer than 2048 in
     any dimension.

   * The CPU runtime only supports a subset of the builtin Cg / HLSL
     functions.

   * The domain functionality is not fully orthogonal:

        * indexof values for stream domains are incorrect on the GPU

        * The domain operator cannot be applied to iterators

   * The reduction functionality is not fully orthogonal:
    
        * Reductions of domain() streams are not implemented

        * Reductions of streams of structure type are not implemented

        * Reductions of streams using address translation unimplemented

   * The constant argument functionality is not fully orthogonal

        * Constant arguments of structure type are unsupported

        * Constant arguments of array types are unsupported

   * Note that some Brook application errors may be the result of video
     card driver bugs.  Please refer to the GPGPU.org forums or the
     Brook project pages at (http://graphics.stanford.edu/projects/brookgpu)
     for up to date information regarding any known driver issues.


Revision History

12/16/03:  Initial Beta Release

12/19/03:  Added Linux/BRCC fixes/Makefile improvements/nv30gl bug fixes
