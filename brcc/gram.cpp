/* A Bison parser, made from gram.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	IDENT	257
# define	TAG_NAME	258
# define	LABEL_NAME	259
# define	TYPEDEF_NAME	260
# define	STRING	261
# define	LSTRING	262
# define	CHAR_CONST	263
# define	LCHAR_CONST	264
# define	INUM	265
# define	RNUM	266
# define	PP_DIR	267
# define	PP_LINE	268
# define	INVALID	269
# define	CONST	270
# define	VOLATILE	271
# define	OUT	272
# define	REDUCE	273
# define	VOUT	274
# define	ITER	275
# define	KERNEL	276
# define	AUTO	277
# define	EXTRN	278
# define	REGISTR	279
# define	STATIC	280
# define	TYPEDEF	281
# define	VOID	282
# define	CHAR	283
# define	SHORT	284
# define	INT	285
# define	LONG	286
# define	DOUBLE	287
# define	SGNED	288
# define	UNSGNED	289
# define	FLOAT	290
# define	FLOAT2	291
# define	FLOAT3	292
# define	FLOAT4	293
# define	ENUM	294
# define	STRUCT	295
# define	UNION	296
# define	BREAK	297
# define	CASE	298
# define	CONT	299
# define	DEFLT	300
# define	DO	301
# define	ELSE	302
# define	IF	303
# define	FOR	304
# define	GOTO	305
# define	RETURN	306
# define	SWITCH	307
# define	WHILE	308
# define	PLUS_EQ	309
# define	MINUS_EQ	310
# define	STAR_EQ	311
# define	DIV_EQ	312
# define	MOD_EQ	313
# define	B_AND_EQ	314
# define	B_OR_EQ	315
# define	B_XOR_EQ	316
# define	L_SHIFT_EQ	317
# define	R_SHIFT_EQ	318
# define	EQUAL	319
# define	LESS_EQ	320
# define	GRTR_EQ	321
# define	NOT_EQ	322
# define	RPAREN	323
# define	RBRCKT	324
# define	LBRACE	325
# define	RBRACE	326
# define	SEMICOLON	327
# define	COMMA	328
# define	ELLIPSIS	329
# define	LB_SIGN	330
# define	DOUB_LB_SIGN	331
# define	BACKQUOTE	332
# define	AT	333
# define	ATTRIBUTE	334
# define	ALIGNED	335
# define	PACKED	336
# define	CDECL	337
# define	MODE	338
# define	FORMAT	339
# define	NORETURN	340
# define	COMMA_OP	341
# define	EQ	342
# define	ASSIGN	343
# define	QUESTMARK	344
# define	COLON	345
# define	COMMA_SEP	346
# define	OR	347
# define	AND	348
# define	B_OR	349
# define	B_XOR	350
# define	B_AND	351
# define	COMP_EQ	352
# define	COMP_ARITH	353
# define	COMP_LESS	354
# define	COMP_GRTR	355
# define	LESS	356
# define	GRTR	357
# define	L_SHIFT	358
# define	R_SHIFT	359
# define	PLUS	360
# define	MINUS	361
# define	STAR	362
# define	DIV	363
# define	MOD	364
# define	CAST	365
# define	UNARY	366
# define	NOT	367
# define	B_NOT	368
# define	SIZEOF	369
# define	INDEXOF	370
# define	INCR	371
# define	DECR	372
# define	HYPERUNARY	373
# define	ARROW	374
# define	DOT	375
# define	LPAREN	376
# define	LBRCKT	377

#line 1 "gram.y"

 /*
 ======================================================================

    CTool Library
    Copyright (C) 1995-2001	Shaun Flisakowski

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 ======================================================================
 */

/* grammar File for C - Shaun Flisakowski and Patrick Baudin */
/* Grammar was constructed with the assistance of:
    "C - A Reference Manual" (Fourth Edition),
    by Samuel P Harbison, and Guy L Steele Jr. */

#ifdef    NO_ALLOCA
#define   alloca  __builtin_alloca
#endif

#ifdef _WIN32
/* Don't complain about switch() statements that only have a 'default' */
#pragma warning( disable : 4065 )
#endif

#include <stdio.h>
#include <errno.h>
#include <setjmp.h>

#include "lexer.h"
#include "symbol.h"
#include "token.h"
#include "stemnt.h"
#include "location.h"
#include "project.h"
#include "brtexpress.h"
extern int err_cnt;
int yylex(YYSTYPE *lvalp);

extern int err_top_level;
/* Cause the `yydebug' variable to be defined.  */
#define YYDEBUG 1
void baseTypeFixup(BaseType * bt,Decl * decl) {
  BaseType * b = decl->form->getBase();
  while ((decl=decl->next)) {
    BaseType *nb = decl->form->getBase();
    if (memcmp(nb,b,sizeof(BaseType))!=0) {
      decl->form = decl->form->dup();
      *decl->form->getBase()=*b;
    }
  }

}
/*  int  yydebug = 1;  */

/* ###################################################### */
#line 232 "gram.y"

/* 1 if we explained undeclared var errors.  */
/*  static int undeclared_variable_notice = 0;  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		589
#define	YYFLAG		-32768
#define	YYNTBASE	124

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 377 ? yytranslate[x] : 325)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     3,     5,     8,    12,    13,    15,    17,
      19,    21,    24,    28,    31,    35,    39,    40,    46,    49,
      50,    52,    55,    56,    59,    62,    64,    69,    72,    73,
      75,    78,    79,    82,    85,    87,    89,    91,    93,    95,
      97,    99,   101,   103,   105,   107,   109,   111,   114,   117,
     120,   124,   126,   128,   130,   132,   134,   140,   143,   146,
     150,   154,   156,   162,   170,   178,   184,   194,   196,   198,
     200,   202,   205,   210,   212,   214,   220,   222,   226,   230,
     231,   233,   235,   236,   238,   240,   242,   246,   248,   252,
     255,   257,   261,   263,   267,   269,   273,   276,   278,   283,
     285,   289,   291,   295,   297,   301,   303,   307,   309,   313,
     320,   329,   340,   345,   350,   355,   357,   359,   366,   371,
     373,   375,   377,   379,   381,   383,   385,   387,   389,   391,
     396,   399,   402,   407,   410,   413,   416,   419,   422,   425,
     427,   431,   433,   435,   437,   441,   445,   447,   449,   451,
     453,   455,   457,   459,   464,   466,   468,   471,   474,   476,
     480,   484,   489,   490,   492,   494,   496,   500,   504,   506,
     508,   510,   512,   514,   516,   518,   520,   522,   524,   526,
     528,   530,   532,   534,   536,   538,   540,   542,   543,   545,
     546,   547,   551,   552,   554,   555,   556,   560,   563,   567,
     570,   573,   576,   579,   580,   582,   584,   585,   588,   590,
     593,   595,   597,   599,   601,   603,   605,   607,   609,   611,
     612,   614,   617,   618,   622,   625,   626,   628,   629,   633,
     636,   638,   639,   643,   645,   649,   650,   652,   654,   656,
     660,   662,   664,   668,   670,   672,   674,   679,   680,   682,
     684,   686,   688,   690,   692,   694,   696,   701,   703,   706,
     707,   709,   711,   713,   715,   717,   719,   721,   723,   725,
     727,   729,   731,   733,   735,   737,   739,   741,   743,   745,
     747,   749,   751,   754,   757,   760,   763,   768,   773,   776,
     781,   786,   789,   794,   799,   800,   802,   803,   806,   807,
     809,   811,   813,   817,   819,   823,   825,   826,   827,   831,
     834,   837,   841,   844,   846,   848,   849,   853,   854,   860,
     862,   864,   866,   867,   872,   874,   875,   877,   879,   881,
     884,   886,   888,   890,   894,   896,   898,   903,   908,   912,
     917,   922,   924,   926,   930,   932,   933,   935,   939,   942,
     944,   947,   949,   950,   953,   955,   959,   961,   963,   965,
     967,   968,   969,   972,   973,   976,   978,   982,   984,   988,
     989,   992,   995,   998,  1000,  1002,  1004,  1007,  1009,  1013,
    1017,  1022,  1026,  1031,  1032,  1034,  1041,  1042,  1044,  1046,
    1048,  1050,  1055,  1060
};
static const short yyrhs[] =
{
      -1,   125,     0,     1,     0,   127,   126,     0,   125,   127,
     126,     0,     0,   223,     0,   128,     0,    13,     0,    14,
       0,     1,    73,     0,     1,    72,   126,     0,   129,   130,
       0,   227,   293,   214,     0,   226,   292,   214,     0,     0,
      71,   131,   218,   132,    72,     0,     1,    72,     0,     0,
     133,     0,   141,   134,     0,     0,   134,   135,     0,   134,
      14,     0,   140,     0,    71,   218,   137,    72,     0,     1,
      72,     0,     0,   138,     0,   141,   139,     0,     0,   139,
     140,     0,   139,    14,     0,   141,     0,   142,     0,   143,
       0,   144,     0,   136,     0,   145,     0,   146,     0,   147,
       0,   148,     0,   149,     0,   150,     0,   151,     0,   152,
       0,     1,    73,     0,   181,    73,     0,   167,    73,     0,
     158,    91,   140,     0,   153,     0,   154,     0,   155,     0,
     156,     0,   157,     0,    53,   122,   167,    69,   140,     0,
      43,    73,     0,    45,    73,     0,    52,   166,    73,     0,
      51,     5,    73,     0,    73,     0,    49,   122,   167,    69,
     140,     0,    49,   122,   167,    69,   140,    48,   140,     0,
      47,   140,    54,   122,   167,    69,    73,     0,    54,   122,
     167,    69,   140,     0,    50,   122,   166,    73,   166,    73,
     166,    69,   140,     0,   159,     0,   160,     0,   161,     0,
     307,     0,    44,   165,     0,    44,   165,    75,   165,     0,
      46,     0,   168,     0,   168,    90,   167,    91,   162,     0,
     162,     0,   184,   212,   163,     0,   184,   212,   181,     0,
       0,   165,     0,   167,     0,     0,   167,     0,   193,     0,
     169,     0,   168,    93,   169,     0,   171,     0,   169,    94,
     171,     0,   113,   175,     0,   172,     0,   171,    95,   172,
       0,   173,     0,   172,    96,   173,     0,   176,     0,   173,
      97,   176,     0,   114,   175,     0,   184,     0,   122,   231,
      69,   175,     0,   177,     0,   176,   209,   177,     0,   178,
       0,   177,   210,   178,     0,   179,     0,   178,   211,   179,
       0,   180,     0,   179,   207,   180,     0,   175,     0,   180,
     208,   175,     0,    37,   122,   163,    74,   163,    69,     0,
      38,   122,   163,    74,   163,    74,   163,    69,     0,    39,
     122,   163,    74,   163,    74,   163,    74,   163,    69,     0,
      37,   122,     1,    69,     0,    38,   122,     1,    69,     0,
      39,   122,     1,    69,     0,   163,     0,   181,     0,    21,
     122,   182,    74,   182,    69,     0,    21,   122,     1,    69,
       0,   196,     0,   185,     0,   187,     0,   188,     0,   170,
       0,   174,     0,   189,     0,   190,     0,   191,     0,   192,
       0,   115,   122,   229,    69,     0,   115,   184,     0,   116,
     307,     0,   116,   122,   307,    69,     0,   107,   175,     0,
     106,   175,     0,    97,   175,     0,   108,   175,     0,   117,
     184,     0,   118,   184,     0,   163,     0,   193,    74,   163,
       0,   307,     0,   195,     0,   213,     0,   122,   167,    69,
       0,   122,     1,    69,     0,   194,     0,   197,     0,   198,
       0,   204,     0,   199,     0,   200,     0,   186,     0,   196,
     123,   167,    70,     0,   202,     0,   203,     0,   196,   117,
       0,   196,   118,     0,   309,     0,   196,   121,   201,     0,
     196,   120,   201,     0,   196,   122,   205,    69,     0,     0,
     206,     0,   163,     0,   181,     0,   206,    74,   163,     0,
     206,    74,   181,     0,   106,     0,   107,     0,   108,     0,
     109,     0,   110,     0,    98,     0,    99,     0,   100,     0,
     101,     0,   104,     0,   105,     0,    88,     0,    89,     0,
      11,     0,    12,     0,     9,     0,    10,     0,     7,     0,
       8,     0,     0,   215,     0,     0,     0,   216,   217,   222,
       0,     0,   219,     0,     0,     0,   220,   221,   222,     0,
     225,    73,     0,   225,    73,   222,     0,   224,    73,     0,
     225,    73,     0,   226,   247,     0,   227,   247,     0,     0,
     232,     0,   319,     0,     0,   230,   231,     0,   232,     0,
     232,   228,     0,   238,     0,    24,     0,    26,     0,    27,
       0,    23,     0,    25,     0,   233,     0,   234,     0,   258,
       0,     0,   238,     0,   235,   237,     0,     0,   236,   239,
     237,     0,   254,   237,     0,     0,   241,     0,     0,   258,
     242,   240,     0,   254,   240,     0,   241,     0,     0,   292,
     245,   322,     0,   244,     0,   244,    88,   250,     0,     0,
     248,     0,   249,     0,   246,     0,   249,    74,   246,     0,
     252,     0,   252,     0,   251,    74,   252,     0,   163,     0,
     181,     0,   183,     0,    71,   251,   253,    72,     0,     0,
      74,     0,   255,     0,    16,     0,    17,     0,    18,     0,
      19,     0,    21,     0,    22,     0,    20,   123,   164,    70,
       0,   255,     0,   256,   255,     0,     0,   256,     0,   269,
       0,   265,     0,   267,     0,   263,     0,   261,     0,   262,
       0,   259,     0,    28,     0,    29,     0,    30,     0,    31,
       0,    32,     0,    36,     0,    37,     0,    38,     0,    39,
       0,    33,     0,    34,     0,    35,     0,     6,     0,     4,
       0,    41,   260,     0,    42,   260,     0,    40,   260,     0,
      41,   260,     0,    41,    71,   270,    72,     0,   264,    71,
     270,    72,     0,    42,   260,     0,    42,    71,   270,    72,
       0,   266,    71,   270,    72,     0,    40,   260,     0,    40,
      71,   271,    72,     0,   268,    71,   271,    72,     0,     0,
     277,     0,     0,   273,   272,     0,     0,    74,     0,   274,
       0,   275,     0,   273,    74,   275,     0,   276,     0,   276,
      88,   163,     0,   309,     0,     0,     0,   278,   279,   280,
       0,   281,    73,     0,   280,    73,     0,   280,   281,    73,
       0,   243,   282,     0,   243,     0,   283,     0,     0,   284,
     286,   322,     0,     0,   283,    74,   285,   286,   322,     0,
     287,     0,   288,     0,   292,     0,     0,   291,    91,   289,
     290,     0,   162,     0,     0,   292,     0,   294,     0,   294,
       0,   303,   295,     0,   295,     0,   296,     0,   307,     0,
     122,   294,    69,     0,   297,     0,   298,     0,   296,   122,
     312,    69,     0,   296,   122,   304,    69,     0,   296,   122,
      69,     0,   296,   123,   164,    70,     0,   296,   100,   300,
     101,     0,   213,     0,   204,     0,   122,   167,    69,     0,
     307,     0,     0,   299,     0,   300,    74,   299,     0,   108,
     257,     0,   301,     0,   302,   301,     0,   302,     0,     0,
     305,   306,     0,   307,     0,   306,    74,   307,     0,     3,
       0,     6,     0,   307,     0,   308,     0,     0,     0,   311,
     314,     0,     0,   313,   314,     0,   315,     0,   315,    74,
      75,     0,   316,     0,   315,    74,   316,     0,     0,   317,
     318,     0,   232,   292,     0,   232,   319,     0,   232,     0,
     303,     0,   320,     0,   303,   320,     0,   321,     0,   122,
     319,    69,     0,   123,   164,    70,     0,   321,   123,   164,
      70,     0,   122,   310,    69,     0,   321,   122,   310,    69,
       0,     0,   323,     0,    80,   122,   122,   324,    69,    69,
       0,     0,    82,     0,    83,     0,    16,     0,    86,     0,
      81,   122,    11,    69,     0,    84,   122,   307,    69,     0,
      85,   122,   307,    74,    11,    74,    11,    69,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   243,   251,   262,   270,   275,   281,   290,   294,   298,
     302,   306,   310,   316,   344,   373,   406,   406,   424,   430,
     434,   437,   455,   459,   468,   484,   487,   497,   503,   507,
     510,   528,   532,   541,   552,   556,   562,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   596,   603,
     610,   624,   625,   628,   629,   630,   633,   642,   650,   658,
     666,   674,   681,   690,   700,   711,   720,   732,   733,   734,
     737,   745,   750,   758,   774,   775,   783,   784,   788,   794,
     798,   801,   804,   808,   811,   814,   815,   822,   823,   830,
     837,   838,   845,   846,   853,   854,   861,   868,   869,   877,
     878,   884,   885,   891,   892,   898,   899,   905,   906,   912,
     920,   930,   941,   945,   949,   955,   956,   959,   976,   982,
     983,   984,   985,   986,   987,   988,   989,   990,   991,   994,
    1001,  1008,  1012,  1032,  1038,  1045,  1052,  1058,  1065,  1072,
    1073,  1080,  1084,  1085,  1091,  1097,  1105,  1106,  1107,  1108,
    1109,  1110,  1111,  1114,  1123,  1124,  1127,  1134,  1141,  1144,
    1168,  1191,  1204,  1208,  1211,  1212,  1213,  1220,  1229,  1230,
    1233,  1234,  1235,  1238,  1241,  1242,  1243,  1246,  1247,  1250,
    1251,  1254,  1255,  1256,  1257,  1258,  1259,  1267,  1267,  1278,
    1278,  1278,  1299,  1299,  1309,  1309,  1309,  1323,  1328,  1341,
    1347,  1356,  1374,  1399,  1406,  1415,  1418,  1418,  1430,  1439,
    1462,  1468,  1469,  1470,  1473,  1474,  1477,  1478,  1488,  1491,
    1495,  1498,  1514,  1514,  1546,  1566,  1570,  1573,  1573,  1583,
    1598,  1607,  1607,  1618,  1619,  1626,  1630,  1633,  1636,  1640,
    1656,  1658,  1663,  1671,  1672,  1673,  1674,  1682,  1686,  1698,
    1701,  1702,  1703,  1704,  1705,  1706,  1707,  1715,  1716,  1724,
    1728,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,  1743,
    1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
    1756,  1763,  1771,  1781,  1791,  1801,  1811,  1818,  1842,  1852,
    1860,  1885,  1895,  1902,  1925,  1929,  1932,  1936,  1941,  1945,
    1955,  1958,  1963,  1971,  1983,  1997,  2003,  2003,  2003,  2023,
    2029,  2037,  2045,  2050,  2061,  2064,  2064,  2072,  2072,  2084,
    2102,  2113,  2116,  2116,  2136,  2139,  2143,  2150,  2156,  2162,
    2167,  2170,  2173,  2178,  2184,  2185,  2186,  2202,  2218,  2242,
    2256,  2267,  2271,  2275,  2279,  2285,  2289,  2293,  2303,  2309,
    2310,  2317,  2323,  2323,  2339,  2344,  2356,  2360,  2372,  2373,
    2381,  2385,  2385,  2394,  2394,  2408,  2409,  2418,  2419,  2426,
    2426,  2437,  2453,  2470,  2483,  2487,  2491,  2498,  2501,  2505,
    2509,  2519,  2523,  2539,  2543,  2546,  2556,  2561,  2565,  2569,
    2573,  2577,  2591,  2600
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "IDENT", "TAG_NAME", "LABEL_NAME", 
  "TYPEDEF_NAME", "STRING", "LSTRING", "CHAR_CONST", "LCHAR_CONST", 
  "INUM", "RNUM", "PP_DIR", "PP_LINE", "INVALID", "CONST", "VOLATILE", 
  "OUT", "REDUCE", "VOUT", "ITER", "KERNEL", "AUTO", "EXTRN", "REGISTR", 
  "STATIC", "TYPEDEF", "VOID", "CHAR", "SHORT", "INT", "LONG", "DOUBLE", 
  "SGNED", "UNSGNED", "FLOAT", "FLOAT2", "FLOAT3", "FLOAT4", "ENUM", 
  "STRUCT", "UNION", "BREAK", "CASE", "CONT", "DEFLT", "DO", "ELSE", "IF", 
  "FOR", "GOTO", "RETURN", "SWITCH", "WHILE", "PLUS_EQ", "MINUS_EQ", 
  "STAR_EQ", "DIV_EQ", "MOD_EQ", "B_AND_EQ", "B_OR_EQ", "B_XOR_EQ", 
  "L_SHIFT_EQ", "R_SHIFT_EQ", "EQUAL", "LESS_EQ", "GRTR_EQ", "NOT_EQ", 
  "RPAREN", "RBRCKT", "LBRACE", "RBRACE", "SEMICOLON", "COMMA", 
  "ELLIPSIS", "LB_SIGN", "DOUB_LB_SIGN", "BACKQUOTE", "AT", "ATTRIBUTE", 
  "ALIGNED", "PACKED", "CDECL", "MODE", "FORMAT", "NORETURN", "COMMA_OP", 
  "EQ", "ASSIGN", "QUESTMARK", "COLON", "COMMA_SEP", "OR", "AND", "B_OR", 
  "B_XOR", "B_AND", "COMP_EQ", "COMP_ARITH", "COMP_LESS", "COMP_GRTR", 
  "LESS", "GRTR", "L_SHIFT", "R_SHIFT", "PLUS", "MINUS", "STAR", "DIV", 
  "MOD", "CAST", "UNARY", "NOT", "B_NOT", "SIZEOF", "INDEXOF", "INCR", 
  "DECR", "HYPERUNARY", "ARROW", "DOT", "LPAREN", "LBRCKT", "program", 
  "trans_unit", "top_level_exit", "top_level_decl", "func_def", 
  "func_spec", "cmpnd_stemnt", "@1", "opt_stemnt_list", "stemnt_list", 
  "stemnt_list2", "stemnt", "cmpnd_stemnt_reentrance", 
  "opt_stemnt_list_reentrance", "stemnt_list_reentrance", 
  "stemnt_list_reentrance2", "stemnt_reentrance", 
  "non_constructor_stemnt", "constructor_stemnt", "expr_stemnt", 
  "labeled_stemnt", "cond_stemnt", "iter_stemnt", "switch_stemnt", 
  "break_stemnt", "continue_stemnt", "return_stemnt", "goto_stemnt", 
  "null_stemnt", "if_stemnt", "if_else_stemnt", "do_stemnt", 
  "while_stemnt", "for_stemnt", "label", "named_label", "case_label", 
  "deflt_label", "cond_expr", "assign_expr", "opt_const_expr", 
  "const_expr", "opt_expr", "expr", "log_or_expr", "log_and_expr", 
  "log_neg_expr", "bitwise_or_expr", "bitwise_xor_expr", 
  "bitwise_and_expr", "bitwise_neg_expr", "cast_expr", "equality_expr", 
  "relational_expr", "shift_expr", "additive_expr", "mult_expr", 
  "constructor_expr", "iter_constructor_arg", "iter_constructor_expr", 
  "unary_expr", "sizeof_expr", "indexof_expr", "unary_minus_expr", 
  "unary_plus_expr", "addr_expr", "indirection_expr", "preinc_expr", 
  "predec_expr", "comma_expr", "prim_expr", "paren_expr", "postfix_expr", 
  "subscript_expr", "comp_select_expr", "postinc_expr", "postdec_expr", 
  "field_ident", "direct_comp_select", "indirect_comp_select", 
  "func_call", "opt_expr_list", "expr_list", "add_op", "mult_op", 
  "equality_op", "relation_op", "shift_op", "assign_op", "constant", 
  "opt_KnR_declaration_list", "@2", "@3", "@4", "opt_declaration_list", 
  "@5", "@6", "@7", "declaration_list", "decl_stemnt", 
  "old_style_declaration", "declaration", "no_decl_specs", "decl_specs", 
  "abs_decl", "type_name", "@8", "type_name_bis", 
  "decl_specs_reentrance_bis", "local_or_global_storage_class", 
  "local_storage_class", "storage_class", "type_spec", 
  "opt_decl_specs_reentrance", "decl_specs_reentrance", "@9", 
  "opt_comp_decl_specs", "comp_decl_specs_reentrance", "@10", 
  "comp_decl_specs", "decl", "@11", "init_decl", "opt_init_decl_list", 
  "init_decl_list", "init_decl_list_reentrance", "initializer", 
  "initializer_list", "initializer_reentrance", "opt_comma", "type_qual", 
  "type_qual_token", "type_qual_list", "opt_type_qual_list", 
  "type_spec_reentrance", "typedef_name", "tag_ref", "struct_tag_ref", 
  "union_tag_ref", "enum_tag_ref", "struct_tag_def", "struct_type_define", 
  "union_tag_def", "union_type_define", "enum_tag_def", 
  "enum_type_define", "struct_or_union_definition", "enum_definition", 
  "opt_trailing_comma", "enum_def_list", "enum_def_list_reentrance", 
  "enum_const_def", "enum_constant", "field_list", "@12", "@13", 
  "field_list_reentrance", "comp_decl", "comp_decl_list", 
  "comp_decl_list_reentrance", "@14", "@15", "comp_declarator", 
  "simple_comp", "bit_field", "@16", "width", "opt_declarator", 
  "declarator", "func_declarator", "declarator_reentrance_bis", 
  "direct_declarator_reentrance_bis", "direct_declarator_reentrance", 
  "array_decl", "stream_decl", "dimension_constraint", "comma_constants", 
  "pointer_start", "pointer_reentrance", "pointer", "ident_list", "@17", 
  "ident_list_reentrance", "ident", "typename_as_ident", "any_ident", 
  "opt_param_type_list", "@18", "param_type_list", "@19", 
  "param_type_list_bis", "param_list", "param_decl", "@20", 
  "param_decl_bis", "abs_decl_reentrance", 
  "direct_abs_decl_reentrance_bis", "direct_abs_decl_reentrance", 
  "opt_gcc_attrib", "gcc_attrib", "gcc_inner", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   124,   124,   124,   125,   125,   126,   127,   127,   127,
     127,   127,   127,   128,   129,   129,   131,   130,   130,   132,
     132,   133,   134,   134,   134,   135,   136,   136,   137,   137,
     138,   139,   139,   139,   140,   140,   141,   141,   141,   141,
     141,   141,   141,   141,   141,   141,   141,   141,   142,   143,
     144,   145,   145,   146,   146,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   158,   158,
     159,   160,   160,   161,   162,   162,   163,   163,   163,   164,
     164,   165,   166,   166,   167,   168,   168,   169,   169,   170,
     171,   171,   172,   172,   173,   173,   174,   175,   175,   176,
     176,   177,   177,   178,   178,   179,   179,   180,   180,   181,
     181,   181,   181,   181,   181,   182,   182,   183,   183,   184,
     184,   184,   184,   184,   184,   184,   184,   184,   184,   185,
     185,   186,   186,   187,   188,   189,   190,   191,   192,   193,
     193,   194,   194,   194,   195,   195,   196,   196,   196,   196,
     196,   196,   196,   197,   198,   198,   199,   200,   201,   202,
     203,   204,   205,   205,   206,   206,   206,   206,   207,   207,
     208,   208,   208,   209,   210,   210,   210,   211,   211,   212,
     212,   213,   213,   213,   213,   213,   213,   215,   214,   216,
     217,   214,   219,   218,   220,   221,   218,   222,   222,   223,
     223,   224,   225,   226,   227,   228,   230,   229,   231,   231,
     232,   233,   233,   233,   234,   234,   235,   235,   236,   237,
     237,   238,   239,   238,   238,   240,   240,   242,   241,   241,
     243,   245,   244,   246,   246,   247,   247,   248,   249,   249,
     250,   251,   251,   252,   252,   252,   252,   253,   253,   254,
     255,   255,   255,   255,   255,   255,   255,   256,   256,   257,
     257,   258,   258,   258,   258,   258,   258,   258,   258,   258,
     258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
     259,   260,   261,   262,   263,   264,   265,   265,   266,   267,
     267,   268,   269,   269,   270,   270,   271,   271,   272,   272,
     273,   274,   274,   275,   275,   276,   278,   279,   277,   280,
     280,   280,   281,   281,   282,   284,   283,   285,   283,   286,
     286,   287,   289,   288,   290,   291,   291,   292,   293,   294,
     294,   295,   296,   296,   296,   296,   296,   296,   296,   297,
     298,   299,   299,   299,   299,   300,   300,   300,   301,   302,
     302,   303,   305,   304,   306,   306,   307,   308,   309,   309,
     310,   311,   310,   313,   312,   314,   314,   315,   315,   317,
     316,   318,   318,   318,   319,   319,   319,   320,   321,   321,
     321,   321,   321,   322,   322,   323,   324,   324,   324,   324,
     324,   324,   324,   324
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     1,     1,     2,     3,     0,     1,     1,     1,
       1,     2,     3,     2,     3,     3,     0,     5,     2,     0,
       1,     2,     0,     2,     2,     1,     4,     2,     0,     1,
       2,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       3,     1,     1,     1,     1,     1,     5,     2,     2,     3,
       3,     1,     5,     7,     7,     5,     9,     1,     1,     1,
       1,     2,     4,     1,     1,     5,     1,     3,     3,     0,
       1,     1,     0,     1,     1,     1,     3,     1,     3,     2,
       1,     3,     1,     3,     1,     3,     2,     1,     4,     1,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     6,
       8,    10,     4,     4,     4,     1,     1,     6,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       2,     2,     4,     2,     2,     2,     2,     2,     2,     1,
       3,     1,     1,     1,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     1,     2,     2,     1,     3,
       3,     4,     0,     1,     1,     1,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
       0,     3,     0,     1,     0,     0,     3,     2,     3,     2,
       2,     2,     2,     0,     1,     1,     0,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     2,     0,     3,     2,     0,     1,     0,     3,     2,
       1,     0,     3,     1,     3,     0,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     1,     4,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     2,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     4,     4,     2,     4,
       4,     2,     4,     4,     0,     1,     0,     2,     0,     1,
       1,     1,     3,     1,     3,     1,     0,     0,     3,     2,
       2,     3,     2,     1,     1,     0,     3,     0,     5,     1,
       1,     1,     0,     4,     1,     0,     1,     1,     1,     2,
       1,     1,     1,     3,     1,     1,     4,     4,     3,     4,
       4,     1,     1,     3,     1,     0,     1,     3,     2,     1,
       2,     1,     0,     2,     1,     3,     1,     1,     1,     1,
       0,     0,     2,     0,     2,     1,     3,     1,     3,     0,
       2,     2,     2,     1,     1,     1,     2,     1,     3,     3,
       4,     3,     4,     0,     1,     6,     0,     1,     1,     1,
       1,     4,     4,     8
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,     3,   280,     9,    10,   250,   251,   252,   253,     0,
     254,   255,   214,   211,   215,   212,   213,   268,   269,   270,
     271,   272,   277,   278,   279,   273,   274,   275,   276,     0,
       0,     0,     0,     6,     8,     0,     7,     0,     0,   235,
     235,   204,   216,   217,   219,   222,   210,   219,   249,   218,
     267,   265,   266,   264,     0,   262,     0,   263,     0,   261,
       6,    11,    79,   281,   296,   284,   306,   282,   306,   283,
       0,     6,     4,     0,    16,    13,   199,   200,   356,   259,
       0,   233,   238,   201,   236,   237,   189,   327,   330,   331,
     334,   335,   349,   351,     0,   332,   202,   231,   189,   328,
     221,   220,   219,   224,   306,   306,   296,    12,   185,   186,
     183,   184,   181,   182,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    76,   139,     0,    80,    81,
      74,    85,   123,    87,    90,    92,   124,   107,    94,    99,
     101,   103,   105,    97,   120,   152,   121,   122,   125,   126,
     127,   128,    84,   146,   142,   119,   147,   148,   150,   151,
     154,   155,   149,   143,   141,   357,     0,   298,   300,   301,
     303,   358,   359,   305,     0,   295,   307,     0,     5,    18,
     192,   257,   260,   348,     0,     0,     0,    15,   188,   190,
     383,   345,   363,    79,   350,   329,    14,   223,     0,     0,
       0,   135,    97,   134,   133,   136,    89,    96,     0,   130,
       0,   131,     0,   137,   138,     0,     0,     0,   208,   256,
       0,     0,     0,     0,     0,     0,   173,     0,   174,   175,
     176,     0,   177,   178,     0,   168,   169,     0,   170,   171,
     172,     0,   179,   180,     0,     0,   156,   157,     0,     0,
     162,     0,   292,   299,   297,     0,   286,     0,   289,     0,
     193,   195,   258,   333,     0,     0,     0,     0,     0,   243,
     244,   245,   234,   240,   239,     0,     0,   232,   384,     0,
       0,   149,   143,   346,     0,   141,   338,     0,     0,     0,
     369,     0,   287,   290,   293,     0,     0,     0,   145,   144,
       0,   361,    79,   209,   374,   205,   375,   377,     0,    86,
      88,    91,    93,    95,   100,   102,   104,   106,   108,    77,
      78,   140,   160,   158,   159,   164,   165,     0,   163,     0,
     302,   304,   230,   315,   225,   227,   308,     0,     0,     0,
       0,     0,    73,     0,     0,     0,     0,    82,     0,     0,
     192,    61,     0,    20,    38,    22,    36,    37,    39,    40,
      41,    42,    43,    44,    45,    46,    51,    52,    53,    54,
      55,     0,    67,    68,    69,     0,   141,     0,     0,     0,
       0,     0,   247,   241,   191,     0,   235,     0,     0,     0,
     340,   337,   353,   354,   336,   364,   365,   367,     0,   339,
     129,   207,   132,    98,     0,   369,     0,     0,   376,   361,
      79,     0,   161,     0,   153,   312,   314,   325,   229,   226,
     225,   310,     0,   309,    27,    47,    57,    71,    58,     0,
      34,    35,     0,     0,    82,     0,     0,    83,     0,     0,
       0,    17,     0,     0,    49,   196,     0,   115,   116,     0,
       0,     0,     0,     0,     0,     0,   248,     0,   197,   386,
     144,   347,     0,   369,   373,   370,   381,   362,   378,   379,
       0,     0,    75,   166,   167,   317,   383,   319,   320,     0,
     321,   228,   311,     0,     0,    48,     0,     0,    60,    59,
       0,     0,     0,    29,    31,    24,    23,    25,    50,   118,
       0,   112,     0,   113,     0,   114,     0,   242,   246,   198,
     389,     0,   387,   388,     0,     0,   390,     0,   355,   366,
     368,   361,   371,   374,   372,   382,   380,   325,   316,   322,
      72,     0,     0,    82,     0,     0,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   383,     0,     0,    62,
       0,    56,    65,    33,    32,   117,   109,     0,     0,     0,
       0,     0,   385,   318,   324,   323,     0,     0,    82,     0,
       0,   391,   392,     0,    64,    63,     0,   110,     0,     0,
       0,     0,     0,    66,   111,     0,   393,     0,     0,     0
};

static const short yydefgoto[] =
{
     587,    32,    72,    33,    34,    35,    75,   180,   352,   353,
     442,   496,   354,   492,   493,   537,   429,   430,   431,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   125,   126,
     127,   128,   436,   375,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   432,   449,   271,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   322,   160,   161,
     162,   327,   328,   237,   241,   227,   231,   234,   244,   163,
     187,   188,   189,   275,   259,   260,   261,   377,   384,    36,
      37,   385,    39,   386,   303,   295,   296,   217,    41,    42,
      43,    44,    45,   100,    46,   102,   418,   332,   420,   333,
      81,   190,    82,    96,    84,    85,   272,   382,   273,   457,
      47,    48,   182,   183,    49,    50,    65,    51,    52,    53,
      54,    55,    56,    57,    58,    59,   174,   166,   254,   167,
     168,   169,   170,   175,   176,   257,   336,   337,   415,   416,
     417,   527,   476,   477,   478,   547,   565,   479,    97,    98,
      87,    88,    89,    90,    91,   283,   284,    92,    93,    94,
     287,   288,   392,   164,   172,   173,   404,   405,   289,   290,
     395,   396,   397,   398,   465,   406,   306,   307,   277,   278,
     517
};

static const short yypact[] =
{
     434,     8,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -72,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    56,
      75,    79,   544,-32768,-32768,    62,-32768,    -5,    14,    53,
      53,-32768,-32768,-32768,  1428,-32768,-32768,  1428,-32768,-32768,
  -32768,-32768,-32768,-32768,    -7,-32768,    33,-32768,    38,-32768,
  -32768,-32768,  1231,-32768,    96,    72,    77,    85,    77,   103,
       8,-32768,-32768,   109,-32768,-32768,-32768,-32768,-32768,   251,
      53,    97,-32768,-32768,-32768,    51,   113,-32768,-32768,    57,
  -32768,-32768,-32768,    90,    50,-32768,-32768,-32768,    70,   156,
  -32768,-32768,  1428,-32768,    77,    77,    96,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  1231,  1231,  1231,  1231,  1231,  1231,
    1244,    54,  1257,  1257,   602,-32768,-32768,   132,-32768,-32768,
     101,   143,-32768,   112,    94,   114,-32768,-32768,   149,   105,
     111,   117,   118,   152,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   176,-32768,-32768,   177,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   193,   200,-32768,-32768,
     187,-32768,-32768,-32768,   204,-32768,-32768,   205,-32768,-32768,
    1465,-32768,   251,-32768,   210,  1111,    53,-32768,-32768,-32768,
     202,    66,    82,  1231,-32768,-32768,-32768,-32768,   212,   213,
     224,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   652,-32768,
     298,-32768,   405,-32768,-32768,   233,   234,   236,   -22,-32768,
    1231,  1231,  1231,  1231,  1231,  1231,-32768,  1231,-32768,-32768,
  -32768,  1231,-32768,-32768,  1231,-32768,-32768,  1231,-32768,-32768,
  -32768,  1231,-32768,-32768,  1193,  1231,-32768,-32768,    96,    96,
    1193,  1231,-32768,    96,-32768,  1231,-32768,  1502,-32768,   978,
  -32768,-32768,-32768,-32768,   185,   188,   189,   190,  1111,-32768,
  -32768,-32768,-32768,-32768,-32768,  1428,   191,-32768,-32768,   405,
     177,   -12,    -9,-32768,    10,    22,-32768,   245,   298,   246,
  -32768,   250,-32768,-32768,-32768,   247,  1428,   252,-32768,-32768,
    1231,    95,  1231,-32768,   120,-32768,-32768,   123,   232,   143,
     112,    94,   114,   149,   105,   111,   117,   118,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   255,   253,   256,
  -32768,-32768,-32768,   257,  1502,-32768,  1370,   258,   180,   259,
    1231,   260,-32768,   898,   203,   206,   324,  1231,   214,   215,
    1465,-32768,   262,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   244,-32768,-32768,-32768,   265,   248,  1428,   280,  1045,
    1058,  1071,   266,-32768,-32768,   268,    53,   220,   274,    66,
  -32768,-32768,   270,-32768,-32768,-32768,   271,-32768,  1428,-32768,
  -32768,-32768,-32768,-32768,   277,-32768,   279,   281,-32768,   283,
    1231,  1231,-32768,  1193,-32768,-32768,   275,    53,-32768,-32768,
    1502,-32768,   285,-32768,-32768,-32768,-32768,   286,-32768,   300,
  -32768,-32768,   287,  1231,  1231,   289,   290,-32768,  1231,  1231,
     991,-32768,   734,   898,-32768,-32768,   295,-32768,-32768,   291,
     297,   293,   299,   296,   302,   301,  1111,   304,  1428,   173,
      91,-32768,   298,   294,    40,-32768,-32768,-32768,-32768,-32768,
     303,   312,-32768,-32768,-32768,-32768,   202,-32768,-32768,   282,
     292,-32768,-32768,  1231,   267,-32768,   305,   317,-32768,-32768,
     322,   323,   327,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    1193,-32768,  1231,-32768,  1231,-32768,  1231,-32768,-32768,-32768,
  -32768,   278,-32768,-32768,   308,   310,-32768,   336,-32768,-32768,
  -32768,    37,-32768,    45,-32768,-32768,-32768,    53,-32768,-32768,
  -32768,  1231,   898,  1231,   898,   898,-32768,   816,   338,   340,
     344,   345,   409,   298,   298,   352,   202,  1231,   353,   376,
     354,-32768,-32768,-32768,-32768,-32768,-32768,  1231,  1231,   357,
     367,   364,-32768,-32768,-32768,-32768,   366,   898,  1231,   372,
     369,-32768,-32768,   433,-32768,-32768,   377,-32768,  1231,   371,
     898,   380,   467,-32768,-32768,   411,-32768,   481,   485,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,    84,   454,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  -397,  -227,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -374,  -147,
    -171,  -306,  -399,   -54,-32768,   269,-32768,   272,   264,   273,
  -32768,   -88,   276,   288,   261,   306,   263,  -178,   -11,-32768,
    -105,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  -170,-32768,-32768,-32768,-32768,   254,-32768,-32768,
    -168,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -167,
     401,-32768,-32768,-32768,   158,-32768,-32768,-32768,  -330,-32768,
  -32768,    59,-32768,    61,-32768,-32768,-32768,   221,  -118,-32768,
  -32768,-32768,-32768,     3,     5,-32768,    86,  -290,-32768,-32768,
  -32768,-32768,   330,   470,-32768,-32768,-32768,-32768,  -248,-32768,
    -224,   -40,-32768,-32768,  -221,-32768,   230,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   -10,   404,-32768,-32768,
  -32768,   284,-32768,-32768,-32768,-32768,-32768,   194,-32768,-32768,
  -32768,-32768,    -3,-32768,-32768,-32768,-32768,-32768,   -36,-32768,
     -38,   -90,-32768,-32768,-32768,   136,-32768,   436,-32768,  -213,
  -32768,-32768,-32768,   -39,-32768,    15,   122,-32768,-32768,-32768,
     121,-32768,    69,-32768,-32768,  -202,  -285,-32768,  -422,-32768,
  -32768
};


#define	YYLAST		1544


static const short yytable[] =
{
      95,    95,    99,    86,   195,   304,   218,   270,   129,   202,
     202,   202,   202,   202,   202,   209,   305,   213,   214,   408,
     383,   280,   291,   281,   282,   171,   201,   203,   204,   205,
     206,   207,   355,   334,   427,   487,   335,   472,   269,   181,
      78,    95,   184,    78,   419,   497,   498,   445,    78,   101,
     103,    62,   101,    78,   528,    95,    78,    78,   177,    38,
      63,    40,  -342,    73,   104,  -341,   320,   171,    76,    78,
     216,  -187,   326,   108,   109,   110,   111,   112,   113,    63,
      60,    61,   211,    63,   389,  -352,    79,    77,   304,  -342,
     270,    38,  -341,    40,   198,   199,  -344,   319,   321,    78,
     301,   302,   165,   325,   105,   197,  -360,   101,   331,   106,
     334,   390,   334,   335,  -187,   335,   202,   202,   202,   202,
     202,   269,   202,  -344,   563,   186,   202,    64,   509,   202,
     419,   407,   202,    74,   550,   549,   202,   551,   552,   129,
     554,  -187,   262,  -291,   107,    79,    66,    95,    79,  -294,
      68,   286,   285,   318,   216,   178,  -285,   191,   216,   521,
     302,    79,   521,   302,  -360,  -343,   308,   521,   302,   576,
     575,   297,    80,   564,  -288,    80,   210,   530,   218,   192,
     193,   179,   121,   583,  -187,   185,  -231,  -231,   279,   510,
     224,   220,  -343,  -231,   221,   202,   334,   329,    79,   335,
     448,  -231,   219,    79,   228,   229,   230,   223,   507,   171,
     171,   225,   403,   494,   171,   232,   233,   301,   302,   280,
     376,   281,   282,   235,   236,   388,   238,   239,   240,  -327,
    -327,   447,   451,   453,   455,   474,  -327,   222,   408,   471,
     242,   243,   301,   302,  -327,   409,   410,   226,   129,   393,
     245,   523,   424,   425,   511,   512,   513,   514,   515,   516,
      67,    69,   524,   323,   323,   252,   473,     5,     6,     7,
       8,     9,    10,    11,   253,   255,   256,   258,   270,   263,
     464,   446,   276,    78,   292,   293,   129,   108,   109,   110,
     111,   112,   113,   437,   246,   247,   294,   248,   249,   250,
     251,    78,   298,   299,   376,   300,   202,   378,   523,   269,
     379,   380,   381,   387,   391,   394,   400,   265,   266,   267,
     399,   402,   448,   411,   412,   433,   414,   413,   434,   435,
    -313,   423,   426,   428,   441,   443,   438,   439,   444,   -70,
     456,   458,   459,   460,   462,   463,   466,    95,   468,   475,
     285,   469,  -360,   447,   484,   539,   129,   540,   482,   541,
     485,   483,   488,   489,   499,   500,   501,   502,   503,   519,
     504,   505,   525,   529,   532,   506,   508,   114,    95,   486,
     437,   480,   526,  -326,   490,   491,   115,   116,   117,   531,
     533,   534,   535,   118,   119,   120,   121,   122,   123,   536,
     542,   376,   124,   376,   376,   545,   215,   555,    78,   556,
     569,   570,   108,   109,   110,   111,   112,   113,   557,   558,
     559,   562,   566,   518,   567,    95,   571,   568,   522,   129,
     543,   581,   544,   195,    -1,     1,   572,  -203,   573,   574,
       2,   577,   202,   578,   579,   582,   580,     3,     4,   584,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,   548,   585,   437,
     586,   588,    95,   184,    95,   589,    71,   311,    95,   538,
     309,   480,   315,   376,   310,   376,   376,   312,   376,   196,
     317,   313,   114,   324,   560,   561,   481,  -203,   440,    83,
     200,   115,   116,   117,   437,   314,   274,   401,   118,   119,
     120,   121,   122,   123,   546,   461,   467,   124,   376,   194,
     422,   470,   520,     0,     0,     0,     0,   330,     0,     0,
     316,   376,  -203,     0,    -2,    70,     0,  -203,     0,     0,
       2,     0,     0,     0,     0,     0,  -203,     3,     4,     0,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   215,     0,    78,     0,     0,     2,   108,
     109,   110,   111,   112,   113,     0,     0,  -203,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,  -203,   215,     0,    78,     0,     0,  -206,   108,
     109,   110,   111,   112,   113,     0,  -203,     0,  -206,  -206,
    -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,
    -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,
    -206,  -206,  -206,  -206,  -206,     0,     0,     0,     0,   114,
       0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
     117,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,     0,     0,     0,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   338,     0,    78,     0,     0,
       0,   108,   109,   110,   111,   112,   113,     0,   495,   114,
       0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
     117,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   265,   266,   267,   124,     0,     0,   339,   340,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   350,   -21,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   338,     0,    78,
       0,     0,     0,   108,   109,   110,   111,   112,   113,     0,
     553,   114,     0,     0,     0,     0,     0,     0,     0,     0,
     115,   116,   117,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   265,   266,   267,   124,     0,     0,   339,
     340,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   350,   -30,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
       0,    78,     0,     0,     0,   108,   109,   110,   111,   112,
     113,     0,     0,   114,     0,     0,     0,     0,     0,     0,
       0,     0,   115,   116,   117,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   265,   266,   267,   124,     0,
       0,   339,   340,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
       0,   351,     0,     0,     0,     0,     0,     0,     0,   338,
       0,    78,     0,     0,     0,   108,   109,   110,   111,   112,
     113,     0,   338,     0,    78,   114,     0,     0,   108,   109,
     110,   111,   112,   113,   115,   116,   117,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,     0,     0,     0,
     124,   339,   340,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,     0,   339,   340,   341,   342,   343,     0,
     344,   345,   346,   347,   348,   349,   450,     0,    78,   350,
     -19,   351,   108,   109,   110,   111,   112,   113,     0,   452,
       0,    78,   350,   -28,   351,   108,   109,   110,   111,   112,
     113,     0,   454,     0,    78,   114,     0,     0,   108,   109,
     110,   111,   112,   113,   115,   116,   117,     0,   114,     0,
       0,   118,   119,   120,   121,   122,   123,   115,   116,   117,
     124,     0,     0,     0,   118,   119,   120,   121,   122,   123,
       0,     0,     0,   124,    78,     0,     0,     0,   108,   109,
     110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,     0,     0,     0,     0,     0,   265,   266,
     267,   115,   116,   117,     0,   114,     0,     0,   118,   119,
     120,   121,   122,   123,   115,   116,   117,   124,   114,     0,
       0,   118,   119,   120,   121,   122,   123,   115,   116,   117,
     124,     0,   268,     0,   118,   119,   120,   121,   122,   123,
       0,     0,     0,   124,     0,     0,    78,     0,     0,     0,
     108,   109,   110,   111,   112,   113,     0,     0,   114,     0,
       0,     0,     0,     0,     0,     0,     0,   115,   116,   117,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     265,   266,   267,   124,    78,     0,     0,     0,   108,   109,
     110,   111,   112,   113,     0,     0,     0,    78,     0,     0,
       0,   108,   109,   110,   111,   112,   113,     0,     0,     0,
      78,     0,     0,     0,   108,   109,   110,   111,   112,   113,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     116,   117,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,     0,     0,     0,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,     0,
       0,     0,     0,     0,     0,     0,     0,   115,   116,   117,
       0,   114,     0,     0,   118,   119,   120,   121,   122,   123,
     115,   116,   117,   124,   114,     0,     0,   118,   119,   120,
     121,   122,   123,   115,   116,   117,   208,     0,     0,     0,
     118,   119,   120,   121,   122,   123,     2,     0,     0,   212,
       0,     0,     0,     0,     0,     0,     5,     6,     7,     8,
       9,    10,    11,     0,     0,     0,     0,     0,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,   421,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,  -194,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
    -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
    -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
       7,     8,     9,    10,    11,     0,     0,     0,     0,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31
};

static const short yycheck[] =
{
      39,    40,    40,    39,    94,   218,   124,   185,    62,   114,
     115,   116,   117,   118,   119,   120,   218,   122,   123,   304,
     268,   191,   193,   191,   191,    64,   114,   115,   116,   117,
     118,   119,   259,   257,   340,   434,   257,   411,   185,    79,
       3,    80,    80,     3,   334,   442,   443,   377,     3,    44,
      47,   123,    47,     3,   476,    94,     3,     3,    68,     0,
       4,     0,    74,     1,    71,    74,   244,   106,    73,     3,
     124,     1,   250,     7,     8,     9,    10,    11,    12,     4,
      72,    73,   121,     4,    74,     3,   108,    73,   301,   101,
     268,    32,   101,    32,   104,   105,    74,   244,   245,     3,
     122,   123,     6,   250,    71,   102,    69,   102,   255,    71,
     334,   101,   336,   334,     1,   336,   221,   222,   223,   224,
     225,   268,   227,   101,   546,    74,   231,    71,   458,   234,
     420,   302,   237,    71,   533,   532,   241,   534,   535,   193,
     537,    71,   182,    71,    60,   108,    71,   186,   108,    72,
      71,    69,   191,   241,   208,    71,    71,   100,   212,   122,
     123,   108,   122,   123,    69,    74,   220,   122,   123,   568,
     567,   210,   122,   547,    71,   122,   122,   483,   296,   122,
     123,    72,   116,   580,    71,    88,    73,    74,   122,    16,
      96,    90,   101,    80,    93,   300,   420,   251,   108,   420,
     378,    88,    70,   108,    99,   100,   101,    95,   456,   248,
     249,    97,   300,   440,   253,   104,   105,   122,   123,   389,
     259,   389,   389,   106,   107,   279,   108,   109,   110,    73,
      74,   378,   379,   380,   381,   413,    80,    94,   523,   410,
      88,    89,   122,   123,    88,   122,   123,    98,   302,   288,
      74,   464,    72,    73,    81,    82,    83,    84,    85,    86,
      30,    31,   464,   248,   249,    72,   413,    16,    17,    18,
      19,    20,    21,    22,    74,    88,    72,    72,   456,    69,
     398,     1,    80,     3,    72,    72,   340,     7,     8,     9,
      10,    11,    12,   347,   117,   118,    72,   120,   121,   122,
     123,     3,    69,    69,   343,    69,   411,   122,   521,   456,
     122,   122,   122,   122,    69,    69,    69,    37,    38,    39,
      70,    69,   500,    91,    69,   122,    70,    74,   122,     5,
      73,    73,    73,    73,    72,    91,   122,   122,    73,    91,
      74,    73,   122,    69,    74,    74,    69,   386,    69,    74,
     389,    70,    69,   500,    54,   502,   410,   504,    73,   506,
      73,    75,    73,    73,    69,    74,    69,    74,    69,    75,
      74,    69,    69,    91,    69,    74,    72,    97,   417,   433,
     434,   417,    70,    91,   438,   439,   106,   107,   108,   122,
      73,    69,    69,   113,   114,   115,   116,   117,   118,    72,
     122,   440,   122,   442,   443,    69,     1,    69,     3,    69,
     557,   558,     7,     8,     9,    10,    11,    12,    74,    74,
      11,    69,    69,   462,    48,   464,    69,    73,   464,   483,
     122,   578,   122,   523,     0,     1,    69,     3,    74,    73,
       6,    69,   547,    74,    11,    74,    69,    13,    14,    69,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   531,    11,   533,
      69,     0,   521,   521,   523,     0,    32,   223,   527,   500,
     221,   527,   231,   532,   222,   534,   535,   224,   537,    98,
     237,   225,    97,   249,   543,   544,   420,    73,   350,    39,
     106,   106,   107,   108,   568,   227,   186,   296,   113,   114,
     115,   116,   117,   118,   527,   389,   405,   122,   567,    93,
     336,   409,   463,    -1,    -1,    -1,    -1,   253,    -1,    -1,
     234,   580,   108,    -1,     0,     1,    -1,     3,    -1,    -1,
       6,    -1,    -1,    -1,    -1,    -1,   122,    13,    14,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,     6,     7,
       8,     9,    10,    11,    12,    -1,    -1,    73,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,     1,    -1,     3,    -1,    -1,     6,     7,
       8,     9,    10,    11,    12,    -1,   122,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    -1,    -1,    -1,    -1,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,     7,     8,     9,    10,    11,    12,    -1,    14,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,    37,    38,    39,   122,    -1,    -1,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,     7,     8,     9,    10,    11,    12,    -1,
      14,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,    37,    38,    39,   122,    -1,    -1,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,   118,    37,    38,    39,   122,    -1,
      -1,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,     7,     8,     9,    10,    11,
      12,    -1,     1,    -1,     3,    97,    -1,    -1,     7,     8,
       9,    10,    11,    12,   106,   107,   108,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
     122,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    -1,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,     1,    -1,     3,    71,
      72,    73,     7,     8,     9,    10,    11,    12,    -1,     1,
      -1,     3,    71,    72,    73,     7,     8,     9,    10,    11,
      12,    -1,     1,    -1,     3,    97,    -1,    -1,     7,     8,
       9,    10,    11,    12,   106,   107,   108,    -1,    97,    -1,
      -1,   113,   114,   115,   116,   117,   118,   106,   107,   108,
     122,    -1,    -1,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,   122,     3,    -1,    -1,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,    37,    38,
      39,   106,   107,   108,    -1,    97,    -1,    -1,   113,   114,
     115,   116,   117,   118,   106,   107,   108,   122,    97,    -1,
      -1,   113,   114,   115,   116,   117,   118,   106,   107,   108,
     122,    -1,    71,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,   122,    -1,    -1,     3,    -1,    -1,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,   118,
      37,    38,    39,   122,     3,    -1,    -1,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,     3,    -1,    -1,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
       3,    -1,    -1,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
      -1,    97,    -1,    -1,   113,   114,   115,   116,   117,   118,
     106,   107,   108,   122,    97,    -1,    -1,   113,   114,   115,
     116,   117,   118,   106,   107,   108,   122,    -1,    -1,    -1,
     113,   114,   115,   116,   117,   118,     6,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,     6,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 244 "gram.y"
{
            if (err_cnt == 0)
              *gProject->Parse_TOS->yyerrstream
              << "Warning: ANSI/ISO C forbids an empty source file.\n";
            gProject->Parse_TOS->transUnit = (TransUnit*) NULL;
            yyval.transunit = (TransUnit*) NULL;
        ;
    break;}
case 2:
#line 252 "gram.y"
{
            if (err_cnt)
            {
                *gProject->Parse_TOS->yyerrstream
                << err_cnt << " errors found.\n";
                gProject->Parse_TOS->transUnit = (TransUnit*) NULL;
            } else {
                gProject->Parse_TOS->transUnit = yyval.transunit;
            }
        ;
    break;}
case 3:
#line 263 "gram.y"
{
            *gProject->Parse_TOS->yyerrstream << "Errors - Aborting parse.\n";
            gProject->Parse_TOS->transUnit = (TransUnit*) NULL;
            YYACCEPT;
        ;
    break;}
case 4:
#line 271 "gram.y"
{
            yyval.transunit = gProject->Parse_TOS->transUnit;
            yyval.transunit->add(yyvsp[-1].stemnt);
        ;
    break;}
case 5:
#line 276 "gram.y"
{
            yyval.transunit->add(yyvsp[-1].stemnt);
        ;
    break;}
case 6:
#line 282 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->ReinitializeCtxt();
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScopes(FILE_SCOPE);
            err_top_level = 0;            
        ;
    break;}
case 7:
#line 291 "gram.y"
{
            yyval.stemnt = yyvsp[0].declStemnt;
        ;
    break;}
case 8:
#line 295 "gram.y"
{
            yyval.stemnt = yyvsp[0].functionDef;
        ;
    break;}
case 9:
#line 299 "gram.y"
{
            yyval.stemnt = yyvsp[0].stemnt;
        ;
    break;}
case 10:
#line 303 "gram.y"
{
            yyval.stemnt = yyvsp[0].stemnt;
        ;
    break;}
case 11:
#line 307 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 12:
#line 311 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 13:
#line 317 "gram.y"
{
            if (yyvsp[0].stemnt != NULL)
            {
                yyval.functionDef = new FunctionDef(yyvsp[0].stemnt->location);
                Block *blk = (Block*) yyvsp[0].stemnt;
    
                yyval.functionDef->decl = yyvsp[-1].decl;
                
                if (yyvsp[-1].decl->name &&
                    yyvsp[-1].decl->name->entry)
                    yyvsp[-1].decl->name->entry->u2FunctionDef = yyval.functionDef;
                
                // Steal internals of the compound statement
                yyval.functionDef->head = blk->head;
                yyval.functionDef->tail = blk->tail;
    
                blk->head = blk->tail = (Statement*) NULL;
                delete yyvsp[0].stemnt;    
            }
			else
			{
				delete yyvsp[-1].decl;
				yyval.functionDef = (FunctionDef*) NULL;
			}
        ;
    break;}
case 14:
#line 345 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
            
            possibleType = true;
            yyval.decl = yyvsp[-1].decl;

            if (yyval.decl->form != NULL)
            {
                assert(err_top_level ||
                       yyval.decl->form->type == TT_Function );
    
                yyval.decl->extend(yyvsp[-2].base);
    
                /* This is adding K&R-style declarations if $3 exists */
                if (yyvsp[0].decl != NULL)
                {
                    FunctionType *fnc = (FunctionType*) (yyval.decl->form);
                    fnc->KnR_decl = true;
                    Decl *param = yyvsp[0].decl;
                    while (param != NULL)
                    {
                        Decl *next= param->next;
                            delete param ;
                        param = next;
                    }
                }
            }
        ;
    break;}
case 15:
#line 374 "gram.y"
{

            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
            
            yyval.decl = yyvsp[-1].decl;

            if (yyval.decl->form != NULL)
            {
                assert(err_top_level ||
                       yyval.decl->form->type == TT_Function );
                yyval.decl->extend(yyvsp[-2].base);
    
                /* This is adding K&R-style declarations if $3 exists */
                if (yyvsp[0].decl != NULL)
                {
                    FunctionType *fnc = (FunctionType*) (yyval.decl->form);
                    fnc->KnR_decl = true;
                    Decl *param = yyvsp[0].decl;
                    while (param != NULL)
                    {
                        Decl *next= param->next;
                            delete param ;
                        param = next;
                    }
                }
            }
        ;
    break;}
case 16:
#line 407 "gram.y"
{  
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ReEnterScope();
        ;
    break;}
case 17:
#line 412 "gram.y"
{
            Block*    block = new Block(*yyvsp[-4].loc);
            yyval.stemnt = block;
            block->addDecls(yyvsp[-2].decl);
            block->addStatements(ReverseList(yyvsp[-1].stemnt));
            if (gProject->Parse_TOS->transUnit)
            {
                yyCheckLabelsDefinition(gProject->Parse_TOS->transUnit->contxt.labels);
                gProject->Parse_TOS->transUnit->contxt.ExitScope();
                gProject->Parse_TOS->transUnit->contxt.ExitScope();
            }
        ;
    break;}
case 18:
#line 425 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 19:
#line 431 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 21:
#line 438 "gram.y"
{
	    /*
	     * All the statements are expected in a reversed list (because
	     * of how we parse stemnt_list2) so we need to take the
	     * non_constructor statement at the end.
	     */
            if (yyvsp[0].stemnt)
            {
	        Statement *s;

		for (s = yyvsp[0].stemnt; s->next; s = s->next) /* Traverse to the end */;
		s->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 22:
#line 456 "gram.y"
{
	   yyval.stemnt = (Statement *) NULL;
	;
    break;}
case 23:
#line 460 "gram.y"
{
            /* Hook them up backwards, we'll reverse them later. */
            if (yyvsp[0].stemnt)
            {
                yyvsp[0].stemnt->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 24:
#line 469 "gram.y"
{    /* preprocessor #line directive */
            /* Hook them up backwards, we'll reverse them later. */
            if (yyvsp[0].stemnt)
            {
                yyvsp[0].stemnt->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 26:
#line 488 "gram.y"
{
            Block*    block = new Block(*yyvsp[-3].loc);
            yyval.stemnt = block;
            block->addDecls(yyvsp[-2].decl);
            block->addStatements(ReverseList(yyvsp[-1].stemnt));
            
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope();
        ;
    break;}
case 27:
#line 498 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 28:
#line 504 "gram.y"
{
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 30:
#line 511 "gram.y"
{
	    /*
	     * All the statements are expected in a reversed list (because
	     * of how we parse stemnt_list_reentrance2) so we need to take
	     * the non_constructor statement at the end.
	     */
            if (yyvsp[0].stemnt)
            {
	        Statement *s;

		for (s = yyvsp[0].stemnt; s->next; s = s->next) /* Traverse to the end */;
		s->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 31:
#line 529 "gram.y"
{
	   yyval.stemnt = (Statement *) NULL;
	;
    break;}
case 32:
#line 533 "gram.y"
{
            /* Hook them up backwards, we'll reverse them later. */
            if (yyvsp[0].stemnt)
            {
                yyvsp[0].stemnt->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 33:
#line 542 "gram.y"
{    /* preprocessor #line directive */
            /* Hook them up backwards, we'll reverse them later. */
            if (yyvsp[0].stemnt)
            {
                yyvsp[0].stemnt->next = yyvsp[-1].stemnt;
                yyval.stemnt = yyvsp[0].stemnt;
            }
        ;
    break;}
case 34:
#line 553 "gram.y"
{
	    yyval.stemnt = yyvsp[0].stemnt;
	 ;
    break;}
case 35:
#line 557 "gram.y"
{
	    yyval.stemnt = yyvsp[0].stemnt;
	 ;
    break;}
case 47:
#line 574 "gram.y"
{
            delete yyvsp[0].loc;
            yyval.stemnt = (Statement*) NULL;
        ;
    break;}
case 48:
#line 597 "gram.y"
{
            yyval.stemnt = new ExpressionStemnt(yyvsp[-1].value,*yyvsp[0].loc);
            delete yyvsp[0].loc;
	;
    break;}
case 49:
#line 604 "gram.y"
{
            yyval.stemnt = new ExpressionStemnt(yyvsp[-1].value,*yyvsp[0].loc);
            delete yyvsp[0].loc;
        ;
    break;}
case 50:
#line 611 "gram.y"
{
            yyval.stemnt = yyvsp[0].stemnt;
            if (yyval.stemnt == NULL)
            {
              /* Sorry, we must have a statement here. */
              yyerr("Can't have a label at the end of a block! ");
              yyval.stemnt = new Statement(ST_NullStemnt,*yyvsp[-1].loc);
            }
            yyval.stemnt->addHeadLabel(yyvsp[-2].label);
            delete yyvsp[-1].loc;
        ;
    break;}
case 56:
#line 634 "gram.y"
{
            yyval.stemnt = new SwitchStemnt(yyvsp[-2].value,yyvsp[0].stemnt,*yyvsp[-4].loc);
            delete yyvsp[-4].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 57:
#line 643 "gram.y"
{
            yyval.stemnt = new Statement(ST_BreakStemnt,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 58:
#line 651 "gram.y"
{
            yyval.stemnt = new Statement(ST_ContinueStemnt,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 59:
#line 659 "gram.y"
{
            yyval.stemnt = new ReturnStemnt(yyvsp[-1].value,*yyvsp[-2].loc);
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 60:
#line 667 "gram.y"
{
            yyval.stemnt = new GotoStemnt(yyvsp[-1].symbol,*yyvsp[-2].loc);
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 61:
#line 675 "gram.y"
{
            yyval.stemnt = new Statement(ST_NullStemnt,*yyvsp[0].loc);
            delete yyvsp[0].loc;
        ;
    break;}
case 62:
#line 682 "gram.y"
{
            yyval.stemnt = new IfStemnt(yyvsp[-2].value,yyvsp[0].stemnt,*yyvsp[-4].loc);
            delete yyvsp[-4].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 63:
#line 691 "gram.y"
{
            yyval.stemnt = new IfStemnt(yyvsp[-4].value,yyvsp[-2].stemnt,*yyvsp[-6].loc,yyvsp[0].stemnt);
            delete yyvsp[-6].loc;
            delete yyvsp[-5].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 64:
#line 701 "gram.y"
{
            yyval.stemnt = new DoWhileStemnt(yyvsp[-2].value,yyvsp[-5].stemnt,*yyvsp[-6].loc);
            delete yyvsp[-6].loc;
            delete yyvsp[-4].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 65:
#line 712 "gram.y"
{
            yyval.stemnt = new WhileStemnt(yyvsp[-2].value,yyvsp[0].stemnt,*yyvsp[-4].loc);
            delete yyvsp[-4].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 66:
#line 722 "gram.y"
{
            yyval.stemnt = new ForStemnt(yyvsp[-6].value,yyvsp[-4].value,yyvsp[-2].value,*yyvsp[-8].loc,yyvsp[0].stemnt);
            delete yyvsp[-8].loc;
            delete yyvsp[-7].loc;
            delete yyvsp[-5].loc;
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 70:
#line 738 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.label = gProject->Parse_TOS->parseCtxt->Mk_named_label(yyvsp[0].symbol,
                                gProject->Parse_TOS->transUnit->contxt.labels);
        ;
    break;}
case 71:
#line 746 "gram.y"
{
            yyval.label = new Label(yyvsp[0].value);
            delete yyvsp[-1].loc;
        ;
    break;}
case 72:
#line 751 "gram.y"
{
            yyval.label = new Label(yyvsp[-2].value,yyvsp[0].value);
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 73:
#line 759 "gram.y"
{
            yyval.label = new Label(LT_Default);
            delete yyvsp[0].loc;
        ;
    break;}
case 75:
#line 776 "gram.y"
{
            yyval.value = new TrinaryExpr(yyvsp[-4].value,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-3].loc);
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 77:
#line 785 "gram.y"
{
            yyval.value = new AssignExpr(yyvsp[-1].assignOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 78:
#line 789 "gram.y"
{
            yyval.value = new AssignExpr(yyvsp[-1].assignOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 79:
#line 795 "gram.y"
{
            yyval.value = (Expression*) NULL;
        ;
    break;}
case 82:
#line 805 "gram.y"
{
           yyval.value = (Expression*) NULL;
        ;
    break;}
case 86:
#line 816 "gram.y"
{
            yyval.value = new BinaryExpr(BO_Or,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 88:
#line 824 "gram.y"
{
            yyval.value = new BinaryExpr(BO_And,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 89:
#line 831 "gram.y"
{
            yyval.value = new UnaryExpr(UO_Not,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 91:
#line 839 "gram.y"
{
            yyval.value = new BinaryExpr(BO_BitOr,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 93:
#line 847 "gram.y"
{
            yyval.value = new BinaryExpr(BO_BitXor,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 95:
#line 855 "gram.y"
{
            yyval.value = new BinaryExpr(BO_BitAnd,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 96:
#line 862 "gram.y"
{
            yyval.value = new UnaryExpr(UO_BitNot,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 98:
#line 870 "gram.y"
{
            yyval.value = new CastExpr(yyvsp[-2].type,yyvsp[0].value,*yyvsp[-3].loc);
            delete yyvsp[-3].loc;
            delete yyvsp[-1].loc;
        ;
    break;}
case 100:
#line 879 "gram.y"
{
            yyval.value = new RelExpr(yyvsp[-1].relOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 102:
#line 886 "gram.y"
{
            yyval.value = new RelExpr(yyvsp[-1].relOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 104:
#line 893 "gram.y"
{
            yyval.value = new BinaryExpr(yyvsp[-1].binOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 106:
#line 900 "gram.y"
{
            yyval.value = new BinaryExpr(yyvsp[-1].binOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 108:
#line 907 "gram.y"
{
            yyval.value = new BinaryExpr(yyvsp[-1].binOp,yyvsp[-2].value,yyvsp[0].value,NoLocation);
        ;
    break;}
case 109:
#line 913 "gram.y"
{
	    Expression *exprs[] = { yyvsp[-3].value, yyvsp[-1].value };
            yyval.value = new ConstructorExpr(yyvsp[-5].base, exprs, NoLocation);
            delete yyvsp[-4].loc;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 110:
#line 922 "gram.y"
{
	    Expression *exprs[] = { yyvsp[-5].value, yyvsp[-3].value, yyvsp[-1].value };
            yyval.value = new ConstructorExpr(yyvsp[-7].base, exprs, NoLocation);
            delete yyvsp[-6].loc;
            delete yyvsp[-4].loc;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 111:
#line 932 "gram.y"
{
	    Expression *exprs[] = { yyvsp[-7].value, yyvsp[-5].value, yyvsp[-3].value, yyvsp[-1].value };
            yyval.value = new ConstructorExpr(yyvsp[-9].base, exprs, NoLocation);
            delete yyvsp[-8].loc;
            delete yyvsp[-6].loc;
            delete yyvsp[-4].loc;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 112:
#line 942 "gram.y"
{
	   yyval.value = (Expression *) NULL;
	;
    break;}
case 113:
#line 946 "gram.y"
{
	   yyval.value = (Expression *) NULL;
	;
    break;}
case 114:
#line 950 "gram.y"
{
	   yyval.value = (Expression *) NULL;
	;
    break;}
case 117:
#line 961 "gram.y"
{
	   Symbol *sym = new Symbol();
	   Variable *var;

	   sym->name = strdup("iter");
	   var = new Variable(sym, *yyvsp[-4].loc);
	   yyval.value = new FunctionCall(var, *yyvsp[-4].loc);

	   ((FunctionCall *) yyval.value)->addArg(yyvsp[-3].value);
	   ((FunctionCall *) yyval.value)->addArg(yyvsp[-1].value);

           delete yyvsp[-4].loc;
           delete yyvsp[-2].loc;
           delete yyvsp[0].loc;
	;
    break;}
case 118:
#line 977 "gram.y"
{
	   yyval.value = (Expression *) NULL;
	;
    break;}
case 129:
#line 995 "gram.y"
{
            yyval.value = new SizeofExpr(yyvsp[-1].type,*yyvsp[-3].loc);
            delete yyvsp[-3].loc;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 130:
#line 1002 "gram.y"
{
            yyval.value = new SizeofExpr(yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 131:
#line 1009 "gram.y"
{
	  yyval.value = new BrtIndexofExpr(new Variable(yyvsp[0].symbol,*yyvsp[-1].loc),*yyvsp[-1].loc);
	;
    break;}
case 132:
#line 1013 "gram.y"
{
	  yyval.value = new BrtIndexofExpr(new Variable(yyvsp[-1].symbol,*yyvsp[-3].loc),*yyvsp[-3].loc);
	;
    break;}
case 133:
#line 1033 "gram.y"
{
            yyval.value = new UnaryExpr(UO_Minus,yyvsp[0].value,NoLocation);
        ;
    break;}
case 134:
#line 1039 "gram.y"
{
            /* Unary plus is an ISO addition (for symmetry) - ignore it */
            yyval.value = yyvsp[0].value;
        ;
    break;}
case 135:
#line 1046 "gram.y"
{
            yyval.value = new UnaryExpr(UO_AddrOf,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 136:
#line 1053 "gram.y"
{
            yyval.value = new UnaryExpr(UO_Deref,yyvsp[0].value,NoLocation);
        ;
    break;}
case 137:
#line 1059 "gram.y"
{
            yyval.value = new UnaryExpr(UO_PreInc,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 138:
#line 1066 "gram.y"
{
            yyval.value = new UnaryExpr(UO_PreDec,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 140:
#line 1074 "gram.y"
{
            yyval.value = new BinaryExpr(BO_Comma,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 141:
#line 1081 "gram.y"
{
            yyval.value = new Variable(yyvsp[0].symbol,NoLocation);
        ;
    break;}
case 143:
#line 1086 "gram.y"
{
            yyval.value = yyvsp[0].consValue;
        ;
    break;}
case 144:
#line 1092 "gram.y"
{
            yyval.value = yyvsp[-1].value;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 145:
#line 1098 "gram.y"
{
            yyval.value = (Expression*) NULL;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 153:
#line 1116 "gram.y"
{
            yyval.value = new IndexExpr(yyvsp[-3].value,yyvsp[-1].value,*yyvsp[-2].loc);
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 156:
#line 1128 "gram.y"
{
            yyval.value = new UnaryExpr(UO_PostInc,yyvsp[-1].value,*yyvsp[0].loc);
            delete yyvsp[0].loc;
        ;
    break;}
case 157:
#line 1135 "gram.y"
{
            yyval.value = new UnaryExpr(UO_PostDec,yyvsp[-1].value,*yyvsp[0].loc);
            delete yyvsp[0].loc;
        ;
    break;}
case 159:
#line 1146 "gram.y"
{
            Variable *var = new Variable(yyvsp[0].symbol,*yyvsp[-1].loc);
            BinaryExpr *be = new BinaryExpr(BO_Member,yyvsp[-2].value,var,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
            yyval.value = be;

            // Lookup the component in its struct
            // if possible.
            if (yyvsp[-2].value->etype == ET_Variable)
            {
                Variable  *var = (Variable*) yyvsp[-2].value;
                Symbol    *varName = var->name;
                SymEntry  *entry = varName->entry;

                if (entry && entry->uVarDecl)
                {
                    entry->uVarDecl->lookup(yyvsp[0].symbol);
                }
            }
        ;
    break;}
case 160:
#line 1169 "gram.y"
{
            Variable *var = new Variable(yyvsp[0].symbol,*yyvsp[-1].loc);
            BinaryExpr *be = new BinaryExpr(BO_PtrMember,yyvsp[-2].value,var,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
            yyval.value = be;

            // Lookup the component in its struct
            // if possible.
            if (yyvsp[-2].value->etype == ET_Variable)
            {
                Variable  *var = (Variable*) yyvsp[-2].value;
                Symbol    *varName = var->name;
                SymEntry  *entry = varName->entry;

                if (entry && entry->uVarDecl)
                {
                    entry->uVarDecl->lookup(yyvsp[0].symbol);
                }
            }
        ;
    break;}
case 161:
#line 1192 "gram.y"
{
            FunctionCall* fc = new FunctionCall(yyvsp[-3].value,*yyvsp[-2].loc);

            /* add function args */
            fc->addArgs(ReverseList(yyvsp[-1].value));

            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
            yyval.value = fc;
        ;
    break;}
case 162:
#line 1205 "gram.y"
{
            yyval.value = (Expression*) NULL;
        ;
    break;}
case 166:
#line 1214 "gram.y"
{
            yyval.value = yyvsp[0].value;
            yyval.value->next = yyvsp[-2].value;

            delete yyvsp[-1].loc;
        ;
    break;}
case 167:
#line 1221 "gram.y"
{
            yyval.value = yyvsp[0].value;
            yyval.value->next = yyvsp[-2].value;

            delete yyvsp[-1].loc;
        ;
    break;}
case 187:
#line 1268 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ReEnterScope();
        ;
    break;}
case 188:
#line 1273 "gram.y"
{
            yyval.decl = (Decl*) NULL;
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope();
        ;
    break;}
case 189:
#line 1279 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ReEnterScope();
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
        ;
    break;}
case 190:
#line 1284 "gram.y"
{   gProject->Parse_TOS->parseCtxt->SetVarParam(1, !err_top_level, 0); 
            gProject->Parse_TOS->parseCtxt->SetIsKnR(true); 
        ;
    break;}
case 191:
#line 1288 "gram.y"
{   yyval.decl = yyvsp[0].decl;
            gProject->Parse_TOS->parseCtxt->SetIsKnR(false); 
            gProject->Parse_TOS->parseCtxt->SetVarParam(0, !err_top_level, 1); 
            
            // Exit, but will allow re-enter for a function.
            // Hack, to handle parameters being in the function's scope.
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope(true);
        ;
    break;}
case 192:
#line 1300 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.EnterScope();
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
        ;
    break;}
case 193:
#line 1306 "gram.y"
{
            yyval.decl = (Decl*) NULL;
        ;
    break;}
case 194:
#line 1310 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.EnterScope();
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
        ;
    break;}
case 195:
#line 1315 "gram.y"
{   gProject->Parse_TOS->parseCtxt->SetVarParam(0, !err_top_level, 0); 
        ;
    break;}
case 196:
#line 1318 "gram.y"
{   yyval.decl = yyvsp[0].decl;
            gProject->Parse_TOS->parseCtxt->SetVarParam(0, !err_top_level, 0);
        ;
    break;}
case 197:
#line 1324 "gram.y"
{
            yyval.decl = yyvsp[-1].decl;
            delete yyvsp[0].loc;
        ;
    break;}
case 198:
#line 1329 "gram.y"
{
            yyval.decl = yyvsp[-2].decl;

			Decl*	appendDecl = yyvsp[-2].decl;
			while (appendDecl->next != NULL)
				appendDecl = appendDecl->next;

            appendDecl->next = yyvsp[0].decl;
            delete yyvsp[-1].loc;
        ;
    break;}
case 199:
#line 1342 "gram.y"
{
            yyval.declStemnt = new DeclStemnt(*yyvsp[0].loc);
            yyval.declStemnt->addDecls(ReverseList(yyvsp[-1].decl));
            delete yyvsp[0].loc;
        ;
    break;}
case 200:
#line 1349 "gram.y"
{
            yyval.declStemnt = new DeclStemnt(*yyvsp[0].loc);
            yyval.declStemnt->addDecls(ReverseList(yyvsp[-1].decl));
            delete yyvsp[0].loc;
        ;
    break;}
case 201:
#line 1357 "gram.y"
{
            assert (err_top_level ||
                    yyvsp[-1].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();
            
            yywarn("old-style declaration or incorrect type");

            possibleType = true;
            yyval.decl = yyvsp[0].decl;

            if (yyval.decl == NULL)
            {
                yyval.decl = new Decl(yyvsp[-1].base);
            }
        ;
    break;}
case 202:
#line 1375 "gram.y"
{
            assert (1||err_top_level ||
                    yyvsp[-1].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            if (yyvsp[-1].base!=gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs) {
              if (!err_top_level) {
                baseTypeFixup(yyvsp[-1].base,yyvsp[0].decl);
              }
            }
            gProject->Parse_TOS->parseCtxt->ResetDeclCtxt();            
            
            possibleType = true;
            yyval.decl = yyvsp[0].decl;
            
            if (yyval.decl == NULL)
            {
                yyval.decl = new Decl(yyvsp[-1].base);
            }
        ;
    break;}
case 203:
#line 1400 "gram.y"
{
            yyval.base = new BaseType(BT_Int);
            gProject->Parse_TOS->parseCtxt->SetDeclCtxt(yyval.base);
        ;
    break;}
case 206:
#line 1419 "gram.y"
{   
            gProject->Parse_TOS->parseCtxt->PushCtxt();
            gProject->Parse_TOS->parseCtxt->ResetVarParam();
        ;
    break;}
case 207:
#line 1424 "gram.y"
{
            yyval.type = yyvsp[0].type;
            gProject->Parse_TOS->parseCtxt->PopCtxt(false);
        ;
    break;}
case 208:
#line 1431 "gram.y"
{
            assert (yyvsp[0].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            
            possibleType = true;
            yyval.type = yyvsp[0].base;
            if (yyval.type->isFunction())
                yyerr ("Function type not allowed as type name");
        ;
    break;}
case 209:
#line 1440 "gram.y"
{
            assert (yyvsp[-1].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            
            possibleType = true;
            yyval.type = yyvsp[0].type;
            
            Type * extended = yyval.type->extend(yyvsp[-1].base);
            if (yyval.type->isFunction())
                yyerr ("Function type not allowed as type name");
            else if (extended && 
                yyvsp[-1].base && yyvsp[-1].base->isFunction() && 
                ! extended->isPointer())
                yyerr ("Wrong type combination") ;
                
        ;
    break;}
case 210:
#line 1463 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->SetDeclCtxt(yyval.base);
        ;
    break;}
case 217:
#line 1479 "gram.y"
{
            if (! gProject->Parse_TOS->transUnit ||
                gProject->Parse_TOS->transUnit->contxt.syms->current->level >= FUNCTION_SCOPE)
                 yyval.storage = yyvsp[0].storage ;             
             else
                 yyval.storage = ST_None ;              
        ;
    break;}
case 219:
#line 1492 "gram.y"
{
            yyval.base = (BaseType*) NULL;
        ;
    break;}
case 221:
#line 1499 "gram.y"
{
            yyval.base = yyvsp[0].base;

            if (!yyval.base)
            {
                yyval.base = new BaseType();
            }

            if (yyvsp[-1].storage == ST_None)
                 yyerr("Invalid use of local storage type");
            else if (yyval.base->storage != ST_None)             
                 yywarn("Overloading previous storage type specification");
            else
                 yyval.base->storage = yyvsp[-1].storage;
        ;
    break;}
case 222:
#line 1514 "gram.y"
{ possibleType = false; ;
    break;}
case 223:
#line 1515 "gram.y"
{
            yyval.base = yyvsp[-2].base;

            if (yyvsp[0].base)
            {
                if ((yyvsp[0].base->typemask & BT_Long)
                    && (yyval.base->typemask & BT_Long))
                {
                   // long long : A likely C9X addition 
                   yyval.base->typemask &= ~BT_Long;
                   yyvsp[0].base->typemask &= ~BT_Long;
                   yyval.base->typemask |= yyvsp[0].base->typemask;
                   yyval.base->typemask |=  BT_LongLong;
                }
                else
                    yyval.base->typemask |= yyvsp[0].base->typemask;

                if (yyvsp[0].base->storage != ST_None)
                    yyval.base->storage = yyvsp[0].base->storage;

                // delete $3;
            }

            /*
            std::cout << "In decl_spec: ";
            $$->printBase(std::cout,0);
            if ($$->storage == ST_Typedef)
                std::cout << "(is a typedef)";
            std::cout << std::endl;
            */
        ;
    break;}
case 224:
#line 1547 "gram.y"
{
            yyval.base = yyvsp[0].base;

            if (!yyval.base)
            {
                yyval.base = new BaseType();
            }

            if (TQ_None != (yyval.base->qualifier & yyvsp[-1].typeQual))
                yywarn("qualifier already specified");  
                              
            yyval.base->qualifier |= yyvsp[-1].typeQual;

        ;
    break;}
case 225:
#line 1567 "gram.y"
{
           yyval.base = (BaseType*) NULL;
        ;
    break;}
case 227:
#line 1573 "gram.y"
{ possibleType = false; ;
    break;}
case 228:
#line 1574 "gram.y"
{
            yyval.base = yyvsp[-2].base;

            if (yyvsp[0].base)
            {
                yyval.base->typemask |= yyvsp[0].base->typemask;
                // delete $3;
            }
        ;
    break;}
case 229:
#line 1584 "gram.y"
{
            yyval.base = yyvsp[0].base;

            if (!yyval.base)
            {
                yyval.base = new BaseType();
            }

            if (TQ_None != (yyval.base->qualifier & yyvsp[-1].typeQual))
                yywarn("qualifier already specified");
            yyval.base->qualifier |= yyvsp[-1].typeQual;
        ;
    break;}
case 230:
#line 1599 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->SetDeclCtxt(yyval.base);
        ;
    break;}
case 231:
#line 1608 "gram.y"
{
           yyvsp[0].decl->extend(gProject->Parse_TOS->parseCtxt->UseDeclCtxt());
        ;
    break;}
case 232:
#line 1612 "gram.y"
{
           yyvsp[-2].decl->attrib = yyvsp[0].gccAttrib;
           yyval.decl = yyvsp[-2].decl;
        ;
    break;}
case 234:
#line 1620 "gram.y"
{
           yyvsp[-2].decl->initializer = yyvsp[0].value;
           yyval.decl = yyvsp[-2].decl;
        ;
    break;}
case 235:
#line 1627 "gram.y"
{
          yyval.decl = (Decl*) NULL;
        ;
    break;}
case 238:
#line 1637 "gram.y"
{
            yyval.decl = yyvsp[0].decl;
        ;
    break;}
case 239:
#line 1641 "gram.y"
{
            yyval.decl = yyvsp[-2].decl;

			Decl*	appendDecl = yyvsp[-2].decl;
			while (appendDecl->next != NULL)
				appendDecl = appendDecl->next;

            appendDecl->next = yyvsp[0].decl;
            delete yyvsp[-1].loc;
        ;
    break;}
case 241:
#line 1659 "gram.y"
{
            yyval.arrayConst = new ArrayConstant(NoLocation);
            yyval.arrayConst->addElement(yyvsp[0].value);
        ;
    break;}
case 242:
#line 1664 "gram.y"
{
            yyval.arrayConst = yyvsp[-2].arrayConst;
            yyval.arrayConst->addElement(yyvsp[0].value);
            delete yyvsp[-1].loc;
        ;
    break;}
case 246:
#line 1675 "gram.y"
{
            yyval.value = yyvsp[-2].arrayConst;
            delete yyvsp[-3].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 247:
#line 1683 "gram.y"
{
            yyval.loc = (Location*) NULL;
        ;
    break;}
case 248:
#line 1687 "gram.y"
{
            delete yyvsp[0].loc;
            yyval.loc = (Location*) NULL;
        ;
    break;}
case 256:
#line 1708 "gram.y"
{
           TypeQual r(yyvsp[-3].typeQual);
           r.vout=yyvsp[-1].value;
           yyval.typeQual = r;
        ;
    break;}
case 258:
#line 1717 "gram.y"
{
            yyval.typeQual = yyvsp[-1].typeQual | yyvsp[0].typeQual;
            if (TQ_None != (yyvsp[0].typeQual & yyvsp[-1].typeQual))
                yywarn("qualifier already specified");                               
        ;
    break;}
case 259:
#line 1725 "gram.y"
{
            yyval.typeQual = TQ_None;
        ;
    break;}
case 280:
#line 1757 "gram.y"
{
            yyval.base = new BaseType(BT_UserType);
            yyval.base->typeName = yyvsp[0].symbol;
        ;
    break;}
case 281:
#line 1764 "gram.y"
{
            assert ((! yyval.symbol->entry) || 
                    yyval.symbol->entry->IsTagDecl()) ;
        ;
    break;}
case 282:
#line 1772 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_ref(yyvsp[-1].typeSpec, yyvsp[0].symbol,
                                                                gProject->Parse_TOS->transUnit->contxt.tags);
            else
                yyval.base = NULL;                                         
        ;
    break;}
case 283:
#line 1782 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_ref(yyvsp[-1].typeSpec, yyvsp[0].symbol,
                                                                gProject->Parse_TOS->transUnit->contxt.tags);
            else
                yyval.base = NULL;                                         
        ;
    break;}
case 284:
#line 1792 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_ref(yyvsp[-1].typeSpec, yyvsp[0].symbol,
                                                                gProject->Parse_TOS->transUnit->contxt.tags);
            else
                yyval.base = NULL;                                         
        ;
    break;}
case 285:
#line 1802 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_def(yyvsp[-1].typeSpec, yyvsp[0].symbol,
                                                            gProject->Parse_TOS->transUnit->contxt.tags);
            else
                yyval.base = NULL;                                         
        ;
    break;}
case 286:
#line 1812 "gram.y"
{
            yyval.base = new BaseType(yyvsp[-1].strDef);
            yyvsp[-1].strDef->_isUnion = false;
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 287:
#line 1819 "gram.y"
{
            yyval.base = yyvsp[-3].base;
            assert (! yyval.base->stDefn);
            yyval.base->stDefn = yyvsp[-1].strDef;
            yyvsp[-1].strDef->tag = yyvsp[-3].base->tag->dup();
            yyvsp[-1].strDef->_isUnion = false;

            // Overload the incomplete definition
            yyval.base->tag->entry->uStructDef = yyval.base ;
            
//             std::cout << "struct/union/enum_type_define:"
//                          "The definition of:"
//                       << "(uStructDef:" << $1->tag->entry->uStructDef << ")"
//                       << "(uStructDef->stDefn:" << $1->tag->entry->uStructDef->stDefn << ")"
//                       << "(" << $1->tag->entry << ")" << $1->tag->name  << "$" ;
//             $1->tag->entry->scope->ShowScopeId(std::cout);
//             std::cout << " has been completed" << endl; 
            
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 288:
#line 1843 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_def(yyvsp[-1].typeSpec, yyvsp[0].symbol,
                                                            gProject->Parse_TOS->transUnit->contxt.tags);
            else
              yyval.base = NULL ;
        ;
    break;}
case 289:
#line 1853 "gram.y"
{
            yyval.base = new BaseType(yyvsp[-1].strDef);
            yyvsp[-1].strDef->_isUnion = true;

            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 290:
#line 1861 "gram.y"
{
            yyval.base = yyvsp[-3].base;
            assert (! yyval.base->stDefn);
            yyval.base->stDefn = yyvsp[-1].strDef;
            yyvsp[-1].strDef->tag = yyvsp[-3].base->tag->dup();
            yyvsp[-1].strDef->_isUnion = true;

            // Overload the incomplete definition
            yyval.base->tag->entry->uStructDef = yyval.base ;
            
//             std::cout << "struct/union/enum_type_define:"
//                          "The definition of:"
//                       << "(uStructDef:" << $1->tag->entry->uStructDef << ")"
//                       << "(uStructDef->stDefn:" << $1->tag->entry->uStructDef->stDefn << ")"
//                       << "(" << $1->tag->entry << ")" << $1->tag->name  << "$" ;
//             $1->tag->entry->scope->ShowScopeId(std::cout);
//             std::cout << " has been completed" << endl; 
            
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
 
        ;
    break;}
case 291:
#line 1886 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                yyval.base = gProject->Parse_TOS->parseCtxt->Mk_tag_def(yyvsp[-1].typeSpec,yyvsp[0].symbol,
                                                            gProject->Parse_TOS->transUnit->contxt.tags);
            else
              yyval.base = NULL;
        ;
    break;}
case 292:
#line 1896 "gram.y"
{
            yyval.base = new BaseType(yyvsp[-1].enDef);

            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 293:
#line 1903 "gram.y"
{
            yyval.base = yyvsp[-3].base;
            assert (! yyval.base->enDefn);
            yyval.base->enDefn = yyvsp[-1].enDef;
            yyvsp[-1].enDef->tag = yyvsp[-3].base->tag->dup();

            // Overload the incomplete definition
            yyval.base->tag->entry->uStructDef = yyval.base ;
            
//             std::cout << "struct/union/enum_type_define:"
//                          "The definition of:"
//                       << "(uStructDef:" << $1->tag->entry->uStructDef << ")"
//                       << "(uStructDef->stDefn:" << $1->tag->entry->uStructDef->stDefn << ")"
//                       << "(" << $1->tag->entry << ")" << $1->tag->name  << "$" ;
//             $1->tag->entry->scope->ShowScopeId(std::cout);
//             std::cout << " has been completed" << endl; 
            
            delete yyvsp[-2].loc;
            delete yyvsp[0].loc;
        ;
    break;}
case 294:
#line 1926 "gram.y"
{  yyval.strDef = new StructDef();
           yywarn("ANSI/ISO C prohibits empty struct/union");
        ;
    break;}
case 296:
#line 1933 "gram.y"
{  yyval.enDef = new EnumDef();
           yywarn("ANSI/ISO C prohibits empty enum");
        ;
    break;}
case 297:
#line 1937 "gram.y"
{  yyval.enDef = yyvsp[-1].enDef;
        ;
    break;}
case 298:
#line 1942 "gram.y"
{
            yyval.loc = NULL;
        ;
    break;}
case 299:
#line 1946 "gram.y"
{
          yywarn("Trailing comma in enum type definition");
        ;
    break;}
case 301:
#line 1959 "gram.y"
{
            yyval.enDef = new EnumDef();
            yyval.enDef->addElement(yyvsp[0].enConst);
        ;
    break;}
case 302:
#line 1964 "gram.y"
{
            yyval.enDef = yyvsp[-2].enDef;
            yyval.enDef->addElement(yyvsp[0].enConst);
            delete yyvsp[-1].loc;
        ;
    break;}
case 303:
#line 1972 "gram.y"
{
            yyval.enConst = new EnumConstant(yyvsp[0].symbol,NULL,NoLocation);
            if (gProject->Parse_TOS->transUnit)
            {
              if (gProject->Parse_TOS->transUnit->contxt.syms->IsDefined(yyvsp[0].symbol->name))
                 yyerr("Duplicate enumeration constant");
                 
              yyvsp[0].symbol->entry = gProject->Parse_TOS->transUnit->contxt.syms->Insert(
                                  mk_enum_const(yyvsp[0].symbol->name, yyval.enConst));
            }
        ;
    break;}
case 304:
#line 1984 "gram.y"
{
            yyval.enConst = new EnumConstant(yyvsp[-2].symbol,yyvsp[0].value,NoLocation);
            if (gProject->Parse_TOS->transUnit)
            {
              if (gProject->Parse_TOS->transUnit->contxt.syms->IsDefined(yyvsp[-2].symbol->name))
                 yyerr("Duplicate enumeration constant");
                 
              yyvsp[-2].symbol->entry = gProject->Parse_TOS->transUnit->contxt.syms->Insert(
                                  mk_enum_const(yyvsp[-2].symbol->name, yyval.enConst));
            }
        ;
    break;}
case 306:
#line 2004 "gram.y"
{
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.EnterScope();
            gProject->Parse_TOS->parseCtxt->PushCtxt();
        ;
    break;}
case 307:
#line 2009 "gram.y"
{
            assert (!err_top_level || possibleType);
             /* Safety precaution! */
             possibleType=true;
        ;
    break;}
case 308:
#line 2015 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->PopCtxt(false);
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope();
            yyval.strDef = yyvsp[0].strDef ;
        ;
    break;}
case 309:
#line 2024 "gram.y"
{
            yyval.strDef = new StructDef();
            yyval.strDef->addComponent(ReverseList(yyvsp[-1].decl));
            delete yyvsp[0].loc;
        ;
    break;}
case 310:
#line 2030 "gram.y"
{
            // A useful gcc extension:
            //   naked semicolons in struct/union definitions. 
            yyval.strDef = yyvsp[-1].strDef;
            yywarn ("Empty declaration");
            delete yyvsp[0].loc;
        ;
    break;}
case 311:
#line 2038 "gram.y"
{
            yyval.strDef = yyvsp[-2].strDef;
            yyval.strDef->addComponent(ReverseList(yyvsp[-1].decl));
            delete yyvsp[0].loc;
        ;
    break;}
case 312:
#line 2046 "gram.y"
{
            possibleType = true;
            yyval.decl = yyvsp[0].decl;
        ;
    break;}
case 313:
#line 2051 "gram.y"
{
            possibleType = true;
            yyval.decl = new Decl (yyvsp[0].base);
            yywarn ("No field declarator");
        ;
    break;}
case 315:
#line 2065 "gram.y"
{   gProject->Parse_TOS->parseCtxt->SetIsFieldId(true); 
        ;
    break;}
case 316:
#line 2068 "gram.y"
{
            yyval.decl = yyvsp[-1].decl;
            yyval.decl->attrib = yyvsp[0].gccAttrib;
        ;
    break;}
case 317:
#line 2073 "gram.y"
{   gProject->Parse_TOS->parseCtxt->SetIsFieldId(true); 
        ;
    break;}
case 318:
#line 2076 "gram.y"
{
            yyval.decl = yyvsp[-1].decl;
            yyval.decl->attrib = yyvsp[0].gccAttrib;
            yyval.decl->next = yyvsp[-4].decl;
            delete yyvsp[-3].loc;
        ;
    break;}
case 319:
#line 2085 "gram.y"
{
           gProject->Parse_TOS->parseCtxt->SetIsFieldId(false); 
           Type * decl = gProject->Parse_TOS->parseCtxt->UseDeclCtxt();
           Type * extended = yyval.decl->extend(decl);
           if (yyval.decl->form &&
               yyval.decl->form->isFunction())
               yyerr ("Function type not allowed as field");
           else if (yyval.decl->form &&
                    yyval.decl->form->isArray() &&
                    ! ((ArrayType *) yyval.decl->form)->size)
               yyerr ("Unsized array not allowed as field");
           else if (extended && 
               decl && decl->isFunction() && 
               ! extended->isPointer())
               yyerr ("Wrong type combination") ;
                
        ;
    break;}
case 320:
#line 2103 "gram.y"
{
           Type * decl = gProject->Parse_TOS->parseCtxt->UseDeclCtxt();
           yyval.decl->extend(decl);
           if (! decl)
               yyerr ("No type specifier for bit field") ;
           else if (!yyval.decl->form)
               yyerr ("Wrong type combination") ;
        ;
    break;}
case 322:
#line 2117 "gram.y"
{   gProject->Parse_TOS->parseCtxt->SetIsFieldId(false); 
        ;
    break;}
case 323:
#line 2120 "gram.y"
{
            BitFieldType  *bf = new BitFieldType(yyvsp[0].value);
            yyval.decl = yyvsp[-3].decl;

            if (yyval.decl == NULL)
            {
                yyval.decl = new Decl(bf);
            }
            else
            {
                bf->subType = yyval.decl->form;
                yyval.decl->form = bf;
            }
        ;
    break;}
case 325:
#line 2140 "gram.y"
{
           yyval.decl = (Decl*) NULL;
        ;
    break;}
case 327:
#line 2151 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->Mk_declarator (yyval.decl);
        ;
    break;}
case 328:
#line 2157 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->Mk_func_declarator (yyval.decl);
        ;
    break;}
case 329:
#line 2163 "gram.y"
{
            yyval.decl = yyvsp[0].decl;
            yyval.decl->extend(yyvsp[-1].ptr);
        ;
    break;}
case 332:
#line 2174 "gram.y"
{  if (gProject->Parse_TOS->transUnit)
                yyval.decl = gProject->Parse_TOS->parseCtxt->Mk_direct_declarator_reentrance (yyvsp[0].symbol,
                gProject->Parse_TOS->transUnit->contxt.syms);
        ;
    break;}
case 333:
#line 2179 "gram.y"
{
            yyval.decl = yyvsp[-1].decl;
            delete yyvsp[-2].loc ;
            delete yyvsp[0].loc ;
        ;
    break;}
case 336:
#line 2187 "gram.y"
{
            yyval.decl = yyvsp[-3].decl;
            FunctionType * ft = new FunctionType(ReverseList(yyvsp[-1].decl));
            Type * extended = yyval.decl->extend(ft);
            if (extended && ! extended->isPointer())
                yyerr ("Wrong type combination") ;
                
            delete yyvsp[-2].loc ;
            delete yyvsp[0].loc ;
            // Exit, but will allow re-enter for a function.
            // Hack, to handle parameters being in the function's scope.
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope(true);

        ;
    break;}
case 337:
#line 2203 "gram.y"
{
            yyval.decl = yyvsp[-3].decl;
            FunctionType * ft = new FunctionType(ReverseList(yyvsp[-1].decl));
            Type * extended = yyval.decl->extend(ft);
            if (extended && ! extended->isPointer())
                yyerr ("Wrong type combination") ;

            delete yyvsp[-2].loc ;
            delete yyvsp[0].loc ;
            // Exit, but will allow re-enter for a function.
            // Hack, to handle parameters being in the function's scope.
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.ExitScope(true);

        ;
    break;}
case 338:
#line 2219 "gram.y"
{
            yyval.decl = yyvsp[-2].decl;

			if (yyval.decl != NULL)
			{
				FunctionType* ft = new FunctionType();
				Type* extended = yyval.decl->extend(ft);
				if (extended && ! extended->isPointer())
           	 	    yyerr ("Wrong type combination") ;
			}
            
            delete yyvsp[-1].loc ;
            delete yyvsp[0].loc ;
            if (gProject->Parse_TOS->transUnit)
            {
                gProject->Parse_TOS->transUnit->contxt.EnterScope();
                // Exit, but will allow re-enter for a function.
                // Hack, to handle parameters being in the function's scope.
                gProject->Parse_TOS->transUnit->contxt.ExitScope(true);
            }
        ;
    break;}
case 339:
#line 2243 "gram.y"
{
            yyval.decl = yyvsp[-3].decl;
            ArrayType * at = new ArrayType(TT_Array, yyvsp[-1].value);
            Type * extended = yyval.decl->extend(at);
            if (extended && 
                extended->isFunction())
                yyerr ("Wrong type combination") ;
              
            delete yyvsp[-2].loc ;
            delete yyvsp[0].loc ;
        ;
    break;}
case 340:
#line 2257 "gram.y"
{
            yyval.decl = yyvsp[-3].decl;
            ArrayType * at = new ArrayType(TT_Stream, yyvsp[-1].value);
            Type * extended = yyval.decl->extend(at);

            if (extended &&
                extended->isFunction())
                yyerr ("Wrong type combination") ;
        ;
    break;}
case 341:
#line 2268 "gram.y"
{
            yyval.value = yyvsp[0].consValue;
        ;
    break;}
case 342:
#line 2272 "gram.y"
{
            yyval.value = yyvsp[0].value;
        ;
    break;}
case 343:
#line 2276 "gram.y"
{
           yyval.value = yyvsp[-1].value;
        ;
    break;}
case 344:
#line 2280 "gram.y"
{ 
            yyval.value = new Variable (yyvsp[0].symbol,NoLocation);
        ;
    break;}
case 345:
#line 2286 "gram.y"
{
	   yyval.value = NULL;
	;
    break;}
case 346:
#line 2290 "gram.y"
{
            yyval.value = yyvsp[0].value;
        ;
    break;}
case 347:
#line 2294 "gram.y"
{
            yyval.value = new BinaryExpr(BO_Comma,yyvsp[-2].value,yyvsp[0].value,*yyvsp[-1].loc);
            delete yyvsp[-1].loc;
        ;
    break;}
case 348:
#line 2304 "gram.y"
{
            yyval.ptr = new PtrType(yyvsp[0].typeQual);    
        ;
    break;}
case 350:
#line 2311 "gram.y"
{
            yyval.ptr = yyvsp[0].ptr;
            yyval.ptr->subType = yyvsp[-1].ptr;
        ;
    break;}
case 352:
#line 2324 "gram.y"
{  gProject->Parse_TOS->parseCtxt->IncrVarParam(1);
          if (gProject->Parse_TOS->transUnit)
              gProject->Parse_TOS->transUnit->contxt.EnterScope();
          gProject->Parse_TOS->parseCtxt->PushCtxt();
        ;
    break;}
case 353:
#line 2330 "gram.y"
{
          // Exit, but will allow re-enter for a function.
          // Hack, to handle parameters being in the function's scope.
          gProject->Parse_TOS->parseCtxt->PopCtxt(true);
          gProject->Parse_TOS->parseCtxt->IncrVarParam(-1);
          yyval.decl = yyvsp[0].decl;
       ;
    break;}
case 354:
#line 2340 "gram.y"
{  if (gProject->Parse_TOS->transUnit)
               yyval.decl = gProject->Parse_TOS->parseCtxt->Mk_direct_declarator_reentrance (yyvsp[0].symbol,
                gProject->Parse_TOS->transUnit->contxt.syms);
        ;
    break;}
case 355:
#line 2345 "gram.y"
{  yyval.decl = yyvsp[-2].decl;
           if (gProject->Parse_TOS->transUnit)
           {
              yyval.decl = gProject->Parse_TOS->parseCtxt->Mk_direct_declarator_reentrance (yyvsp[0].symbol,
                gProject->Parse_TOS->transUnit->contxt.syms);
              yyval.decl->next = yyvsp[-2].decl;
           }
        ;
    break;}
case 357:
#line 2361 "gram.y"
{
            /* Convert a TYPEDEF_NAME back into a normal IDENT */
            yyval.symbol = yyvsp[0].symbol;
            yyval.symbol->entry = (SymEntry*) NULL;
        ;
    break;}
case 360:
#line 2382 "gram.y"
{
           yyval.decl = (Decl*) NULL;
        ;
    break;}
case 361:
#line 2386 "gram.y"
{ gProject->Parse_TOS->parseCtxt->IncrVarParam(1); 
        ;
    break;}
case 362:
#line 2389 "gram.y"
{ gProject->Parse_TOS->parseCtxt->IncrVarParam(-1); 
           yyval.decl = yyvsp[0].decl;
        ;
    break;}
case 363:
#line 2395 "gram.y"
{   gProject->Parse_TOS->parseCtxt->IncrVarParam(1);
            if (gProject->Parse_TOS->transUnit)
                gProject->Parse_TOS->transUnit->contxt.EnterScope();
            gProject->Parse_TOS->parseCtxt->PushCtxt();
        ;
    break;}
case 364:
#line 2401 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->PopCtxt(true);
            gProject->Parse_TOS->parseCtxt->IncrVarParam(-1);
            yyval.decl = yyvsp[0].decl ;
        ;
    break;}
case 366:
#line 2410 "gram.y"
{
            BaseType *bt = new BaseType(BT_Ellipsis);

            yyval.decl = new Decl(bt);
            yyval.decl->next = yyvsp[-2].decl;
        ;
    break;}
case 368:
#line 2420 "gram.y"
{
            yyval.decl = yyvsp[0].decl;
            yyval.decl->next = yyvsp[-2].decl;
        ;
    break;}
case 369:
#line 2427 "gram.y"
{   
            gProject->Parse_TOS->parseCtxt->PushCtxt();
        ;
    break;}
case 370:
#line 2431 "gram.y"
{
            gProject->Parse_TOS->parseCtxt->PopCtxt(true);
            yyval.decl = yyvsp[0].decl;
        ;
    break;}
case 371:
#line 2438 "gram.y"
{
            assert (err_top_level ||
                    yyvsp[-1].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            possibleType = true;
            yyval.decl = yyvsp[0].decl;
            Type * decl = gProject->Parse_TOS->parseCtxt->UseDeclCtxt();
            Type * extended = yyval.decl->extend(decl);             
            if (yyval.decl->form &&
                yyval.decl->form->isFunction())
                yyerr ("Function type not allowed");
            else if (extended && 
                decl && decl->isFunction() && 
                ! extended->isPointer())
                yyerr ("Wrong type combination") ;
        ;
    break;}
case 372:
#line 2454 "gram.y"
{
            assert (err_top_level ||
                    yyvsp[-1].base == gProject->Parse_TOS->parseCtxt->curCtxt->decl_specs);
            possibleType = true;
            yyval.decl = new Decl(yyvsp[0].type);
            
            Type * decl = gProject->Parse_TOS->parseCtxt->UseDeclCtxt();
            Type * extended = yyval.decl->extend(decl);
            if (yyval.decl->form &&
                yyval.decl->form->isFunction())
                yyerr ("Function type not allowed for parameter");
            else if (extended && 
                decl && decl->isFunction() && 
                ! extended->isPointer())
                yyerr ("Wrong type combination") ;
        ;
    break;}
case 373:
#line 2471 "gram.y"
{
            possibleType = true;
            yyval.decl = new Decl(yyvsp[0].base);
            if (yyval.decl->form &&
                yyval.decl->form->isFunction())
                yyerr ("Function type not allowed for parameter");
        ;
    break;}
case 374:
#line 2484 "gram.y"
{
            yyval.type = yyvsp[0].ptr;
        ;
    break;}
case 375:
#line 2488 "gram.y"
{
            yyval.type = yyvsp[0].type;
        ;
    break;}
case 376:
#line 2492 "gram.y"
{
            yyval.type = yyvsp[0].type;
            yyval.type->extend(yyvsp[-1].ptr);
        ;
    break;}
case 378:
#line 2502 "gram.y"
{
            yyval.type = yyvsp[-1].type;
        ;
    break;}
case 379:
#line 2506 "gram.y"
{
            yyval.type = new ArrayType(TT_Array, yyvsp[-1].value);
        ;
    break;}
case 380:
#line 2510 "gram.y"
{
            ArrayType *at = new ArrayType(TT_Array, yyvsp[-1].value);
            yyval.type = yyvsp[-3].type;
            yyval.type->extend(at);
            Type * extended = yyval.type->extend(at) ;
            if (extended && 
                extended->isFunction())
                yyerr ("Wrong type combination") ;
        ;
    break;}
case 381:
#line 2520 "gram.y"
{
            yyval.type = new FunctionType(ReverseList(yyvsp[-1].decl));
        ;
    break;}
case 382:
#line 2524 "gram.y"
{
            FunctionType * ft = new FunctionType(ReverseList(yyvsp[-1].decl));
            yyval.type = yyvsp[-3].type;
            Type * extended = yyval.type->extend(ft) ;
            if (extended && 
                ! extended->isPointer())
                yyerr ("Wrong type combination") ;
                
        ;
    break;}
case 383:
#line 2540 "gram.y"
{
            yyval.gccAttrib = (GccAttrib*) NULL;
        ;
    break;}
case 385:
#line 2547 "gram.y"
{
                yyval.gccAttrib = yyvsp[-2].gccAttrib;
                delete yyvsp[-4].loc;
                delete yyvsp[-3].loc;
                delete yyvsp[-1].loc;
                delete yyvsp[0].loc;
            ;
    break;}
case 386:
#line 2557 "gram.y"
{
                /* The lexer ate some unsupported option. */
                yyval.gccAttrib = new GccAttrib( GCC_Unsupported);
            ;
    break;}
case 387:
#line 2562 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_Packed );
            ;
    break;}
case 388:
#line 2566 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_CDecl );
            ;
    break;}
case 389:
#line 2570 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_Const );
            ;
    break;}
case 390:
#line 2574 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_NoReturn );
            ;
    break;}
case 391:
#line 2578 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_Aligned );

                if (yyvsp[-1].consValue->ctype == CT_Int)
                {
                    IntConstant    *iCons = (IntConstant*) yyvsp[-1].consValue;

                    yyval.gccAttrib->value = iCons->lng;
                }

                delete yyvsp[-2].loc;
                delete yyvsp[0].loc;
            ;
    break;}
case 392:
#line 2592 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_Mode );

                yyval.gccAttrib->mode = yyvsp[-1].symbol;

                delete yyvsp[-2].loc;
                delete yyvsp[0].loc;
            ;
    break;}
case 393:
#line 2601 "gram.y"
{
                yyval.gccAttrib = new GccAttrib( GCC_Format );
    
                yyval.gccAttrib->mode = yyvsp[-5].symbol;

                if (yyvsp[-3].consValue->ctype == CT_Int)
                {
                    IntConstant    *iCons = (IntConstant*) yyvsp[-3].consValue;

                    yyval.gccAttrib->strIdx = iCons->lng;
                }

                if (yyvsp[-1].consValue->ctype == CT_Int)
                {
                    IntConstant    *iCons = (IntConstant*) yyvsp[-1].consValue;

                    yyval.gccAttrib->first = iCons->lng;
                }

                delete yyvsp[-6].loc;
                delete yyvsp[0].loc;
            ;
    break;}
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2625 "gram.y"


/*******************************************************/
