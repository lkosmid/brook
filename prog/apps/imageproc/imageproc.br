// imageproc.br
// Let's try to do some image processing
// We are going to apply a 3x3 mask across the image.
// We use gather, iterators, outstreams

#include <stdio.h>
#include <stdlib.h>

kernel void process_img( float img[][],  float mask[3][3],
                 iter float2 it<>, out float2 o_img<> ) {
    float2 t0 = float2(-1.0f, -1.0f);
    float2 t1 = float2(-1.0f, 0.0f);
    float2 t2 = float2(-1.0f, 1.0f);
    float2 t3 = float2(0.0f, -1.0f);
    float2 t4 = float2(0.0f, 0.0f);
    float2 t5 = float2(0.0f, 1.0f);
    float2 t6 = float2(1.0f, -1.0f);
    float2 t7 = float2(1.0f, 0.0f);
    float2 t8 = float2(1.0f, 1.0f);

    o_img  = img[it+t0] * mask[0][0];
    o_img += img[it+t1] * mask[0][1];
    o_img += img[it+t2] * mask[0][2];
    o_img += img[it+t3] * mask[1][0];
    o_img += img[it+t4] * mask[1][1];
    o_img += img[it+t5] * mask[1][2];
    o_img += img[it+t6] * mask[2][0];
    o_img += img[it+t7] * mask[2][1];
    o_img += img[it+t8] * mask[2][2];
}

#define INSIZE 2048
#define OUTSIZE 2046

int main() {
    unsigned char* input = NULL;
    unsigned char* output = NULL;
    float* outputf = NULL;
    float* inputf = NULL;
    float mask[3][3];
    float mask_stream<3,3>;
    int i, j;

    iter float2 it<OUTSIZE,OUTSIZE> = iter( float2(1.0f, 1.0f), float2(INSIZE-1, INSIZE-1) );
    float img<INSIZE,INSIZE>;
    float o_img<OUTSIZE,OUTSIZE>;
    
    input   = (unsigned char*)malloc(INSIZE*INSIZE*sizeof(unsigned char));
    output  = (unsigned char*)malloc(OUTSIZE*OUTSIZE*sizeof(unsigned char));
    inputf  = (float*)malloc(INSIZE*INSIZE*sizeof(float));
    outputf = (float*)malloc(OUTSIZE*OUTSIZE*sizeof(float));

    // Lets try a simple shift to the left
    for(i=0; i<3; i++){
        for(j=0; j<3; j++){
            mask[i][j] = 0.;
        }
    }
    mask[1][0] = 1.;

    // Fill the input with random numbers
    for(i=0; i<INSIZE; i++){
        for(j=0; j<INSIZE; j++){
            input[i*INSIZE+j] = (unsigned char)rand();
        }
    }

    // convert (pgm) input to float
    for(i=0; i<INSIZE; i++){
        for(j=0; j<INSIZE; j++){
            inputf[i*INSIZE+j] = (float)input[i*INSIZE+j];
        }
    }   

    streamRead(img, inputf);
    streamRead(mask_stream, mask);
    process_img(img, mask_stream, it, o_img );
    streamWrite(o_img, outputf);

    // convert output back to bytes for (pgm) output
    for(i=0; i<OUTSIZE; i++){
        for(j=0; j<OUTSIZE; j++){
            output[i*OUTSIZE+j] = (unsigned char)outputf[i*OUTSIZE+j];
        }
    }


    // Let's make sure the values are what we expect
    for(i=0; i<OUTSIZE; i++){
        for(j=0; j<OUTSIZE; j++){
            if(output[i*OUTSIZE+j] != input[(i+1)*INSIZE+(j)]){
                fprintf(stderr, "Mismatch - output[%d][%d]: %u, input[%d][%d]: %u\n",
                      i, j, output[i*OUTSIZE+j], i+1, j+1, input[(i+1)*INSIZE+(j)]);
            }
        }
    }   

    // TIM: in case it fails silently along the way... :)
    printf("test complete\n");
    return 0;
}
