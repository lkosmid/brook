
////////////////////////////////////////////
// Generated by BRCC v0.1
// BRCC Compiled on: Mar 29 2004 17:20:37
////////////////////////////////////////////

#include <brook/brook.hpp>
#include <stdio.h>

#include <stdlib.h>
extern ::brook::stream &quickAllocStream(const __BRTStreamType *t, int wid, int len, int garbage);

typedef struct STri_t {
  float4  A;
  float4  B;
  float4  C;
} STri;typedef struct __cpustruct_STri_t {
__BrtFloat4 A;
__BrtFloat4 B;
__BrtFloat4 C;
}
__cpustruct_STri;
#if 0
namespace brook {
	template<> const __BRTStreamType* getStreamType(STri*) {
		static const __BRTStreamType result[] = {__BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTNONE};
		return result;
	}
}
#endif
typedef struct SplitTri_t {
  float4  A;
  float4  AB;
  float4  B;
  float4  BC;
  float4  C;
  float4  AC;
} SplitTri;typedef struct __cpustruct_SplitTri_t {
__BrtFloat4 A;
__BrtFloat4 AB;
__BrtFloat4 B;
__BrtFloat4 BC;
__BrtFloat4 C;
__BrtFloat4 AC;
}
__cpustruct_SplitTri;
#if 0
namespace brook {
	template<> const __BRTStreamType* getStreamType(SplitTri*) {
		static const __BRTStreamType result[] = {__BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTNONE};
		return result;
	}
}
#endif
typedef struct Neighbor_t {
  float4  AB;
  float4  BBC;
  float4  ABB;
  float4  BC;
  float4  ACC;
  float4  BCC;
  float4  AC;
  float4  AAB;
  float4  AAC;
} Neighbor;typedef struct __cpustruct_Neighbor_t {
__BrtFloat4 AB;
__BrtFloat4 BBC;
__BrtFloat4 ABB;
__BrtFloat4 BC;
__BrtFloat4 ACC;
__BrtFloat4 BCC;
__BrtFloat4 AC;
__BrtFloat4 AAB;
__BrtFloat4 AAC;
}
__cpustruct_Neighbor;
#if 0 
namespace brook {
	template<> const __BRTStreamType* getStreamType(Neighbor*) {
		static const __BRTStreamType result[] = {__BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTFLOAT4, __BRTNONE};
		return result;
	}
}
#endif
unsigned char  debugLoop = 0;
int  counterMax = 10000;
extern float  neighboreps;
int  low_texture_ram = 0;
int  subdivisiondepth = 0;
void  recomputeNeighbors(STri *, Neighbor *, unsigned int );
void  checkNeighbors(STri  *tri, Neighbor  *in, Neighbor *out , unsigned int );



__BrtFloat1 __triCombine_cpu_inner (const __BrtFloat1  &b1,
                              const __BrtFloat1  &b2){
  return (b1 && b2).questioncolon(__BrtFloat1((float)8),b1.questioncolon(__BrtFloat1((float)2),b2.questioncolon(__BrtFloat1((float)4),__BrtFloat1((float)0))));
}





__BrtFloat1 __isNeighbor_cpu_inner (const __BrtFloat4  &neigh){
  return __dot_cpu_inner(neigh.swizzle3(maskX, maskY, maskZ),neigh.swizzle3(maskX, maskY, maskZ)) > __BrtFloat1((float)0);
}





__BrtFloat1 __isNotNeighbor_cpu_inner (const __BrtFloat4  &neigh){
  return !(__dot_cpu_inner(neigh.swizzle3(maskX, maskY, maskZ),neigh.swizzle3(maskX, maskY, maskZ)) > __BrtFloat1((float)0));
}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __smallEnough_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 0, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t0, s0\n"
				"    add r9.xyz, r7, -r0\n"
				"    dp3 r4.w, r9, r9\n"
				"    add r6.w, -r4.w, c0.x\n"
				"    cmp_pp r7.w, r6.w, c1.x, c1.w\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 0, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    texld r0, t0, s2\n"
				"    texld r7, t0, s1\n"
				"    add r9.xyz, r7, -r0\n"
				"    dp3 r4.w, r9, r9\n"
				"    add r6.w, -r4.w, c0.x\n"
				"    cmp_pp r7.w, r6.w, c1.x, c1.w\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 0, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s2\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t0, s2\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r4.w, r9, r9\n"
				"    add r6.w, -r4.w, c0.x\n"
				"    cmp_pp r7.w, r6.w, c1.x, c1.w\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:2:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 4, 2, 1\n"
				"    def c2, 8, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t1, s3\n"
				"    texld r2, t0, s1\n"
				"    add r4.xyz, r0, -r7\n"
				"    dp3 r2.w, r4, r4\n"
				"    add r2.w, -r2.w, c0.x\n"
				"    cmp_pp r9.w, r2.w, c1.x, c1.w\n"
				"    add r9.xyz, r2, -r7\n"
				"    dp3 r11.w, r9, r9\n"
				"    add r1.w, -r11.w, c0.x\n"
				"    cmp_pp r8.w, r1.w, c1.x, c1.w\n"
				"    cmp r3.w, r1.w, c1.x, c1.y\n"
				"    mul_pp r10.w, r9.w, r8.w\n"
				"    cmp r0.w, r2.w, r3.w, c1.z\n"
				"    cmp r7.w, -r10.w, r0.w, c2.x\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:3:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s4\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t1, s4\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:4:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s5\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t1, s5\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:5:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 4, 2, 1\n"
				"    def c2, 8, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s6\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t1, s6\n"
				"    texld r2, t0, s2\n"
				"    add r4.xyz, r0, -r7\n"
				"    dp3 r2.w, r4, r4\n"
				"    add r2.w, -r2.w, c0.x\n"
				"    cmp_pp r9.w, r2.w, c1.x, c1.w\n"
				"    add r9.xyz, r2, -r7\n"
				"    dp3 r11.w, r9, r9\n"
				"    add r1.w, -r11.w, c0.x\n"
				"    cmp_pp r8.w, r1.w, c1.x, c1.w\n"
				"    cmp r3.w, r1.w, c1.x, c1.y\n"
				"    mul_pp r10.w, r9.w, r8.w\n"
				"    cmp r0.w, r2.w, r3.w, c1.z\n"
				"    cmp r7.w, -r10.w, r0.w, c2.x\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:6:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s2\n"
				"    dcl_2d s7\n"
				"    texld r0, t0, s2\n"
				"    texld r7, t1, s7\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:7:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s2\n"
				"    dcl_2d s8\n"
				"    texld r0, t0, s2\n"
				"    texld r7, t1, s8\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:8:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, 4, 2, 1\n"
				"    def c2, 8, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s2\n"
				"    dcl_2d s9\n"
				"    texld r0, t0, s2\n"
				"    texld r7, t1, s9\n"
				"    texld r2, t0, s0\n"
				"    add r4.xyz, r0, -r7\n"
				"    dp3 r2.w, r4, r4\n"
				"    add r2.w, -r2.w, c0.x\n"
				"    cmp_pp r9.w, r2.w, c1.x, c1.w\n"
				"    add r9.xyz, r2, -r7\n"
				"    dp3 r11.w, r9, r9\n"
				"    add r1.w, -r11.w, c0.x\n"
				"    cmp_pp r8.w, r1.w, c1.x, c1.w\n"
				"    cmp r3.w, r1.w, c1.x, c1.y\n"
				"    mul_pp r10.w, r9.w, r8.w\n"
				"    cmp r0.w, r2.w, r3.w, c1.z\n"
				"    cmp r7.w, -r10.w, r0.w, c2.x\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:9:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s10\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t1, s10\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:10:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s11\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t1, s11\n"
				"    add r9.xyz, r0, -r7\n"
				"    dp3 r7.w, r9, r9\n"
				"    add r7.w, -r7.w, c0.x\n"
				"    cmp_pp r7.w, r7.w, c1.w, c1.x\n"
				"    dp3 r4.w, r7, r7\n"
				"    mov r11.xyz, r7\n"
				"    cmp_pp r1.w, -r4.w, c1.x, c1.w\n"
				"    add_pp r7.w, r7.w, r1.w\n"
				"    cmp_pp r11.w, -r7.w, c1.w, c1.x\n"
				"    mov oC0, r11\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//s:0:t\n"
				"//s:0:u\n"
				"//o:0:v\n"
				"//o:0:n\n"
				"//c:1:epsilon\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:11:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __smallEnough_ps20 = &__smallEnough_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __smallEnough_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R0.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R0.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_2 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_3 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R1.xyz, f[TEX1].xyxx, TEX3, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_4 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX4, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_5 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX5, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_6 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R1.xyz, f[TEX1].xyxx, TEX6, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_7 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX7, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_8 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX8, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_9 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.xyz, f[TEX1].xyxx, TEX9, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:9:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_10 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX10, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:10:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main.__structsampler0_u : TEXUNIT3\n"
				"#semantic main.__structsampler1_u : TEXUNIT4\n"
				"#semantic main.__structsampler2_u : TEXUNIT5\n"
				"#semantic main.__structsampler3_u : TEXUNIT6\n"
				"#semantic main.__structsampler4_u : TEXUNIT7\n"
				"#semantic main.__structsampler5_u : TEXUNIT8\n"
				"#semantic main.__structsampler6_u : TEXUNIT9\n"
				"#semantic main.__structsampler7_u : TEXUNIT10\n"
				"#semantic main.__structsampler8_u : TEXUNIT11\n"
				"#semantic main.epsilon : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler0_u : TEXUNIT3 : texunit 3 : 4 : 1\n"
				"#var samplerRECT __structsampler1_u : TEXUNIT4 : texunit 4 : 5 : 1\n"
				"#var samplerRECT __structsampler2_u : TEXUNIT5 : texunit 5 : 6 : 1\n"
				"#var samplerRECT __structsampler3_u : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler4_u : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler5_u : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler6_u : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler7_u : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler8_u : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var float epsilon : C0 :  : 15 : 1\n"
				"#var float4 __workspace : C1 :  : 16 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float2 _tex_u_pos : $vin.TEXCOORD1 : TEX1 : 13 : 1\n"
				"#var float4 __output_11 : $vout.COLOR0 : COL : 14 : 1\n"
				"DECLARE epsilon;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX1].xyxx, TEX11, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"DP3R R2.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R2.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R1.x, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R1.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:11:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __smallEnough_fp30 = &__smallEnough_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __smallEnough_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 0, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t0, texture[0], RECT;\n"
				"ADD r9.xyz, r7, -r0;\n"
				"DP3 r4.w, r9, r9;\n"
				"ADD r6.w, -r4.w, c0.x;\n"
				"CMP r7.w, r6.w, c1.w, c1.x;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 0, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[2], RECT;\n"
				"TEX r7, t0, texture[1], RECT;\n"
				"ADD r9.xyz, r7, -r0;\n"
				"DP3 r4.w, r9, r9;\n"
				"ADD r6.w, -r4.w, c0.x;\n"
				"CMP r7.w, r6.w, c1.w, c1.x;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 0, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t0, texture[2], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r4.w, r9, r9;\n"
				"ADD r6.w, -r4.w, c0.x;\n"
				"CMP r7.w, r6.w, c1.w, c1.x;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 4, 2, 1};\n"
				"PARAM c2 = {8, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t1, texture[3], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"ADD r4.xyz, r0, -r7;\n"
				"DP3 r2.w, r4, r4;\n"
				"ADD r2.w, -r2.w, c0.x;\n"
				"CMP r9.w, r2.w, c1.w, c1.x;\n"
				"ADD r9.xyz, r2, -r7;\n"
				"DP3 r11.w, r9, r9;\n"
				"ADD r1.w, -r11.w, c0.x;\n"
				"CMP r8.w, r1.w, c1.w, c1.x;\n"
				"CMP r3.w, r1.w, c1.y, c1.x;\n"
				"MUL r10.w, r9.w, r8.w;\n"
				"CMP r0.w, r2.w, c1.z, r3.w;\n"
				"CMP r7.w, -r10.w, c2.x, r0.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t1, texture[4], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t1, texture[5], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 4, 2, 1};\n"
				"PARAM c2 = {8, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t1, texture[6], RECT;\n"
				"TEX r2, t0, texture[2], RECT;\n"
				"ADD r4.xyz, r0, -r7;\n"
				"DP3 r2.w, r4, r4;\n"
				"ADD r2.w, -r2.w, c0.x;\n"
				"CMP r9.w, r2.w, c1.w, c1.x;\n"
				"ADD r9.xyz, r2, -r7;\n"
				"DP3 r11.w, r9, r9;\n"
				"ADD r1.w, -r11.w, c0.x;\n"
				"CMP r8.w, r1.w, c1.w, c1.x;\n"
				"CMP r3.w, r1.w, c1.y, c1.x;\n"
				"MUL r10.w, r9.w, r8.w;\n"
				"CMP r0.w, r2.w, c1.z, r3.w;\n"
				"CMP r7.w, -r10.w, c2.x, r0.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[2], RECT;\n"
				"TEX r7, t1, texture[7], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[2], RECT;\n"
				"TEX r7, t1, texture[8], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, 4, 2, 1};\n"
				"PARAM c2 = {8, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[2], RECT;\n"
				"TEX r7, t1, texture[9], RECT;\n"
				"TEX r2, t0, texture[0], RECT;\n"
				"ADD r4.xyz, r0, -r7;\n"
				"DP3 r2.w, r4, r4;\n"
				"ADD r2.w, -r2.w, c0.x;\n"
				"CMP r9.w, r2.w, c1.w, c1.x;\n"
				"ADD r9.xyz, r2, -r7;\n"
				"DP3 r11.w, r9, r9;\n"
				"ADD r1.w, -r11.w, c0.x;\n"
				"CMP r8.w, r1.w, c1.w, c1.x;\n"
				"CMP r3.w, r1.w, c1.y, c1.x;\n"
				"MUL r10.w, r9.w, r8.w;\n"
				"CMP r0.w, r2.w, c1.z, r3.w;\n"
				"CMP r7.w, -r10.w, c2.x, r0.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:9:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t1, texture[10], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:10:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r11;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t1, texture[11], RECT;\n"
				"ADD r9.xyz, r0, -r7;\n"
				"DP3 r7.w, r9, r9;\n"
				"ADD r7.w, -r7.w, c0.x;\n"
				"CMP r7.w, r7.w, c1.x, c1.w;\n"
				"DP3 r4.w, r7, r7;\n"
				"MOV r11.xyz, r7;\n"
				"CMP r1.w, -r4.w, c1.w, c1.x;\n"
				"ADD r7.w, r7.w, r1.w;\n"
				"CMP r11.w, -r7.w, c1.x, c1.w;\n"
				"MOV oC0, r11;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:0:t\n"
				"##s:0:u\n"
				"##o:0:v\n"
				"##o:0:n\n"
				"##c:1:epsilon\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:11:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(5, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __smallEnough_arb = &__smallEnough_arb_desc;
}

void __smallEnough_cpu_inner (const __cpustruct_STri &t,
                               const __cpustruct_Neighbor &u,
                               __cpustruct_STri &v,
                               __cpustruct_Neighbor &n,
                               const __BrtFloat1  &epsilon){
  v.A.mask3(t.A.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  v.A.mask1((__dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - t.B.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - t.B.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),maskW);
  v.B.mask3(t.B.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  v.B.mask1((__dot_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ) - t.C.swizzle3(maskX, maskY, maskZ),t.B.swizzle3(maskX, maskY, maskZ) - t.C.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),maskW);
  v.C.mask3(t.C.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  v.C.mask1((__dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - t.C.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - t.C.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),maskW);
  n.AB.mask3(u.AB.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.AB.mask1(__triCombine_cpu_inner((__dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - u.AB.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - u.AB.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),(__dot_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ) - u.AB.swizzle3(maskX, maskY, maskZ),t.B.swizzle3(maskX, maskY, maskZ) - u.AB.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f))),maskW);
  n.BC.mask3(u.BC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.BC.mask1(__triCombine_cpu_inner((__dot_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ) - u.BC.swizzle3(maskX, maskY, maskZ),t.B.swizzle3(maskX, maskY, maskZ) - u.BC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),(__dot_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ) - u.BC.swizzle3(maskX, maskY, maskZ),t.C.swizzle3(maskX, maskY, maskZ) - u.BC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f))),maskW);
  n.AC.mask3(u.AC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.AC.mask1(__triCombine_cpu_inner((__dot_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ) - u.AC.swizzle3(maskX, maskY, maskZ),t.C.swizzle3(maskX, maskY, maskZ) - u.AC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f)),(__dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - u.AC.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - u.AC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1(0.000000f))),maskW);
  n.AAC.mask3(u.AAC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.AAC.mask1((__isNotNeighbor_cpu_inner(u.AAC) || __dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - u.AAC.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - u.AAC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
  n.AAB.mask3(u.AAB.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.AAB.mask1((__isNotNeighbor_cpu_inner(u.AAB) || __dot_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ) - u.AAB.swizzle3(maskX, maskY, maskZ),t.A.swizzle3(maskX, maskY, maskZ) - u.AAB.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
  n.ABB.mask3(u.ABB.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.ABB.mask1((__isNotNeighbor_cpu_inner(u.ABB) || __dot_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ) - u.ABB.swizzle3(maskX, maskY, maskZ),t.B.swizzle3(maskX, maskY, maskZ) - u.ABB.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
  n.BBC.mask3(u.BBC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.BBC.mask1((__isNotNeighbor_cpu_inner(u.BBC) || __dot_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ) - u.BBC.swizzle3(maskX, maskY, maskZ),t.B.swizzle3(maskX, maskY, maskZ) - u.BBC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
  n.BCC.mask3(u.BCC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.BCC.mask1((__isNotNeighbor_cpu_inner(u.BCC) || __dot_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ) - u.BCC.swizzle3(maskX, maskY, maskZ),t.C.swizzle3(maskX, maskY, maskZ) - u.BCC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
  n.ACC.mask3(u.ACC.swizzle3(maskX, maskY, maskZ),maskX,maskY,maskZ);
  n.ACC.mask1((__isNotNeighbor_cpu_inner(u.ACC) || __dot_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ) - u.ACC.swizzle3(maskX, maskY, maskZ),t.C.swizzle3(maskX, maskY, maskZ) - u.ACC.swizzle3(maskX, maskY, maskZ)) > epsilon).questioncolon(__BrtFloat1(1.000000f),__BrtFloat1((float)0)),maskW);
}
void  __smallEnough_cpu (const std::vector<void *>&args,
                         const std::vector<const unsigned int *>&extents,
                         const std::vector<unsigned int>&dims,
                         unsigned int mapbegin, 
                         unsigned int mapextent) {
  __cpustruct_STri*arg0 = (__cpustruct_STri*)args[0];
  __cpustruct_Neighbor*arg1 = (__cpustruct_Neighbor*)args[1];
  __cpustruct_STri*arg2 = (__cpustruct_STri*)args[2];
  __cpustruct_Neighbor*arg3 = (__cpustruct_Neighbor*)args[3];
  __BrtFloat1 *arg4 = (__BrtFloat1 *)args[4];
  unsigned int dim=dims[2];
  unsigned int newline=extents[2][dim-1];
  unsigned int ratio0 = extents[2][dim-1]/extents[0][dim-1];
  unsigned int scale0=extents[0][dim-1]/extents[2][dim-1];
  if (scale0<1) scale0 = 1;
  unsigned int ratioiter0 = 0;
  if (ratio0) ratioiter0 = mapbegin%ratio0;
  unsigned int iter0 = getIndexOf(mapbegin,extents[0], dim, extents[2]);
  unsigned int ratio1 = extents[2][dim-1]/extents[1][dim-1];
  unsigned int scale1=extents[1][dim-1]/extents[2][dim-1];
  if (scale1<1) scale1 = 1;
  unsigned int ratioiter1 = 0;
  if (ratio1) ratioiter1 = mapbegin%ratio1;
  unsigned int iter1 = getIndexOf(mapbegin,extents[1], dim, extents[2]);
  arg2+=mapbegin;
  unsigned int ratio3 = extents[2][dim-1]/extents[3][dim-1];
  unsigned int scale3=extents[3][dim-1]/extents[2][dim-1];
  if (scale3<1) scale3 = 1;
  unsigned int ratioiter3 = 0;
  if (ratio3) ratioiter3 = mapbegin%ratio3;
  unsigned int iter3 = getIndexOf(mapbegin,extents[3], dim, extents[2]);
  unsigned int i=0; 
  while (i<mapextent) {
    __smallEnough_cpu_inner (
      *(arg0 + iter0),
      *(arg1 + iter1),
      *arg2,
      *(arg3 + iter3),
      *arg4);
    i++;
    if (++ratioiter0>=ratio0){
      ratioiter0=0;
      iter0+=scale0;
    }
    if (++ratioiter1>=ratio1){
      ratioiter1=0;
      iter1+=scale1;
    }
    ++arg2;
    if (++ratioiter3>=ratio3){
      ratioiter3=0;
      iter3+=scale3;
    }
    if ((mapbegin+i)%newline==0) {
      iter0=getIndexOf(i+mapbegin,extents[0],dim, extents[2]);
      iter1=getIndexOf(i+mapbegin,extents[1],dim, extents[2]);
      iter3=getIndexOf(i+mapbegin,extents[3],dim, extents[2]);
    }
  }
}

void  smallEnough (::brook::stream t,
		::brook::stream u,
		::brook::stream v,
		::brook::stream n,
		const float  epsilon) {
  static const void *__smallEnough_fp[] = {
     "fp30", __smallEnough_fp30,
     "arb", __smallEnough_arb,
     "ps20", __smallEnough_ps20,
     "cpu", (void *) __smallEnough_cpu,
     NULL, NULL };
  static __BRTKernel k(__smallEnough_fp);

  k->PushStream(t);
  k->PushStream(u);
  k->PushOutput(v);
  k->PushOutput(n);
  k->PushConstant(epsilon);
  k->Map();

}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriP_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 0, -1, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    mov r0.xy, c2.z\n"
				"    texld r7, t0, s0\n"
				"    texld r2, t0, s1\n"
				"    texld r9, t0, s2\n"
				"    texld r4, r0, s3\n"
				"    abs r4.w, r7.w\n"
				"    cmp_pp r4.w, -r4.w, c3.x, c3.w\n"
				"    abs r6.w, r2.w\n"
				"    cmp_pp r8.w, -r6.w, c3.x, c3.w\n"
				"    add_pp r4.w, r4.w, r8.w\n"
				"    cmp_pp r4.w, -r4.w, c3.x, c3.w\n"
				"    abs r10.w, r9.w\n"
				"    cmp_pp r0.w, -r10.w, c3.x, c3.w\n"
				"    add_pp r4.w, r4.w, r0.w\n"
				"    mov r0.w, c1.x\n"
				"    add r7.w, c3.y, r0.w\n"
				"    add r9.w, -r7.w, c3.y\n"
				"    abs r6.w, r9.w\n"
				"    mad r1.x, t0.x, c0.x, c0.z\n"
				"    mad r1.y, t0.y, c0.y, c0.w\n"
				"    cmp r8.xy, -r6.w, r1, r4.x\n"
				"    cmp r3.xy, -r4.w, r4.x, r8\n"
				"    mov r3.zw, c3.x\n"
				"    mov oC0, r3\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//si:0:t\n"
				"//o:2:__shouldProduce_stream\n"
				"//o:2:__shouldNotProduce_stream\n"
				"//c:1:__vout_counter\n"
				"//c:1:__inf\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 0, -1, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    mov r0.xy, c2.z\n"
				"    texld r7, t0, s0\n"
				"    texld r2, t0, s1\n"
				"    texld r9, t0, s2\n"
				"    texld r4, r0, s3\n"
				"    abs r4.w, r7.w\n"
				"    cmp_pp r4.w, -r4.w, c3.x, c3.w\n"
				"    abs r6.w, r2.w\n"
				"    cmp_pp r8.w, -r6.w, c3.x, c3.w\n"
				"    add_pp r4.w, r4.w, r8.w\n"
				"    cmp_pp r4.w, -r4.w, c3.x, c3.w\n"
				"    abs r10.w, r9.w\n"
				"    cmp_pp r0.w, -r10.w, c3.x, c3.w\n"
				"    add_pp r4.w, r4.w, r0.w\n"
				"    mov r0.w, c1.x\n"
				"    add r7.w, c3.y, r0.w\n"
				"    add r9.w, -r7.w, c3.y\n"
				"    abs r6.w, r9.w\n"
				"    mad r1.x, t0.x, c0.x, c0.z\n"
				"    mad r1.y, t0.y, c0.y, c0.w\n"
				"    cmp r8.xy, -r6.w, r1, r4.x\n"
				"    cmp r3.xy, -r4.w, r8, r4.x\n"
				"    mov r3.zw, c3.x\n"
				"    mov oC0, r3\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:5\n"
				"//si:0:t\n"
				"//o:2:__shouldProduce_stream\n"
				"//o:2:__shouldNotProduce_stream\n"
				"//c:1:__vout_counter\n"
				"//c:1:__inf\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriP_ps20 = &__produceTriP_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriP_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main._const_t_invscalebias : C0\n"
				"#semantic main.__vout_counter : C1\n"
				"#semantic main.__inf : TEXUNIT3\n"
				"#semantic main.__gatherconst___inf : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var float4 _const_t_invscalebias : C0 :  : 3 : 1\n"
				"#var float __vout_counter : C1 :  : 6 : 1\n"
				"#var samplerRECT __inf[0] : TEXUNIT3 : texunit 3 : 7 : 1\n"
				"#var float4 __gatherconst___inf : C2 :  : 8 : 1\n"
				"#var float4 __workspace : C3 :  : 9 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 4 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 5 : 1\n"
				"DECLARE _const_t_invscalebias;\n"
				"DECLARE __vout_counter;\n"
				"DECLARE __gatherconst___inf;\n"
				"DECLARE __workspace;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.w, f[TEX0].xyxx, TEX1, RECT;\n"
				"SNER H0.x, R1.w, {0}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"MOVR R0.x, {1}.x;\n"
				"ADDR R0.x, __vout_counter.x, -R0.x;\n"
				"SEQR H0.y, {-1}.x, R0.x;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R1.x, {0, 0}.xyxx, TEX3, RECT;\n"
				"SNER H0.z, R0.w, {0}.x;\n"
				"ADDX H0.z, H0.x, H0.z;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"MOVR R0.xy, f[TEX0].xyxx;\n"
				"MOVR R2.xy, R1.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xy(GT.x), R0.xyxx;\n"
				"MOVR o[COLR].xy, R1.x;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR o[COLR].xy(GT.x), R2.xyxx;\n"
				"MOVR o[COLR].zw, {0, 0, 0, 0}.zzzw;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##si:0:t\n"
				"##o:2:__shouldProduce_stream\n"
				"##o:2:__shouldNotProduce_stream\n"
				"##c:1:__vout_counter\n"
				"##c:1:__inf\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main._const_t_invscalebias : C0\n"
				"#semantic main.__vout_counter : C1\n"
				"#semantic main.__inf : TEXUNIT3\n"
				"#semantic main.__gatherconst___inf : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var float4 _const_t_invscalebias : C0 :  : 3 : 1\n"
				"#var float __vout_counter : C1 :  : 6 : 1\n"
				"#var samplerRECT __inf[0] : TEXUNIT3 : texunit 3 : 7 : 1\n"
				"#var float4 __gatherconst___inf : C2 :  : 8 : 1\n"
				"#var float4 __workspace : C3 :  : 9 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 4 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 5 : 1\n"
				"DECLARE _const_t_invscalebias;\n"
				"DECLARE __vout_counter;\n"
				"DECLARE __gatherconst___inf;\n"
				"DECLARE __workspace;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.w, f[TEX0].xyxx, TEX1, RECT;\n"
				"SNER H0.x, R1.w, {0}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R1.x, {0, 0}.xyxx, TEX3, RECT;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"ADDX H0.y, -H0.y, {1}.x;\n"
				"MOVR R0.x, {1}.x;\n"
				"ADDR R0.x, __vout_counter.x, -R0.x;\n"
				"SEQR H0.x, {-1}.x, R0.x;\n"
				"MOVR R0.xy, f[TEX0].xyxx;\n"
				"MOVR R2.xy, R1.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xy(GT.x), R0.xyxx;\n"
				"MOVR o[COLR].xy, R1.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xy(GT.x), R2.xyxx;\n"
				"MOVR o[COLR].zw, {0, 0, 0, 0}.zzzw;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##si:0:t\n"
				"##o:2:__shouldProduce_stream\n"
				"##o:2:__shouldNotProduce_stream\n"
				"##c:1:__vout_counter\n"
				"##c:1:__inf\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriP_fp30 = &__produceTriP_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriP_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {0, -1, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"MOV r0.xy, c2.z;\n"
				"TEX r7, t0, texture[0], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"TEX r9, t0, texture[2], RECT;\n"
				"TEX r4, r0, texture[3], RECT;\n"
				"ABS r4.w, r7.w;\n"
				"CMP r4.w, -r4.w, c3.w, c3.x;\n"
				"ABS r6.w, r2.w;\n"
				"CMP r8.w, -r6.w, c3.w, c3.x;\n"
				"ADD r4.w, r4.w, r8.w;\n"
				"CMP r4.w, -r4.w, c3.w, c3.x;\n"
				"ABS r10.w, r9.w;\n"
				"CMP r0.w, -r10.w, c3.w, c3.x;\n"
				"ADD r4.w, r4.w, r0.w;\n"
				"MOV r0.w, c1.x;\n"
				"ADD r7.w, c3.y, r0.w;\n"
				"ADD r9.w, -r7.w, c3.y;\n"
				"ABS r6.w, r9.w;\n"
				"MAD r1.x, t0.x, c0.x, c0.z;\n"
				"MAD r1.y, t0.y, c0.y, c0.w;\n"
				"CMP r8.xy, -r6.w, r4.x, r1;\n"
				"CMP r3.xy, -r4.w, r8, r4.x;\n"
				"MOV r3.zw, c3.x;\n"
				"MOV oC0, r3;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##si:0:t\n"
				"##o:2:__shouldProduce_stream\n"
				"##o:2:__shouldNotProduce_stream\n"
				"##c:1:__vout_counter\n"
				"##c:1:__inf\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {0, -1, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"MOV r0.xy, c2.z;\n"
				"TEX r7, t0, texture[0], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"TEX r9, t0, texture[2], RECT;\n"
				"TEX r4, r0, texture[3], RECT;\n"
				"ABS r4.w, r7.w;\n"
				"CMP r4.w, -r4.w, c3.w, c3.x;\n"
				"ABS r6.w, r2.w;\n"
				"CMP r8.w, -r6.w, c3.w, c3.x;\n"
				"ADD r4.w, r4.w, r8.w;\n"
				"CMP r4.w, -r4.w, c3.w, c3.x;\n"
				"ABS r10.w, r9.w;\n"
				"CMP r0.w, -r10.w, c3.w, c3.x;\n"
				"ADD r4.w, r4.w, r0.w;\n"
				"MOV r0.w, c1.x;\n"
				"ADD r7.w, c3.y, r0.w;\n"
				"ADD r9.w, -r7.w, c3.y;\n"
				"ABS r6.w, r9.w;\n"
				"MAD r1.x, t0.x, c0.x, c0.z;\n"
				"MAD r1.y, t0.y, c0.y, c0.w;\n"
				"CMP r8.xy, -r6.w, r4.x, r1;\n"
				"CMP r3.xy, -r4.w, r4.x, r8;\n"
				"MOV r3.zw, c3.x;\n"
				"MOV oC0, r3;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##si:0:t\n"
				"##o:2:__shouldProduce_stream\n"
				"##o:2:__shouldNotProduce_stream\n"
				"##c:1:__vout_counter\n"
				"##c:1:__inf\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.constant(4, 0)
				.constant(5, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(5, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriP_arb = &__produceTriP_arb_desc;
}

void __produceTriP_cpu_inner (const __cpustruct_STri &t,
                               __BrtFloat2  &__shouldProduce_stream,
                               __BrtFloat2  &__shouldNotProduce_stream,
                               __BrtFloat1  __vout_counter,
                               const __BrtArray1d<__BrtFloat1  > &__inf,
                               const __BrtFloat4 &__indexof_t){
  __shouldProduce_stream = __inf[__BrtFloat1(0.000000f)] , __shouldNotProduce_stream = __inf[__BrtFloat1(0.000000f)];
  {
    __BrtFloat2  shouldNotProduce;
    __BrtFloat2  shouldProduce;

    if (t.A.swizzle1(maskW) != __BrtFloat1(0.000000f) || t.B.swizzle1(maskW) != __BrtFloat1(0.000000f) || t.C.swizzle1(maskW) != __BrtFloat1(0.000000f))
    {
      shouldProduce = (__indexof_t).swizzle2(maskX, maskY);
      __shouldProduce_stream = (__BrtFloat1(-1.000000f) == (__vout_counter -= __BrtFloat1((float)1))).questioncolon(shouldProduce,__shouldProduce_stream);
    }

    else
    {
      shouldNotProduce = (__indexof_t).swizzle2(maskX, maskY);
      __shouldNotProduce_stream = (__BrtFloat1(-1.000000f) == (__vout_counter -= __BrtFloat1((float)1))).questioncolon(shouldNotProduce,__shouldNotProduce_stream);
    }

  }

}
void  __produceTriP_cpu (const std::vector<void *>&args,
                         const std::vector<const unsigned int *>&extents,
                         const std::vector<unsigned int>&dims,
                         unsigned int mapbegin, 
                         unsigned int mapextent) {
  __cpustruct_STri*arg0 = (__cpustruct_STri*)args[0];
  __BrtFloat2 *arg1 = (__BrtFloat2 *)args[1];
  __BrtFloat2 *arg2 = (__BrtFloat2 *)args[2];
  __BrtFloat1 *arg3 = (__BrtFloat1 *)args[3];
  __BrtArray1d<__BrtFloat1  > arg4(
      (__BrtFloat1  *)args[4], extents[4]);
  unsigned int dim=dims[1];
  unsigned int newline=extents[1][dim-1];
  unsigned int ratio0 = extents[1][dim-1]/extents[0][dim-1];
  unsigned int scale0=extents[0][dim-1]/extents[1][dim-1];
  if (scale0<1) scale0 = 1;
  unsigned int ratioiter0 = 0;
  if (ratio0) ratioiter0 = mapbegin%ratio0;
  unsigned int iter0 = getIndexOf(mapbegin,extents[0], dim, extents[1]);
  arg1+=mapbegin;
  unsigned int ratio2 = extents[1][dim-1]/extents[2][dim-1];
  unsigned int scale2=extents[2][dim-1]/extents[1][dim-1];
  if (scale2<1) scale2 = 1;
  unsigned int ratioiter2 = 0;
  if (ratio2) ratioiter2 = mapbegin%ratio2;
  unsigned int iter2 = getIndexOf(mapbegin,extents[2], dim, extents[1]);
  ;
__BrtFloat4 indexof0 = computeIndexOf(mapbegin, extents[0], dims[0], extents[1]);
  unsigned int i=0; 
  while (i<mapextent) {
    __produceTriP_cpu_inner (
      *(arg0 + iter0),
      *arg1,
      *(arg2 + iter2),
      *arg3,
      arg4,
      indexof0);
    i++;
    if (++ratioiter0>=ratio0){
      ratioiter0=0;
      iter0+=scale0;
    indexof0.unsafeGetAt(0)+=scale0;
    }
    ++arg1;
    if (++ratioiter2>=ratio2){
      ratioiter2=0;
      iter2+=scale2;
    }
    if ((mapbegin+i)%newline==0) {
      iter0=getIndexOf(i+mapbegin,extents[0],dim, extents[1]);
indexof0 = computeIndexOf(i+mapbegin, extents[0], dim, extents[1]);
      iter2=getIndexOf(i+mapbegin,extents[2],dim, extents[1]);
    }
  }
}

extern int finiteValueProduced1dfloat (brook::stream input);
extern float shiftValues1dfloat(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreams1dfloat(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProducedfloat (brook::stream input);
extern float shiftValuesfloat(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreamsfloat(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProduced1dfloat2 (brook::stream input);
extern float shiftValues1dfloat2(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreams1dfloat2(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProducedfloat2 (brook::stream input);
extern float shiftValuesfloat2(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreamsfloat2(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProduced1dfloat3 (brook::stream input);
extern float shiftValues1dfloat3(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreams1dfloat3(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProducedfloat3 (brook::stream input);
extern float shiftValuesfloat3(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreamsfloat3(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProduced1dfloat4 (brook::stream input);
extern float shiftValues1dfloat4(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreams1dfloat4(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
extern int finiteValueProducedfloat4 (brook::stream input);
extern float shiftValuesfloat4(brook::stream list_stream,
                         brook::stream *output_stream,
                         int WIDTH, 
                         int LENGTH, 
                         int sign);
void combineStreamsfloat4(brook::stream **streams,
                     unsigned int num,
                     unsigned int width, 
                     unsigned int length,
                     brook::stream *output) ;
void  produceTriP (::brook::stream t,
		::brook::stream &__shouldProduce_stream,
		::brook::stream &__shouldNotProduce_stream) {
  static const void *__produceTriP_fp[] = {
     "fp30", __produceTriP_fp30,
     "arb", __produceTriP_arb,
     "ps20", __produceTriP_ps20,
     "cpu", (void *) __produceTriP_cpu,
     NULL, NULL };
  static __BRTKernel k(__produceTriP_fp);

  float __vout_counter=0.0f;
  brook::Stream * __inf = *sentinelStream(1);
  int maxextents[2]={0,0};
  unsigned int __dimension = t->getDimension();
  assert (t->getDimension()<=2);
  maxDimension(maxextents,t->getExtents(),t->getDimension());
  std:: vector <__BRTStreamType> __shouldProduce_types;
  for (int __shouldProduce_iter = 0; __shouldProduce_iter < __shouldProduce_stream->getFieldCount(); ++__shouldProduce_iter) 
    __shouldProduce_types.push_back(__shouldProduce_stream->getIndexedFieldType(__shouldProduce_iter));
  __shouldProduce_types.push_back(__BRTNONE);
  std::vector<brook::stream*> __shouldProduce_outputs;
  bool __shouldProduce_values = true;
  std:: vector <__BRTStreamType> __shouldNotProduce_types;
  for (int __shouldNotProduce_iter = 0; __shouldNotProduce_iter < __shouldNotProduce_stream->getFieldCount(); ++__shouldNotProduce_iter) 
    __shouldNotProduce_types.push_back(__shouldNotProduce_stream->getIndexedFieldType(__shouldNotProduce_iter));
  __shouldNotProduce_types.push_back(__BRTNONE);
  std::vector<brook::stream*> __shouldNotProduce_outputs;
  bool __shouldNotProduce_values = true;
  while (__shouldProduce_values || __shouldNotProduce_values) {
    if (__shouldProduce_values)
       __shouldProduce_outputs.push_back (new ::brook::stream (quickAllocStream(&__shouldProduce_types[0], maxextents[0],maxextents[1],-1 )));
    if (__shouldNotProduce_values)
       __shouldNotProduce_outputs.push_back (new ::brook::stream (quickAllocStream(&__shouldNotProduce_types[0],maxextents[0], maxextents[1],-1 )));
    k->PushStream(t);
    k->PushOutput(*__shouldProduce_outputs.back());
    k->PushOutput(*__shouldNotProduce_outputs.back());
    k->PushConstant(__vout_counter);
    k->PushGatherStream(__inf);
    k->Map();
    __vout_counter+=1.0f;
     if ((__vout_counter >= 1)&&(__vout_counter >= 1)) {
      __shouldProduce_outputs.push_back(0);
      __shouldNotProduce_outputs.push_back(0);
      break;
    }
  }
  if (__shouldProduce_stream->getDimension()==2) {
    ::brook::stream __shouldProduce_temp(&__shouldProduce_types[0],1, 1, -1);
    combineStreamsfloat2 (&__shouldProduce_outputs[0],
                   __shouldProduce_outputs.size()-1,
                   maxextents[0],
                   maxextents[1],
                   &__shouldProduce_temp);
    shiftValuesfloat2(__shouldProduce_temp,
                &__shouldProduce_stream,
                __shouldProduce_temp->getExtents()[0],
                __shouldProduce_temp->getExtents()[1],
                -1);
  }else {
    ::brook::stream __shouldProduce_temp(&__shouldProduce_types[0],1, -1);
    combineStreams1dfloat2 (&__shouldProduce_outputs[0],
                   __shouldProduce_outputs.size()-1,
                   maxextents[0],
                   maxextents[1],
                   &__shouldProduce_temp);
    shiftValues1dfloat2(__shouldProduce_temp,
                &__shouldProduce_stream,
                __shouldProduce_temp->getExtents()[0],
                 1,                -1);
  }
  while (__shouldProduce_outputs.size()) {
    if (__shouldProduce_outputs.back())
      delete __shouldProduce_outputs.back();
    __shouldProduce_outputs.pop_back();
  }
  if (__shouldNotProduce_stream->getDimension()==2) {
    ::brook::stream __shouldNotProduce_temp(&__shouldNotProduce_types[0],1, 1, -1);
    combineStreamsfloat2 (&__shouldNotProduce_outputs[0],
                   __shouldNotProduce_outputs.size()-1,
                   maxextents[0],
                   maxextents[1],
                   &__shouldNotProduce_temp);
    shiftValuesfloat2(__shouldNotProduce_temp,
                &__shouldNotProduce_stream,
                __shouldNotProduce_temp->getExtents()[0],
                __shouldNotProduce_temp->getExtents()[1],
                -1);
  }else {
    ::brook::stream __shouldNotProduce_temp(&__shouldNotProduce_types[0],1, -1);
    combineStreams1dfloat2 (&__shouldNotProduce_outputs[0],
                   __shouldNotProduce_outputs.size()-1,
                   maxextents[0],
                   maxextents[1],
                   &__shouldNotProduce_temp);
    shiftValues1dfloat2(__shouldNotProduce_temp,
                &__shouldNotProduce_stream,
                __shouldNotProduce_temp->getExtents()[0],
                 1,                -1);
  }
  while (__shouldNotProduce_outputs.size()) {
    if (__shouldNotProduce_outputs.back())
      delete __shouldNotProduce_outputs.back();
    __shouldNotProduce_outputs.pop_back();
  }

}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriPNoCompact_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, -1, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t0, s1\n"
				"    texld r2, t0, s2\n"
				"    abs r4.w, r0.w\n"
				"    cmp_pp r6.w, -r4.w, c1.x, c1.w\n"
				"    abs r8.w, r7.w\n"
				"    cmp_pp r10.w, -r8.w, c1.x, c1.w\n"
				"    add_pp r5.w, r6.w, r10.w\n"
				"    cmp_pp r7.w, -r5.w, c1.x, c1.w\n"
				"    abs r2.w, r2.w\n"
				"    cmp_pp r11.w, -r2.w, c1.x, c1.w\n"
				"    add_pp r6.w, r7.w, r11.w\n"
				"    mad r1.x, t0.x, c0.x, c0.z\n"
				"    mad r1.y, t0.y, c0.y, c0.w\n"
				"    cmp r8.xy, -r6.w, c1.y, r1\n"
				"    mov r8.zw, c1.x\n"
				"    mov oC0, r8\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:3\n"
				"//si:0:t\n"
				"//o:2:shouldProduce\n"
				"//o:2:shouldNotProduce\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 0, -1, 0, 1\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t0, s1\n"
				"    texld r2, t0, s2\n"
				"    abs r4.w, r0.w\n"
				"    cmp_pp r6.w, -r4.w, c1.x, c1.w\n"
				"    abs r8.w, r7.w\n"
				"    cmp_pp r10.w, -r8.w, c1.x, c1.w\n"
				"    add_pp r5.w, r6.w, r10.w\n"
				"    cmp_pp r7.w, -r5.w, c1.x, c1.w\n"
				"    abs r2.w, r2.w\n"
				"    cmp_pp r11.w, -r2.w, c1.x, c1.w\n"
				"    add_pp r6.w, r7.w, r11.w\n"
				"    mad r1.x, t0.x, c0.x, c0.z\n"
				"    mad r1.y, t0.y, c0.y, c0.w\n"
				"    cmp r8.xy, -r6.w, r1, c1.y\n"
				"    mov r8.zw, c1.x\n"
				"    mov oC0, r8\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:3\n"
				"//si:0:t\n"
				"//o:2:shouldProduce\n"
				"//o:2:shouldNotProduce\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriPNoCompact_ps20 = &__produceTriPNoCompact_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriPNoCompact_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main._const_t_invscalebias : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var float4 _const_t_invscalebias : C0 :  : 3 : 1\n"
				"#var float4 __workspace : C1 :  : 6 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 4 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 5 : 1\n"
				"DECLARE _const_t_invscalebias;\n"
				"DECLARE __workspace;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.w, f[TEX0].xyxx, TEX1, RECT;\n"
				"SNER H0.x, R1.w, {0}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX2, RECT;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR R0.xy, f[TEX0].xyxx;\n"
				"MOVR o[COLR].xy, {-1, -1}.xyxx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xy(GT.x), R0.xyxx;\n"
				"MOVR o[COLR].zw, {0, 0, 0, 0}.zzzw;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##si:0:t\n"
				"##o:2:shouldProduce\n"
				"##o:2:shouldNotProduce\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_t : TEXUNIT0\n"
				"#semantic main.__structsampler1_t : TEXUNIT1\n"
				"#semantic main.__structsampler2_t : TEXUNIT2\n"
				"#semantic main._const_t_invscalebias : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_t : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_t : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_t : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var float4 _const_t_invscalebias : C0 :  : 3 : 1\n"
				"#var float4 __workspace : C1 :  : 6 : 1\n"
				"#var float2 _tex_t_pos : $vin.TEXCOORD0 : TEX0 : 4 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 5 : 1\n"
				"DECLARE _const_t_invscalebias;\n"
				"DECLARE __workspace;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.w, f[TEX0].xyxx, TEX1, RECT;\n"
				"SNER H0.x, R1.w, {0}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"TEX R0.w, f[TEX0].xyxx, TEX2, RECT;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"ADDX H0.y, -H0.y, {1}.x;\n"
				"MOVR R0.xy, f[TEX0].xyxx;\n"
				"MOVR o[COLR].xy, {-1, -1}.xyxx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xy(GT.x), R0.xyxx;\n"
				"MOVR o[COLR].zw, {0, 0, 0, 0}.zzzw;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##si:0:t\n"
				"##o:2:shouldProduce\n"
				"##o:2:shouldNotProduce\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriPNoCompact_fp30 = &__produceTriPNoCompact_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __produceTriPNoCompact_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, -1, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t0, texture[1], RECT;\n"
				"TEX r2, t0, texture[2], RECT;\n"
				"ABS r4.w, r0.w;\n"
				"CMP r6.w, -r4.w, c1.w, c1.x;\n"
				"ABS r8.w, r7.w;\n"
				"CMP r10.w, -r8.w, c1.w, c1.x;\n"
				"ADD r5.w, r6.w, r10.w;\n"
				"CMP r7.w, -r5.w, c1.w, c1.x;\n"
				"ABS r2.w, r2.w;\n"
				"CMP r11.w, -r2.w, c1.w, c1.x;\n"
				"ADD r6.w, r7.w, r11.w;\n"
				"MAD r1.x, t0.x, c0.x, c0.z;\n"
				"MAD r1.y, t0.y, c0.y, c0.w;\n"
				"CMP r8.xy, -r6.w, r1, c1.y;\n"
				"MOV r8.zw, c1.x;\n"
				"MOV oC0, r8;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##si:0:t\n"
				"##o:2:shouldProduce\n"
				"##o:2:shouldNotProduce\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(2, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {0, -1, 0, 1};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t0, texture[1], RECT;\n"
				"TEX r2, t0, texture[2], RECT;\n"
				"ABS r4.w, r0.w;\n"
				"CMP r6.w, -r4.w, c1.w, c1.x;\n"
				"ABS r8.w, r7.w;\n"
				"CMP r10.w, -r8.w, c1.w, c1.x;\n"
				"ADD r5.w, r6.w, r10.w;\n"
				"CMP r7.w, -r5.w, c1.w, c1.x;\n"
				"ABS r2.w, r2.w;\n"
				"CMP r11.w, -r2.w, c1.w, c1.x;\n"
				"ADD r6.w, r7.w, r11.w;\n"
				"MAD r1.x, t0.x, c0.x, c0.z;\n"
				"MAD r1.y, t0.y, c0.y, c0.w;\n"
				"CMP r8.xy, -r6.w, c1.y, r1;\n"
				"MOV r8.zw, c1.x;\n"
				"MOV oC0, r8;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##si:0:t\n"
				"##o:2:shouldProduce\n"
				"##o:2:shouldNotProduce\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kStreamConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __produceTriPNoCompact_arb = &__produceTriPNoCompact_arb_desc;
}

void __produceTriPNoCompact_cpu_inner (const __cpustruct_STri &t,
                                        __BrtFloat2  &shouldProduce,
                                        __BrtFloat2  &shouldNotProduce,
                                        const __BrtFloat4 &__indexof_t){
  shouldProduce = shouldNotProduce = -__BrtFloat1((float)1);
  if (t.A.swizzle1(maskW) != __BrtFloat1(0.000000f) || t.B.swizzle1(maskW) != __BrtFloat1(0.000000f) || t.C.swizzle1(maskW) != __BrtFloat1(0.000000f))
  {
    shouldProduce = (__indexof_t).swizzle2(maskX, maskY);
  }

  else
  {
    shouldNotProduce = (__indexof_t).swizzle2(maskX, maskY);
  }

}
void  __produceTriPNoCompact_cpu (const std::vector<void *>&args,
                                  const std::vector<const unsigned int *>&extents,
                                  const std::vector<unsigned int>&dims,
                                  unsigned int mapbegin, 
                                  unsigned int mapextent) {
  __cpustruct_STri*arg0 = (__cpustruct_STri*)args[0];
  __BrtFloat2 *arg1 = (__BrtFloat2 *)args[1];
  __BrtFloat2 *arg2 = (__BrtFloat2 *)args[2];
  unsigned int dim=dims[1];
  unsigned int newline=extents[1][dim-1];
  unsigned int ratio0 = extents[1][dim-1]/extents[0][dim-1];
  unsigned int scale0=extents[0][dim-1]/extents[1][dim-1];
  if (scale0<1) scale0 = 1;
  unsigned int ratioiter0 = 0;
  if (ratio0) ratioiter0 = mapbegin%ratio0;
  unsigned int iter0 = getIndexOf(mapbegin,extents[0], dim, extents[1]);
  arg1+=mapbegin;
  unsigned int ratio2 = extents[1][dim-1]/extents[2][dim-1];
  unsigned int scale2=extents[2][dim-1]/extents[1][dim-1];
  if (scale2<1) scale2 = 1;
  unsigned int ratioiter2 = 0;
  if (ratio2) ratioiter2 = mapbegin%ratio2;
  unsigned int iter2 = getIndexOf(mapbegin,extents[2], dim, extents[1]);
  ;
__BrtFloat4 indexof0 = computeIndexOf(mapbegin, extents[0], dims[0], extents[1]);
  unsigned int i=0; 
  while (i<mapextent) {
    __produceTriPNoCompact_cpu_inner (
      *(arg0 + iter0),
      *arg1,
      *(arg2 + iter2),
      indexof0);
    i++;
    if (++ratioiter0>=ratio0){
      ratioiter0=0;
      iter0+=scale0;
    indexof0.unsafeGetAt(0)+=scale0;
    }
    ++arg1;
    if (++ratioiter2>=ratio2){
      ratioiter2=0;
      iter2+=scale2;
    }
    if ((mapbegin+i)%newline==0) {
      iter0=getIndexOf(i+mapbegin,extents[0],dim, extents[1]);
indexof0 = computeIndexOf(i+mapbegin, extents[0], dim, extents[1]);
      iter2=getIndexOf(i+mapbegin,extents[2],dim, extents[1]);
    }
  }
}

void  produceTriPNoCompact (::brook::stream t,
		::brook::stream shouldProduce,
		::brook::stream shouldNotProduce) {
  static const void *__produceTriPNoCompact_fp[] = {
     "fp30", __produceTriPNoCompact_fp30,
     "arb", __produceTriPNoCompact_arb,
     "ps20", __produceTriPNoCompact_ps20,
     "cpu", (void *) __produceTriPNoCompact_cpu,
     NULL, NULL };
  static __BRTKernel k(__produceTriPNoCompact_fp);

  k->PushStream(t);
  k->PushOutput(shouldProduce);
  k->PushOutput(shouldNotProduce);
  k->Map();

}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __computeNeighbors_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, -2, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s4\n"
				"    texld r0, r3, s6\n"
				"    texld r7, r3, s5\n"
				"    texld r2, r10, s0\n"
				"    texld r9, r10, s1\n"
				"    texld r4, r3, s3\n"
				"    texld r11, r3, s9\n"
				"    texld r6, r3, s11\n"
				"    texld r1, r3, s10\n"
				"    dp3 r7.w, r5, r5\n"
				"    cmp r7.w, -r7.w, r0.x, r5.x\n"
				"    dp3 r2.w, r7, r7\n"
				"    cmp r2.w, -r2.w, r7.w, r7.x\n"
				"    add r2.w, r2.w, -r2.x\n"
				"    mad r2.w, r2.w, c2.z, r2.x\n"
				"    lrp r11.w, c2.z, r4.x, r9.x\n"
				"    lrp r2.w, c3.y, r2.w, r11.w\n"
				"    add r6.w, r4.w, c3.x\n"
				"    abs r6.w, r6.w\n"
				"    cmp_pp r6.w, -r6.w, c2.x, c2.w\n"
				"    add r1.w, r4.w, c3.w\n"
				"    abs r1.w, r1.w\n"
				"    cmp_pp r1.w, -r1.w, c2.x, c2.w\n"
				"    add_pp r6.w, r6.w, r1.w\n"
				"    cmp r8.w, -r6.w, r11.w, r2.w\n"
				"    add r4.w, r4.w, c3.z\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.x, c2.w\n"
				"    add_pp r4.w, r1.w, r4.w\n"
				"    mov_pp r9.w, -r4.w\n"
				"    lrp r0.xyz, c2.z, r4, r2\n"
				"    dp3 r11.w, r6, r6\n"
				"    cmp r4.xyz, -r11.w, r11, r6\n"
				"    dp3 r1.w, r1, r1\n"
				"    cmp r3.xyz, -r1.w, r4, r1\n"
				"    add r10.xyz, -r9, r3\n"
				"    mad r9.xyz, r10, c2.z, r9\n"
				"    lrp r9.xyz, c3.y, r9, r0\n"
				"    cmp r8.xyz, r9.w, r0, r9\n"
				"    mov oC0, r8\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s3\n"
				"    texld r0, r10, s0\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r3, s6\n"
				"    texld r9, r3, s4\n"
				"    texld r4, r3, s5\n"
				"    add r4.w, r5.w, c3.x\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.x, c2.w\n"
				"    add r5.w, r5.w, c3.w\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add_pp r4.w, r4.w, r5.w\n"
				"    mov_pp r7.w, -r4.w\n"
				"    dp3 r5.w, r9, r9\n"
				"    mov r2.w, -r5.w\n"
				"    cmp r5.w, r2.w, r2.y, r9.y\n"
				"    dp3 r0.w, r4, r4\n"
				"    cmp r5.w, -r0.w, r5.w, r4.y\n"
				"    cmp r4.xyz, -r0.w, r5, r4\n"
				"    lrp r4.w, c2.z, r5.w, r0.y\n"
				"    lrp r1.w, c2.z, r5.y, r7.y\n"
				"    lrp r4.w, c3.y, r4.w, r1.w\n"
				"    cmp r3.w, r7.w, r1.w, r4.w\n"
				"    lrp r9.xyz, c2.z, r9, r7\n"
				"    cmp r9.xyz, r2.w, c2.w, r9\n"
				"    cmp_pp r2.w, r2.w, c2.w, c2.x\n"
				"    mul r2.w, r9.w, r2.w\n"
				"    abs r2.w, r2.w\n"
				"    lrp r6.xyz, c2.z, r2, r4\n"
				"    lrp r10.xyz, c3.y, r6, r9\n"
				"    cmp r3.xyz, -r2.w, r9, r10\n"
				"    mov oC0, r3\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s3\n"
				"    texld r0, r10, s0\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r3, s6\n"
				"    texld r9, r3, s4\n"
				"    texld r4, r3, s5\n"
				"    add r2.w, r5.w, c3.x\n"
				"    abs r2.w, r2.w\n"
				"    cmp_pp r2.w, -r2.w, c2.x, c2.w\n"
				"    add r9.w, r5.w, c3.w\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add_pp r2.w, r2.w, r9.w\n"
				"    mov_pp r7.w, -r2.w\n"
				"    dp3 r2.w, r9, r9\n"
				"    cmp r5.w, -r2.w, r2.z, r9.z\n"
				"    cmp r9.xyz, -r2.w, r2, r9\n"
				"    dp3 r0.w, r4, r4\n"
				"    cmp r5.w, -r0.w, r5.w, r4.z\n"
				"    lrp r9.w, c2.z, r5.w, r0.z\n"
				"    lrp r5.w, c2.z, r5.z, r7.z\n"
				"    lrp r9.w, c3.y, r9.w, r5.w\n"
				"    cmp r6.w, r7.w, r5.w, r9.w\n"
				"    lrp r0.xyz, c2.z, r4, r7\n"
				"    cmp r4.xyz, -r0.w, c2.w, r0\n"
				"    cmp_pp r9.w, -r0.w, c2.w, c2.x\n"
				"    mul r9.w, r4.w, r9.w\n"
				"    abs r9.w, r9.w\n"
				"    lrp r7.xyz, c2.z, r9, r5\n"
				"    lrp r0.xyz, c3.y, r7, r4\n"
				"    cmp r6.xyz, -r9.w, r4, r0\n"
				"    mov oC0, r6\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:2:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, -2, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s5\n"
				"    texld r0, r3, s3\n"
				"    texld r7, r3, s4\n"
				"    texld r2, r10, s2\n"
				"    texld r9, r10, s1\n"
				"    texld r4, r3, s6\n"
				"    texld r11, r3, s9\n"
				"    texld r6, r3, s7\n"
				"    texld r1, r3, s8\n"
				"    dp3 r5.w, r5, r5\n"
				"    cmp r8.xyz, -r5.w, r0, r5\n"
				"    dp3 r7.w, r7, r7\n"
				"    cmp r3.xyz, -r7.w, r8, r7\n"
				"    lrp r7.xyz, c2.z, r3, r2\n"
				"    lrp r5.xyz, c2.z, r4, r9\n"
				"    lrp r3.xyz, c3.y, r7, r5\n"
				"    add r5.w, r4.w, c3.z\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add r3.w, r4.w, c3.w\n"
				"    abs r3.w, r3.w\n"
				"    cmp_pp r3.w, -r3.w, c2.x, c2.w\n"
				"    add_pp r5.w, r5.w, r3.w\n"
				"    cmp r10.xyz, -r5.w, r5, r3\n"
				"    add r6.w, r11.w, c3.w\n"
				"    abs r6.w, r6.w\n"
				"    cmp_pp r6.w, -r6.w, c2.x, c2.w\n"
				"    add r1.w, r4.w, c3.x\n"
				"    abs r1.w, r1.w\n"
				"    cmp_pp r1.w, -r1.w, c2.x, c2.w\n"
				"    add_pp r6.w, r6.w, r1.w\n"
				"    mov_pp r1.w, -r6.w\n"
				"    lrp r6.w, c2.z, r4.x, r2.x\n"
				"    dp3 r2.w, r6, r6\n"
				"    cmp r7.w, -r2.w, r11.x, r6.x\n"
				"    dp3 r8.w, r1, r1\n"
				"    cmp r3.w, -r8.w, r7.w, r1.x\n"
				"    lrp r2.w, c2.z, r3.w, r9.x\n"
				"    lrp r7.w, c3.y, r2.w, r6.w\n"
				"    cmp r10.w, r1.w, r6.w, r7.w\n"
				"    mov oC0, r10\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:3:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s6\n"
				"    texld r0, r3, s9\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r10, s2\n"
				"    texld r9, r3, s8\n"
				"    texld r4, r3, s7\n"
				"    texld r11, r3, s3\n"
				"    add r9.w, r5.w, c3.x\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r11.w, r0.w, c3.w\n"
				"    abs r11.w, r11.w\n"
				"    cmp_pp r11.w, -r11.w, c2.x, c2.w\n"
				"    add_pp r9.w, r9.w, r11.w\n"
				"    mov_pp r2.w, -r9.w\n"
				"    dp3 r9.w, r9, r9\n"
				"    dp3 r0.w, r4, r4\n"
				"    cmp r7.w, -r0.w, r0.y, r4.y\n"
				"    cmp r7.w, -r9.w, r7.w, r9.y\n"
				"    cmp r11.xyz, -r9.w, r11, r9\n"
				"    lrp r11.w, c2.z, r7.w, r7.y\n"
				"    lrp r8.w, c2.z, r5.y, r2.y\n"
				"    lrp r11.w, c3.y, r11.w, r8.w\n"
				"    cmp r10.w, r2.w, r8.w, r11.w\n"
				"    lrp r4.xyz, c2.z, r4, r2\n"
				"    cmp r4.xyz, -r0.w, c2.w, r4\n"
				"    cmp_pp r11.w, -r0.w, c2.w, c2.x\n"
				"    mul r11.w, r4.w, r11.w\n"
				"    abs r11.w, r11.w\n"
				"    lrp r1.xyz, c2.z, r11, r0\n"
				"    lrp r9.xyz, c3.y, r1, r4\n"
				"    cmp r10.xyz, -r11.w, r4, r9\n"
				"    mov oC0, r10\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:4:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s9\n"
				"    texld r0, r3, s6\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r10, s2\n"
				"    texld r9, r3, s7\n"
				"    texld r4, r3, s8\n"
				"    add r5.w, r5.w, c3.w\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add r9.w, r0.w, c3.x\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add_pp r5.w, r5.w, r9.w\n"
				"    mov_pp r2.w, -r5.w\n"
				"    dp3 r5.w, r9, r9\n"
				"    cmp r0.w, -r5.w, r5.z, r9.z\n"
				"    cmp r9.xyz, -r5.w, r5, r9\n"
				"    dp3 r7.w, r4, r4\n"
				"    cmp r0.w, -r7.w, r0.w, r4.z\n"
				"    lrp r9.w, c2.z, r0.w, r7.z\n"
				"    lrp r0.w, c2.z, r0.z, r2.z\n"
				"    lrp r9.w, c3.y, r9.w, r0.w\n"
				"    cmp r6.w, r2.w, r0.w, r9.w\n"
				"    lrp r7.xyz, c2.z, r4, r2\n"
				"    cmp r4.xyz, -r7.w, c2.w, r7\n"
				"    cmp_pp r9.w, -r7.w, c2.w, c2.x\n"
				"    mul r9.w, r4.w, r9.w\n"
				"    abs r9.w, r9.w\n"
				"    lrp r2.xyz, c2.z, r9, r0\n"
				"    lrp r7.xyz, c3.y, r2, r4\n"
				"    cmp r6.xyz, -r9.w, r4, r7\n"
				"    mov oC0, r6\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:5:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, -2, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s10\n"
				"    texld r0, r3, s3\n"
				"    texld r7, r3, s11\n"
				"    texld r2, r10, s2\n"
				"    texld r9, r10, s0\n"
				"    texld r4, r3, s9\n"
				"    texld r11, r3, s6\n"
				"    texld r6, r3, s8\n"
				"    texld r1, r3, s7\n"
				"    dp3 r7.w, r5, r5\n"
				"    cmp r7.w, -r7.w, r0.x, r5.x\n"
				"    dp3 r2.w, r7, r7\n"
				"    cmp r2.w, -r2.w, r7.w, r7.x\n"
				"    add r2.w, r2.w, -r2.x\n"
				"    mad r2.w, r2.w, c2.z, r2.x\n"
				"    lrp r11.w, c2.z, r4.x, r9.x\n"
				"    lrp r2.w, c3.y, r2.w, r11.w\n"
				"    add r6.w, r4.w, c3.x\n"
				"    abs r6.w, r6.w\n"
				"    cmp_pp r6.w, -r6.w, c2.x, c2.w\n"
				"    add r1.w, r4.w, c3.w\n"
				"    abs r1.w, r1.w\n"
				"    cmp_pp r1.w, -r1.w, c2.x, c2.w\n"
				"    add_pp r6.w, r6.w, r1.w\n"
				"    cmp r8.w, -r6.w, r11.w, r2.w\n"
				"    add r4.w, r4.w, c3.z\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.x, c2.w\n"
				"    add_pp r4.w, r1.w, r4.w\n"
				"    mov_pp r9.w, -r4.w\n"
				"    lrp r0.xyz, c2.z, r4, r2\n"
				"    dp3 r11.w, r6, r6\n"
				"    cmp r4.xyz, -r11.w, r11, r6\n"
				"    dp3 r1.w, r1, r1\n"
				"    cmp r3.xyz, -r1.w, r4, r1\n"
				"    add r10.xyz, -r9, r3\n"
				"    mad r9.xyz, r10, c2.z, r9\n"
				"    lrp r9.xyz, c3.y, r9, r0\n"
				"    cmp r8.xyz, r9.w, r0, r9\n"
				"    mov oC0, r8\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:6:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s9\n"
				"    texld r0, r10, s2\n"
				"    texld r7, r10, s0\n"
				"    texld r2, r3, s3\n"
				"    texld r9, r3, s10\n"
				"    texld r4, r3, s11\n"
				"    add r4.w, r5.w, c3.x\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.x, c2.w\n"
				"    add r5.w, r5.w, c3.w\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add_pp r4.w, r4.w, r5.w\n"
				"    mov_pp r7.w, -r4.w\n"
				"    dp3 r5.w, r9, r9\n"
				"    mov r2.w, -r5.w\n"
				"    cmp r5.w, r2.w, r2.y, r9.y\n"
				"    dp3 r0.w, r4, r4\n"
				"    cmp r5.w, -r0.w, r5.w, r4.y\n"
				"    cmp r4.xyz, -r0.w, r5, r4\n"
				"    lrp r4.w, c2.z, r5.w, r0.y\n"
				"    lrp r1.w, c2.z, r5.y, r7.y\n"
				"    lrp r4.w, c3.y, r4.w, r1.w\n"
				"    cmp r3.w, r7.w, r1.w, r4.w\n"
				"    lrp r9.xyz, c2.z, r9, r7\n"
				"    cmp r9.xyz, r2.w, c2.w, r9\n"
				"    cmp_pp r2.w, r2.w, c2.w, c2.x\n"
				"    mul r2.w, r9.w, r2.w\n"
				"    abs r2.w, r2.w\n"
				"    lrp r6.xyz, c2.z, r2, r4\n"
				"    lrp r10.xyz, c3.y, r6, r9\n"
				"    cmp r3.xyz, -r2.w, r9, r10\n"
				"    mov oC0, r3\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:7:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.5, 0\n"
				"    def c3, -4, 0.25, 0, -8\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s9\n"
				"    texld r0, r10, s2\n"
				"    texld r7, r10, s0\n"
				"    texld r2, r3, s3\n"
				"    texld r9, r3, s10\n"
				"    texld r4, r3, s11\n"
				"    add r2.w, r5.w, c3.x\n"
				"    abs r2.w, r2.w\n"
				"    cmp_pp r2.w, -r2.w, c2.x, c2.w\n"
				"    add r9.w, r5.w, c3.w\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add_pp r2.w, r2.w, r9.w\n"
				"    mov_pp r7.w, -r2.w\n"
				"    dp3 r2.w, r9, r9\n"
				"    cmp r5.w, -r2.w, r2.z, r9.z\n"
				"    cmp r9.xyz, -r2.w, r2, r9\n"
				"    dp3 r0.w, r4, r4\n"
				"    cmp r5.w, -r0.w, r5.w, r4.z\n"
				"    lrp r5.w, c2.z, r5.w, r0.z\n"
				"    lrp r9.w, c2.z, r5.z, r7.z\n"
				"    lrp r5.w, c3.y, r5.w, r9.w\n"
				"    cmp r6.w, r7.w, r9.w, r5.w\n"
				"    lrp r0.xyz, c2.z, r4, r7\n"
				"    cmp r4.xyz, -r0.w, c2.w, r0\n"
				"    cmp_pp r5.w, -r0.w, c2.w, c2.x\n"
				"    mul r5.w, r4.w, r5.w\n"
				"    abs r5.w, r5.w\n"
				"    lrp r7.xyz, c2.z, r5, r9\n"
				"    lrp r0.xyz, c3.y, r7, r4\n"
				"    cmp r6.xyz, -r5.w, r4, r0\n"
				"    mov oC0, r6\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:tgather\n"
				"//c:0:ugather\n"
				"//s:2:i\n"
				"//o:0:v\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:8:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __computeNeighbors_ps20 = &__computeNeighbors_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __computeNeighbors_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX11, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX4, RECT;\n"
				"DP3R R1.w, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"TEX R3.xyz, R1.xyxx, TEX9, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX6, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R2.xyzx;\n"
				"MOVR R2.xyz, R3.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0.xyz, R1.xyxx, TEX10, RECT;\n"
				"TEX R3.xyz, R1.xyxx, TEX5, RECT;\n"
				"DP3R R1.w, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R3.xyzx;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0.xyz, R1.xyxx, TEX0, RECT;\n"
				"TEX R3, R1.xyxx, TEX3, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX1, RECT;\n"
				"ADDR R2.xyz, R2.xyzx, -R1.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R0.xyzx;\n"
				"MADR R4.xyz, {0.5}.x, R4.xyzx, R0.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R2.xyzx, R1.xyzx;\n"
				"SEQR H0.x, R3.w, {8}.x;\n"
				"SEQR H0.y, R3.w, {2}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"SEQR H0.y, R3.w, {8}.x;\n"
				"SEQR H0.z, R3.w, {4}.x;\n"
				"ADDX H0.y, H0.z, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"ADDR R5.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R5.xyzx, R1.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R0.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R3.xyzx, R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R0.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R1.xyzx;\n"
				"MADR R4.xyz, {0.25}.x, R4.xyzx, R1.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R0.xyzx;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVR R0.x, R1.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), R4.xyzx;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX4, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX6, RECT;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"SNER H0.z, H0.y, {0}.x;\n"
				"MULX H0.x, H0.z, H0.x;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"TEX R4.xyz, R1.xyxx, TEX5, RECT;\n"
				"TEX R5, R1.xyxx, TEX3, RECT;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"DP3R R1.w, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.w, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R4.xyzx;\n"
				"MOVR R6.xyz, R5.xyzx;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R6.xyz(GT.x), R4.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R6.xyzx;\n"
				"MADR R6.xyz, {0.5}.x, R2.xyzx, R6.xyzx;\n"
				"TEX R2.xyz, R1.xyxx, TEX1, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX0, RECT;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R2.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"ADDR R3.xyz, R5.xyzx, -R2.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R3.xyzx, R2.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R2.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R2.xyzx;\n"
				"MOVR R3.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R6.xyz, R6.xyzx, -R3.xyzx;\n"
				"MADR R6.xyz, {0.25}.x, R6.xyzx, R3.xyzx;\n"
				"MOVR o[COLR].xyz, R3.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R6.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R2.y(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R2.y;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_2 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX4, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX6, RECT;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0, R1.xyxx, TEX5, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX1, RECT;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R4.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R4.xyzx;\n"
				"SNER H0.z, H0.y, {0}.x;\n"
				"MULX H0.x, H0.z, H0.x;\n"
				"TEX R5, R1.xyxx, TEX3, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX0, RECT;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R5.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R2.xyzx, R5.xyzx;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"ADDR R3.xyz, R5.xyzx, -R4.xyzx;\n"
				"MADR R3.xyz, {0.5}.x, R3.xyzx, R4.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R3.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R3.xyzx;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"MOVR R4.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R4.xyz(GT.x), R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R4.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R4.xyzx;\n"
				"MOVR o[COLR].xyz, R4.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R3.z(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R3.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_3 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX5, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX7, RECT;\n"
				"DP3R R1.w, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"TEX R3.xyz, R1.xyxx, TEX3, RECT;\n"
				"TEX R4, R1.xyxx, TEX9, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"SEQR H0.y, R4.w, {8}.x;\n"
				"MOVR R0.xyz, R4.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R2.xyzx;\n"
				"TEX R2.xyz, R1.xyxx, TEX4, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX8, RECT;\n"
				"DP3R R0.w, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.x, R0.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R4.xyzx;\n"
				"DP3R R0.w, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R2.xyzx;\n"
				"TEX R2.xyz, R1.xyxx, TEX1, RECT;\n"
				"TEX R4, R1.xyxx, TEX6, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX2, RECT;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R2.xyzx;\n"
				"MADR R3.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"SEQR H0.x, R4.w, {8}.x;\n"
				"SEQR H0.z, R4.w, {2}.x;\n"
				"ADDX H0.x, H0.z, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"SEQR H0.z, R4.w, {4}.x;\n"
				"ADDX H0.y, H0.z, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"ADDR R5.xyz, R4.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R5.xyzx, R1.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R2.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R4.xyzx, R2.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R2.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"MADR R0.xyz, {0.25}.x, R0.xyzx, R1.xyzx;\n"
				"MADR R3.xyz, {0.25}.x, R3.xyzx, R2.xyzx;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R3.xyzx;\n"
				"MOVR R0.w, R1.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.w(GT.x), R0.x;\n"
				"MOVR o[COLR].w, R0.w;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_4 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX7, RECT;\n"
				"TEX R2, R1.xyxx, TEX9, RECT;\n"
				"SEQR H0.x, R2.w, {8}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.z, R1.w, {0}.x;\n"
				"SNER H0.w, H0.z, {0}.x;\n"
				"MULX H0.y, H0.w, H0.y;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"TEX R4.xyz, R1.xyxx, TEX8, RECT;\n"
				"TEX R5.xyz, R1.xyxx, TEX3, RECT;\n"
				"DP3R R1.w, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.w, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R5.xyz(GT.x), R4.xyzx;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R4.xyzx;\n"
				"ADDR R5.xyz, R5.xyzx, -R2.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R5.xyzx, R2.xyzx;\n"
				"TEX R4.xyz, R1.xyxx, TEX2, RECT;\n"
				"TEX R5, R1.xyxx, TEX6, RECT;\n"
				"ADDR R0.xyz, R0.xyzx, -R4.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R4.xyzx;\n"
				"TEX R1.xyz, R1.xyxx, TEX1, RECT;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.x, H0.w, H0.x;\n"
				"ADDR R3.xyz, R5.xyzx, -R4.xyzx;\n"
				"MADR R3.xyz, {0.5}.x, R3.xyzx, R4.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R3.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R3.xyzx;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"MOVR R4.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R4.xyz(GT.x), R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R4.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R4.xyzx;\n"
				"MOVR o[COLR].xyz, R4.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.y(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R3.y;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_5 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX7, RECT;\n"
				"TEX R2, R1.xyxx, TEX9, RECT;\n"
				"SEQR H0.x, R2.w, {8}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0, R1.xyxx, TEX8, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX2, RECT;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.z, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R4.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R4.xyzx;\n"
				"SNER H0.w, H0.z, {0}.x;\n"
				"MULX H0.y, H0.w, H0.y;\n"
				"TEX R5, R1.xyxx, TEX6, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX1, RECT;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R5.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R2.xyzx, R5.xyzx;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.x, H0.w, H0.x;\n"
				"ADDR R3.xyz, R5.xyzx, -R4.xyzx;\n"
				"MADR R3.xyz, {0.5}.x, R3.xyzx, R4.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R3.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R3.xyzx;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"MOVR R4.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R4.xyz(GT.x), R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R4.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R4.xyzx;\n"
				"MOVR o[COLR].xyz, R4.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.z(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R3.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_6 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX8, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX10, RECT;\n"
				"DP3R R1.w, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"TEX R3.xyz, R1.xyxx, TEX6, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R2.xyzx;\n"
				"MOVR R2.xyz, R3.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0.xyz, R1.xyxx, TEX7, RECT;\n"
				"TEX R3.xyz, R1.xyxx, TEX11, RECT;\n"
				"DP3R R1.w, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R3.xyzx;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0.xyz, R1.xyxx, TEX2, RECT;\n"
				"TEX R3, R1.xyxx, TEX9, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX0, RECT;\n"
				"ADDR R2.xyz, R2.xyzx, -R1.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R0.xyzx;\n"
				"MADR R4.xyz, {0.5}.x, R4.xyzx, R0.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R2.xyzx, R1.xyzx;\n"
				"SEQR H0.x, R3.w, {8}.x;\n"
				"SEQR H0.y, R3.w, {2}.x;\n"
				"ADDX H0.x, H0.y, H0.x;\n"
				"MINX H0.x, H0.x, {1}.x;\n"
				"SEQR H0.y, R3.w, {8}.x;\n"
				"SEQR H0.z, R3.w, {4}.x;\n"
				"ADDX H0.y, H0.z, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"ADDR R5.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R5.xyzx, R1.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R0.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R3.xyzx, R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R0.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R1.xyzx;\n"
				"MADR R4.xyz, {0.25}.x, R4.xyzx, R1.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R0.xyzx;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVR R0.x, R1.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), R4.xyzx;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_7 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX10, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX3, RECT;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"SNER H0.z, H0.y, {0}.x;\n"
				"MULX H0.x, H0.z, H0.x;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"TEX R4.xyz, R1.xyxx, TEX11, RECT;\n"
				"TEX R5, R1.xyxx, TEX9, RECT;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"DP3R R1.w, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.w, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R4.xyzx;\n"
				"MOVR R6.xyz, R5.xyzx;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R6.xyz(GT.x), R4.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R6.xyzx;\n"
				"MADR R6.xyz, {0.5}.x, R2.xyzx, R6.xyzx;\n"
				"TEX R2.xyz, R1.xyxx, TEX0, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX2, RECT;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R2.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"ADDR R3.xyz, R5.xyzx, -R2.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R3.xyzx, R2.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R2.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R2.xyzx;\n"
				"MOVR R3.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R6.xyz, R6.xyzx, -R3.xyzx;\n"
				"MADR R6.xyz, {0.25}.x, R6.xyzx, R3.xyzx;\n"
				"MOVR o[COLR].xyz, R3.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R6.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R2.y(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R2.y;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.tgather : TEXUNIT0\n"
				"#semantic main.__gatherconst_tgather : C0\n"
				"#semantic main.ugather : TEXUNIT3\n"
				"#semantic main.__gatherconst_ugather : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT tgather[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT tgather[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT tgather[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_tgather : C0 :  : 1 : 1\n"
				"#var samplerRECT ugather[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT ugather[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT ugather[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT ugather[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT ugather[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT ugather[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT ugather[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT ugather[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT ugather[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_ugather : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_8 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_tgather;\n"
				"DECLARE __gatherconst_ugather;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX10, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX3, RECT;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R1.w, {0}.x;\n"
				"MOVR R3.xyz, R2.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R0.xyzx;\n"
				"TEX R0, R1.xyxx, TEX11, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX0, RECT;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R1.w, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R4.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R4.xyzx;\n"
				"SNER H0.z, H0.y, {0}.x;\n"
				"MULX H0.x, H0.z, H0.x;\n"
				"TEX R5, R1.xyxx, TEX9, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX2, RECT;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R3.xyzx, R1.xyzx;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"MOVR R3.xyz, {0, 0, 0}.xyzx;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R0.xyzx;\n"
				"ADDR R0.xyz, R5.xyzx, -R2.xyzx;\n"
				"MADR R2.xyz, {0.5}.x, R0.xyzx, R2.xyzx;\n"
				"ADDR R0.xyz, R5.xyzx, -R4.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R0.xyzx, R4.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R3.xyzx;\n"
				"MADR R2.xyz, {0.25}.x, R2.xyzx, R3.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R0.xyzx;\n"
				"MOVR o[COLR].xyz, R3.xyzx;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR R0.z(GT.x), R1.xyzx;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __computeNeighbors_fp30 = &__computeNeighbors_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __computeNeighbors_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, -2, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[4], RECT;\n"
				"TEX r0, r3, texture[6], RECT;\n"
				"TEX r7, r3, texture[5], RECT;\n"
				"TEX r2, r10, texture[0], RECT;\n"
				"TEX r9, r10, texture[1], RECT;\n"
				"TEX r4, r3, texture[3], RECT;\n"
				"TEX r11, r3, texture[9], RECT;\n"
				"TEX r6, r3, texture[11], RECT;\n"
				"TEX r1, r3, texture[10], RECT;\n"
				"DP3 r7.w, r5, r5;\n"
				"CMP r7.w, -r7.w, r5.x, r0.x;\n"
				"DP3 r2.w, r7, r7;\n"
				"CMP r2.w, -r2.w, r7.x, r7.w;\n"
				"ADD r2.w, r2.w, -r2.x;\n"
				"MAD r2.w, r2.w, c2.z, r2.x;\n"
				"LRP r11.w, c2.z, r4.x, r9.x;\n"
				"LRP r2.w, c3.y, r2.w, r11.w;\n"
				"ADD r6.w, r4.w, c3.x;\n"
				"ABS r6.w, r6.w;\n"
				"CMP r6.w, -r6.w, c2.w, c2.x;\n"
				"ADD r1.w, r4.w, c3.w;\n"
				"ABS r1.w, r1.w;\n"
				"CMP r1.w, -r1.w, c2.w, c2.x;\n"
				"ADD r6.w, r6.w, r1.w;\n"
				"CMP r8.w, -r6.w, r2.w, r11.w;\n"
				"ADD r4.w, r4.w, c3.z;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.w, c2.x;\n"
				"ADD r4.w, r1.w, r4.w;\n"
				"MOV r9.w, -r4.w;\n"
				"LRP r0.xyz, c2.z, r4, r2;\n"
				"DP3 r11.w, r6, r6;\n"
				"CMP r4.xyz, -r11.w, r6, r11;\n"
				"DP3 r1.w, r1, r1;\n"
				"CMP r3.xyz, -r1.w, r1, r4;\n"
				"ADD r10.xyz, -r9, r3;\n"
				"MAD r9.xyz, r10, c2.z, r9;\n"
				"LRP r9.xyz, c3.y, r9, r0;\n"
				"CMP r8.xyz, r9.w, r9, r0;\n"
				"MOV oC0, r8;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[3], RECT;\n"
				"TEX r0, r10, texture[0], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r3, texture[6], RECT;\n"
				"TEX r9, r3, texture[4], RECT;\n"
				"TEX r4, r3, texture[5], RECT;\n"
				"ADD r4.w, r5.w, c3.x;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, c3.w;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r4.w, r4.w, r5.w;\n"
				"MOV r7.w, -r4.w;\n"
				"DP3 r5.w, r9, r9;\n"
				"MOV r2.w, -r5.w;\n"
				"CMP r5.w, r2.w, r9.y, r2.y;\n"
				"DP3 r0.w, r4, r4;\n"
				"CMP r5.w, -r0.w, r4.y, r5.w;\n"
				"CMP r4.xyz, -r0.w, r4, r5;\n"
				"LRP r4.w, c2.z, r5.w, r0.y;\n"
				"LRP r1.w, c2.z, r5.y, r7.y;\n"
				"LRP r4.w, c3.y, r4.w, r1.w;\n"
				"CMP r3.w, r7.w, r4.w, r1.w;\n"
				"LRP r9.xyz, c2.z, r9, r7;\n"
				"CMP r9.xyz, r2.w, r9, c2.w;\n"
				"CMP r2.w, r2.w, c2.x, c2.w;\n"
				"MUL r2.w, r9.w, r2.w;\n"
				"ABS r2.w, r2.w;\n"
				"LRP r6.xyz, c2.z, r2, r4;\n"
				"LRP r10.xyz, c3.y, r6, r9;\n"
				"CMP r3.xyz, -r2.w, r10, r9;\n"
				"MOV oC0, r3;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[3], RECT;\n"
				"TEX r0, r10, texture[0], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r3, texture[6], RECT;\n"
				"TEX r9, r3, texture[4], RECT;\n"
				"TEX r4, r3, texture[5], RECT;\n"
				"ADD r2.w, r5.w, c3.x;\n"
				"ABS r2.w, r2.w;\n"
				"CMP r2.w, -r2.w, c2.w, c2.x;\n"
				"ADD r9.w, r5.w, c3.w;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r2.w, r2.w, r9.w;\n"
				"MOV r7.w, -r2.w;\n"
				"DP3 r2.w, r9, r9;\n"
				"CMP r5.w, -r2.w, r9.z, r2.z;\n"
				"CMP r9.xyz, -r2.w, r9, r2;\n"
				"DP3 r0.w, r4, r4;\n"
				"CMP r5.w, -r0.w, r4.z, r5.w;\n"
				"LRP r9.w, c2.z, r5.w, r0.z;\n"
				"LRP r5.w, c2.z, r5.z, r7.z;\n"
				"LRP r9.w, c3.y, r9.w, r5.w;\n"
				"CMP r6.w, r7.w, r9.w, r5.w;\n"
				"LRP r0.xyz, c2.z, r4, r7;\n"
				"CMP r4.xyz, -r0.w, r0, c2.w;\n"
				"CMP r9.w, -r0.w, c2.x, c2.w;\n"
				"MUL r9.w, r4.w, r9.w;\n"
				"ABS r9.w, r9.w;\n"
				"LRP r7.xyz, c2.z, r9, r5;\n"
				"LRP r0.xyz, c3.y, r7, r4;\n"
				"CMP r6.xyz, -r9.w, r0, r4;\n"
				"MOV oC0, r6;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, -2, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[5], RECT;\n"
				"TEX r0, r3, texture[3], RECT;\n"
				"TEX r7, r3, texture[4], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"TEX r9, r10, texture[1], RECT;\n"
				"TEX r4, r3, texture[6], RECT;\n"
				"TEX r11, r3, texture[9], RECT;\n"
				"TEX r6, r3, texture[7], RECT;\n"
				"TEX r1, r3, texture[8], RECT;\n"
				"DP3 r5.w, r5, r5;\n"
				"CMP r8.xyz, -r5.w, r5, r0;\n"
				"DP3 r7.w, r7, r7;\n"
				"CMP r3.xyz, -r7.w, r7, r8;\n"
				"LRP r7.xyz, c2.z, r3, r2;\n"
				"LRP r5.xyz, c2.z, r4, r9;\n"
				"LRP r3.xyz, c3.y, r7, r5;\n"
				"ADD r5.w, r4.w, c3.z;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r3.w, r4.w, c3.w;\n"
				"ABS r3.w, r3.w;\n"
				"CMP r3.w, -r3.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, r3.w;\n"
				"CMP r10.xyz, -r5.w, r3, r5;\n"
				"ADD r6.w, r11.w, c3.w;\n"
				"ABS r6.w, r6.w;\n"
				"CMP r6.w, -r6.w, c2.w, c2.x;\n"
				"ADD r1.w, r4.w, c3.x;\n"
				"ABS r1.w, r1.w;\n"
				"CMP r1.w, -r1.w, c2.w, c2.x;\n"
				"ADD r6.w, r6.w, r1.w;\n"
				"MOV r1.w, -r6.w;\n"
				"LRP r6.w, c2.z, r4.x, r2.x;\n"
				"DP3 r2.w, r6, r6;\n"
				"CMP r7.w, -r2.w, r6.x, r11.x;\n"
				"DP3 r8.w, r1, r1;\n"
				"CMP r3.w, -r8.w, r1.x, r7.w;\n"
				"LRP r2.w, c2.z, r3.w, r9.x;\n"
				"LRP r7.w, c3.y, r2.w, r6.w;\n"
				"CMP r10.w, r1.w, r7.w, r6.w;\n"
				"MOV oC0, r10;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[6], RECT;\n"
				"TEX r0, r3, texture[9], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"TEX r9, r3, texture[8], RECT;\n"
				"TEX r4, r3, texture[7], RECT;\n"
				"TEX r11, r3, texture[3], RECT;\n"
				"ADD r9.w, r5.w, c3.x;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r11.w, r0.w, c3.w;\n"
				"ABS r11.w, r11.w;\n"
				"CMP r11.w, -r11.w, c2.w, c2.x;\n"
				"ADD r9.w, r9.w, r11.w;\n"
				"MOV r2.w, -r9.w;\n"
				"DP3 r9.w, r9, r9;\n"
				"DP3 r0.w, r4, r4;\n"
				"CMP r7.w, -r0.w, r4.y, r0.y;\n"
				"CMP r7.w, -r9.w, r9.y, r7.w;\n"
				"CMP r11.xyz, -r9.w, r9, r11;\n"
				"LRP r11.w, c2.z, r7.w, r7.y;\n"
				"LRP r8.w, c2.z, r5.y, r2.y;\n"
				"LRP r11.w, c3.y, r11.w, r8.w;\n"
				"CMP r10.w, r2.w, r11.w, r8.w;\n"
				"LRP r4.xyz, c2.z, r4, r2;\n"
				"CMP r4.xyz, -r0.w, r4, c2.w;\n"
				"CMP r11.w, -r0.w, c2.x, c2.w;\n"
				"MUL r11.w, r4.w, r11.w;\n"
				"ABS r11.w, r11.w;\n"
				"LRP r1.xyz, c2.z, r11, r0;\n"
				"LRP r9.xyz, c3.y, r1, r4;\n"
				"CMP r10.xyz, -r11.w, r9, r4;\n"
				"MOV oC0, r10;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[9], RECT;\n"
				"TEX r0, r3, texture[6], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"TEX r9, r3, texture[7], RECT;\n"
				"TEX r4, r3, texture[8], RECT;\n"
				"ADD r5.w, r5.w, c3.w;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r9.w, r0.w, c3.x;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, r9.w;\n"
				"MOV r2.w, -r5.w;\n"
				"DP3 r5.w, r9, r9;\n"
				"CMP r0.w, -r5.w, r9.z, r5.z;\n"
				"CMP r9.xyz, -r5.w, r9, r5;\n"
				"DP3 r7.w, r4, r4;\n"
				"CMP r0.w, -r7.w, r4.z, r0.w;\n"
				"LRP r9.w, c2.z, r0.w, r7.z;\n"
				"LRP r0.w, c2.z, r0.z, r2.z;\n"
				"LRP r9.w, c3.y, r9.w, r0.w;\n"
				"CMP r6.w, r2.w, r9.w, r0.w;\n"
				"LRP r7.xyz, c2.z, r4, r2;\n"
				"CMP r4.xyz, -r7.w, r7, c2.w;\n"
				"CMP r9.w, -r7.w, c2.x, c2.w;\n"
				"MUL r9.w, r4.w, r9.w;\n"
				"ABS r9.w, r9.w;\n"
				"LRP r2.xyz, c2.z, r9, r0;\n"
				"LRP r7.xyz, c3.y, r2, r4;\n"
				"CMP r6.xyz, -r9.w, r7, r4;\n"
				"MOV oC0, r6;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, -2, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[10], RECT;\n"
				"TEX r0, r3, texture[3], RECT;\n"
				"TEX r7, r3, texture[11], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"TEX r9, r10, texture[0], RECT;\n"
				"TEX r4, r3, texture[9], RECT;\n"
				"TEX r11, r3, texture[6], RECT;\n"
				"TEX r6, r3, texture[8], RECT;\n"
				"TEX r1, r3, texture[7], RECT;\n"
				"DP3 r7.w, r5, r5;\n"
				"CMP r7.w, -r7.w, r5.x, r0.x;\n"
				"DP3 r2.w, r7, r7;\n"
				"CMP r2.w, -r2.w, r7.x, r7.w;\n"
				"ADD r2.w, r2.w, -r2.x;\n"
				"MAD r2.w, r2.w, c2.z, r2.x;\n"
				"LRP r11.w, c2.z, r4.x, r9.x;\n"
				"LRP r2.w, c3.y, r2.w, r11.w;\n"
				"ADD r6.w, r4.w, c3.x;\n"
				"ABS r6.w, r6.w;\n"
				"CMP r6.w, -r6.w, c2.w, c2.x;\n"
				"ADD r1.w, r4.w, c3.w;\n"
				"ABS r1.w, r1.w;\n"
				"CMP r1.w, -r1.w, c2.w, c2.x;\n"
				"ADD r6.w, r6.w, r1.w;\n"
				"CMP r8.w, -r6.w, r2.w, r11.w;\n"
				"ADD r4.w, r4.w, c3.z;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.w, c2.x;\n"
				"ADD r4.w, r1.w, r4.w;\n"
				"MOV r9.w, -r4.w;\n"
				"LRP r0.xyz, c2.z, r4, r2;\n"
				"DP3 r11.w, r6, r6;\n"
				"CMP r4.xyz, -r11.w, r6, r11;\n"
				"DP3 r1.w, r1, r1;\n"
				"CMP r3.xyz, -r1.w, r1, r4;\n"
				"ADD r10.xyz, -r9, r3;\n"
				"MAD r9.xyz, r10, c2.z, r9;\n"
				"LRP r9.xyz, c3.y, r9, r0;\n"
				"CMP r8.xyz, r9.w, r9, r0;\n"
				"MOV oC0, r8;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[9], RECT;\n"
				"TEX r0, r10, texture[2], RECT;\n"
				"TEX r7, r10, texture[0], RECT;\n"
				"TEX r2, r3, texture[3], RECT;\n"
				"TEX r9, r3, texture[10], RECT;\n"
				"TEX r4, r3, texture[11], RECT;\n"
				"ADD r4.w, r5.w, c3.x;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, c3.w;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r4.w, r4.w, r5.w;\n"
				"MOV r7.w, -r4.w;\n"
				"DP3 r5.w, r9, r9;\n"
				"MOV r2.w, -r5.w;\n"
				"CMP r5.w, r2.w, r9.y, r2.y;\n"
				"DP3 r0.w, r4, r4;\n"
				"CMP r5.w, -r0.w, r4.y, r5.w;\n"
				"CMP r4.xyz, -r0.w, r4, r5;\n"
				"LRP r4.w, c2.z, r5.w, r0.y;\n"
				"LRP r1.w, c2.z, r5.y, r7.y;\n"
				"LRP r4.w, c3.y, r4.w, r1.w;\n"
				"CMP r3.w, r7.w, r4.w, r1.w;\n"
				"LRP r9.xyz, c2.z, r9, r7;\n"
				"CMP r9.xyz, r2.w, r9, c2.w;\n"
				"CMP r2.w, r2.w, c2.x, c2.w;\n"
				"MUL r2.w, r9.w, r2.w;\n"
				"ABS r2.w, r2.w;\n"
				"LRP r6.xyz, c2.z, r2, r4;\n"
				"LRP r10.xyz, c3.y, r6, r9;\n"
				"CMP r3.xyz, -r2.w, r10, r9;\n"
				"MOV oC0, r3;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.5, 0};\n"
				"PARAM c3 = {-4, 0.25, 0, -8};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[9], RECT;\n"
				"TEX r0, r10, texture[2], RECT;\n"
				"TEX r7, r10, texture[0], RECT;\n"
				"TEX r2, r3, texture[3], RECT;\n"
				"TEX r9, r3, texture[10], RECT;\n"
				"TEX r4, r3, texture[11], RECT;\n"
				"ADD r2.w, r5.w, c3.x;\n"
				"ABS r2.w, r2.w;\n"
				"CMP r2.w, -r2.w, c2.w, c2.x;\n"
				"ADD r9.w, r5.w, c3.w;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r2.w, r2.w, r9.w;\n"
				"MOV r7.w, -r2.w;\n"
				"DP3 r2.w, r9, r9;\n"
				"CMP r5.w, -r2.w, r9.z, r2.z;\n"
				"CMP r9.xyz, -r2.w, r9, r2;\n"
				"DP3 r0.w, r4, r4;\n"
				"CMP r5.w, -r0.w, r4.z, r5.w;\n"
				"LRP r5.w, c2.z, r5.w, r0.z;\n"
				"LRP r9.w, c2.z, r5.z, r7.z;\n"
				"LRP r5.w, c3.y, r5.w, r9.w;\n"
				"CMP r6.w, r7.w, r5.w, r9.w;\n"
				"LRP r0.xyz, c2.z, r4, r7;\n"
				"CMP r4.xyz, -r0.w, r0, c2.w;\n"
				"CMP r5.w, -r0.w, c2.x, c2.w;\n"
				"MUL r5.w, r4.w, r5.w;\n"
				"ABS r5.w, r5.w;\n"
				"LRP r7.xyz, c2.z, r5, r9;\n"
				"LRP r0.xyz, c3.y, r7, r4;\n"
				"CMP r6.xyz, -r5.w, r0, r4;\n"
				"MOV oC0, r6;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:tgather\n"
				"##c:0:ugather\n"
				"##s:2:i\n"
				"##o:0:v\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __computeNeighbors_arb = &__computeNeighbors_arb_desc;
}

void __computeNeighbors_cpu_inner (const __BrtArray2d<__cpustruct_STri > &tgather,
                                    const __BrtArray2d<__cpustruct_Neighbor > &ugather,
                                    const __BrtFloat2  &i,
                                    __cpustruct_Neighbor &v){
  __BrtFloat2  zero2 = __BrtFloat1((float)0);
  __BrtFloat2  ind = (i >= __BrtFloat1((float)0) && i < __BrtFloat1((float)8192)).questioncolon(i,zero2);
  __cpustruct_Neighbor u = ugather[ind];
  __BrtFloat1  eAAB = __isNeighbor_cpu_inner(u.AAB);
  __BrtFloat1  eAAC = __isNeighbor_cpu_inner(u.AAC);
  __BrtFloat1  eABB = __isNeighbor_cpu_inner(u.ABB);
  __BrtFloat1  eBBC = __isNeighbor_cpu_inner(u.BBC);
  __BrtFloat1  eBCC = __isNeighbor_cpu_inner(u.BCC);
  __BrtFloat1  eACC = __isNeighbor_cpu_inner(u.ACC);
  __cpustruct_STri t = tgather[ind];
  __BrtFloat3  AB_B;
  __BrtFloat3  AC_A;
  __BrtFloat3  BC_C;
  __BrtFloat3  zero3 = __BrtFloat1((float)0);

  AB_B = __lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (u.AB.swizzle1(maskW) == __BrtFloat1((float)4) || u.AB.swizzle1(maskW) == __BrtFloat1((float)8))
      AB_B = __lerp_cpu_inner(AB_B,__lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),eABB.questioncolon(u.ABB.swizzle3(maskX, maskY, maskZ),eBBC.questioncolon(u.BBC.swizzle3(maskX, maskY, maskZ),u.BC.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f));
  AC_A = __lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (u.AC.swizzle1(maskW) == __BrtFloat1((float)4) || u.AC.swizzle1(maskW) == __BrtFloat1((float)8))
      AC_A = __lerp_cpu_inner(AC_A,__lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),eAAC.questioncolon(u.AAC.swizzle3(maskX, maskY, maskZ),eAAB.questioncolon(u.AAB.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f));
  BC_C = __lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),u.BC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (u.BC.swizzle1(maskW) == __BrtFloat1((float)4) || u.AC.swizzle1(maskW) == __BrtFloat1((float)8))
      BC_C = __lerp_cpu_inner(BC_C,__lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),eBCC.questioncolon(u.BCC.swizzle3(maskX, maskY, maskZ),eACC.questioncolon(u.ACC.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f));
  v.AB.mask3(__lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (u.AB.swizzle1(maskW) == __BrtFloat1((float)2) || u.AB.swizzle1(maskW) == __BrtFloat1((float)8))
      v.AB.mask3(__lerp_cpu_inner(v.AB.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),eAAB.questioncolon(u.AAB.swizzle3(maskX, maskY, maskZ),eAAC.questioncolon(u.AAC.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.AB.mask1(AB_B.swizzle1(maskX),maskW);
  v.BBC.mask3(eBBC.questioncolon(__lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),u.BBC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eBBC && u.BBC.swizzle1(maskW))
      v.BBC.mask3(__lerp_cpu_inner(v.BBC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(eABB.questioncolon(u.ABB.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ)),u.BC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.BBC.mask1(AB_B.swizzle1(maskY),maskW);
  v.ABB.mask3(eABB.questioncolon(__lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),u.ABB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eABB && u.ABB.swizzle1(maskW))
      v.ABB.mask3(__lerp_cpu_inner(v.ABB.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(u.AB.swizzle3(maskX, maskY, maskZ),eBBC.questioncolon(u.BBC.swizzle3(maskX, maskY, maskZ),u.BC.swizzle3(maskX, maskY, maskZ)),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.ABB.mask1(AB_B.swizzle1(maskZ),maskW);
  v.AC.mask3(__lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (u.AC.swizzle1(maskW) == __BrtFloat1((float)2) || u.AC.swizzle1(maskW) == __BrtFloat1((float)8))
      v.AC.mask3(__lerp_cpu_inner(v.AC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),eACC.questioncolon(u.ACC.swizzle3(maskX, maskY, maskZ),eBCC.questioncolon(u.BCC.swizzle3(maskX, maskY, maskZ),u.BC.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.AC.mask1(AC_A.swizzle1(maskX),maskW);
  v.AAB.mask3(eAAB.questioncolon(__lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),u.AAB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eAAB && u.AAB.swizzle1(maskW))
      v.AAB.mask3(__lerp_cpu_inner(v.AAB.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(eAAC.questioncolon(u.AAC.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ)),u.AB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.AAB.mask1(AC_A.swizzle1(maskY),maskW);
  v.AAC.mask3(eAAC.questioncolon(__lerp_cpu_inner(t.A.swizzle3(maskX, maskY, maskZ),u.AAC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eAAC && u.AAC.swizzle1(maskW))
      v.AAC.mask3(__lerp_cpu_inner(v.AAC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(eAAB.questioncolon(u.AAB.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ)),u.AC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.AAC.mask1(AC_A.swizzle1(maskZ),maskW);
  v.BC.mask3(__lerp_cpu_inner(t.B.swizzle3(maskX, maskY, maskZ),u.BC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (u.BC.swizzle1(maskW) == __BrtFloat1((float)2) || u.BC.swizzle1(maskW) == __BrtFloat1((float)8))
      v.BC.mask3(__lerp_cpu_inner(v.BC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),eBBC.questioncolon(u.BBC.swizzle3(maskX, maskY, maskZ),eABB.questioncolon(u.ABB.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ))),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.BC.mask1(BC_C.swizzle1(maskX),maskW);
  v.ACC.mask3(eACC.questioncolon(__lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),u.ACC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eACC && u.ACC.swizzle1(maskW))
      v.ACC.mask3(__lerp_cpu_inner(v.ACC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(u.AC.swizzle3(maskX, maskY, maskZ),eBCC.questioncolon(u.BCC.swizzle3(maskX, maskY, maskZ),u.AB.swizzle3(maskX, maskY, maskZ)),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.ACC.mask1(BC_C.swizzle1(maskY),maskW);
  v.BCC.mask3(eBCC.questioncolon(__lerp_cpu_inner(t.C.swizzle3(maskX, maskY, maskZ),u.BCC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),zero3),maskX,maskY,maskZ);
  if (__BrtFloat1((float)1))
    if (eBCC && u.BCC.swizzle1(maskW))
      v.BCC.mask3(__lerp_cpu_inner(v.BCC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(u.BC.swizzle3(maskX, maskY, maskZ),eACC.questioncolon(u.ACC.swizzle3(maskX, maskY, maskZ),u.AC.swizzle3(maskX, maskY, maskZ)),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),maskX,maskY,maskZ);
  v.BCC.mask1(BC_C.swizzle1(maskZ),maskW);
}
void  __computeNeighbors_cpu (const std::vector<void *>&args,
                              const std::vector<const unsigned int *>&extents,
                              const std::vector<unsigned int>&dims,
                              unsigned int mapbegin, 
                              unsigned int mapextent) {
  __BrtArray2d<__cpustruct_STri > arg0(
      (__cpustruct_STri *)args[0], extents[0]);
  __BrtArray2d<__cpustruct_Neighbor > arg1(
      (__cpustruct_Neighbor *)args[1], extents[1]);
  __BrtFloat2 *arg2 = (__BrtFloat2 *)args[2];
  __cpustruct_Neighbor*arg3 = (__cpustruct_Neighbor*)args[3];
  unsigned int dim=dims[3];
  unsigned int newline=extents[3][dim-1];
  unsigned int ratio2 = extents[3][dim-1]/extents[2][dim-1];
  unsigned int scale2=extents[2][dim-1]/extents[3][dim-1];
  if (scale2<1) scale2 = 1;
  unsigned int ratioiter2 = 0;
  if (ratio2) ratioiter2 = mapbegin%ratio2;
  unsigned int iter2 = getIndexOf(mapbegin,extents[2], dim, extents[3]);
  arg3+=mapbegin;
  unsigned int i=0; 
  while (i<mapextent) {
    __computeNeighbors_cpu_inner (
      arg0,
      arg1,
      *(arg2 + iter2),
      *arg3);
    i++;
    if (++ratioiter2>=ratio2){
      ratioiter2=0;
      iter2+=scale2;
    }
    ++arg3;
    if ((mapbegin+i)%newline==0) {
      iter2=getIndexOf(i+mapbegin,extents[2],dim, extents[3]);
    }
  }
}

void  computeNeighbors (::brook::stream tgather,
		::brook::stream ugather,
		::brook::stream i,
		::brook::stream v) {
  static const void *__computeNeighbors_fp[] = {
     "fp30", __computeNeighbors_fp30,
     "arb", __computeNeighbors_arb,
     "ps20", __computeNeighbors_ps20,
     "cpu", (void *) __computeNeighbors_cpu,
     NULL, NULL };
  static __BRTKernel k(__computeNeighbors_fp);

  k->PushGatherStream(tgather);
  k->PushGatherStream(ugather);
  k->PushStream(i);
  k->PushOutput(v);
  k->Map();

}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __copyFinalTriangles_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c1, 1, -2.5, 0, -1.5\n"
				"    def c2, 0.333333, 0.5, 0, 3\n"
				"    dcl t0.xy\n"
				"    dcl t1.x\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    texld r0, t0, s0\n"
				"    texld r7, t0, s2\n"
				"    texld r2, t0, s1\n"
				"    mad r7.w, t1.x, c0.x, c0.z\n"
				"    mul r0.w, r7.w, c2.x\n"
				"    frc r7.w, r0.w\n"
				"    mad r7.w, r7.w, c2.w, c2.y\n"
				"    frc r0.w, r7.w\n"
				"    add r7.w, r7.w, -r0.w\n"
				"    add r0.w, r7.w, c1.y\n"
				"    mov r1.w, c1.x\n"
				"    cmp_pp r0.w, r0.w, c2.z, r1.w\n"
				"    add r2.w, r7.w, c1.w\n"
				"    mov r1.w, c2.z\n"
				"    cmp_pp r9.w, r2.w, c1.x, r1.w\n"
				"    mov r1.w, c1.x\n"
				"    cmp_pp r2.w, r2.w, c2.z, r1.w\n"
				"    mul_pp r0.w, r0.w, r9.w\n"
				"    cmp r7.xyz, -r0.w, r0, r7\n"
				"    add r7.w, -r7.w, c2.y\n"
				"    cmp_pp r7.w, r7.w, c2.z, r1.w\n"
				"    mul_pp r2.w, r2.w, r7.w\n"
				"    cmp r4.xyz, -r2.w, r7, r2\n"
				"    mov r4.w, c2.z\n"
				"    mov oC0, r4\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:2\n"
				"//s:0:tri\n"
				"//oi:3:triList\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(2, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kOutputInterpolant_Position)
				.output(2, 0)
			)
		);
	static const void* __copyFinalTriangles_ps20 = &__copyFinalTriangles_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __copyFinalTriangles_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_tri : TEXUNIT0\n"
				"#semantic main.__structsampler1_tri : TEXUNIT1\n"
				"#semantic main.__structsampler2_tri : TEXUNIT2\n"
				"#semantic main._const_triList_invscalebias : C0\n"
				"#semantic main.__workspace : C1\n"
				"#var samplerRECT __structsampler0_tri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_tri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_tri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var float4 _const_triList_invscalebias : C0 :  : 5 : 1\n"
				"#var float4 __workspace : C1 :  : 7 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 4 : 1\n"
				"#var float2 _tex_triList_pos : $vin.TEXCOORD1 : TEX1 : 6 : 1\n"
				"DECLARE _const_triList_invscalebias;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1.xyz, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, f[TEX1].xyxx;\n"
				"SLTR H0.x, R0.x, {0}.x;\n"
				"MULR R0.x, R0.x, {0.33333334}.x;\n"
				"FRCR R0.x, |R0.x|;\n"
				"MULR R0.x, R0.x, {3}.x;\n"
				"MOVR R0.y, R0.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.y(GT.x), -R0.x;\n"
				"ADDR R0.y, R0.y, {0.5}.x;\n"
				"FLRR R0.y, R0.y;\n"
				"SLTR H0.x, R0.y, {1.5}.x;\n"
				"SGTR H0.y, R0.y, {0.5}.x;\n"
				"MULX H0.z, H0.y, H0.x;\n"
				"MOVXC HC.x, H0.z;\n"
				"MOVR o[COLR].xyz(GT.x), R1.xyzx;\n"
				"MADX H0.x, -H0.y, H0.x, {1}.x;\n"
				"SLTR H0.y, R0.y, {2.5}.x;\n"
				"SGER H0.z, R0.y, {1.5}.x;\n"
				"MULX H0.y, H0.z, H0.y;\n"
				"MULX H0.y, H0.x, H0.y;\n"
				"TEX R0.xyz, f[TEX0].xyxx, TEX2, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xyz(GT.x), R0.xyzx;\n"
				"MOVR o[COLR].w, {0, 0, 0, 0}.w;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:2\n"
				"##s:0:tri\n"
				"##oi:3:triList\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(2, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kOutputInterpolant_Position)
				.output(2, 0)
			)
		);
	static const void* __copyFinalTriangles_fp30 = &__copyFinalTriangles_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __copyFinalTriangles_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = {1, -2.5, 0, -1.5};\n"
				"PARAM c2 = {0.333333, 0.5, 0, 3};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r2;\n"
				"TEMP r4;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[0], RECT;\n"
				"TEX r7, t0, texture[2], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"MAD r7.w, t1.x, c0.x, c0.z;\n"
				"MUL r0.w, r7.w, c2.x;\n"
				"FRC r7.w, r0.w;\n"
				"MAD r7.w, r7.w, c2.w, c2.y;\n"
				"FRC r0.w, r7.w;\n"
				"ADD r7.w, r7.w, -r0.w;\n"
				"ADD r0.w, r7.w, c1.y;\n"
				"MOV r1.w, c1.x;\n"
				"CMP r0.w, r0.w, r1.w, c2.z;\n"
				"ADD r2.w, r7.w, c1.w;\n"
				"MOV r1.w, c2.z;\n"
				"CMP r9.w, r2.w, r1.w, c1.x;\n"
				"MOV r1.w, c1.x;\n"
				"CMP r2.w, r2.w, r1.w, c2.z;\n"
				"MUL r0.w, r0.w, r9.w;\n"
				"CMP r7.xyz, -r0.w, r7, r0;\n"
				"ADD r7.w, -r7.w, c2.y;\n"
				"CMP r7.w, r7.w, r1.w, c2.z;\n"
				"MUL r2.w, r2.w, r7.w;\n"
				"CMP r4.xyz, -r2.w, r2, r7;\n"
				"MOV r4.w, c2.z;\n"
				"MOV oC0, r4;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:2\n"
				"##s:0:tri\n"
				"##oi:3:triList\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(2, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kOutputInterpolant_Position)
				.output(2, 0)
			)
		);
	static const void* __copyFinalTriangles_arb = &__copyFinalTriangles_arb_desc;
}

void __copyFinalTriangles_cpu_inner (const __cpustruct_STri &tri,
                                      __BrtFloat3  &triList,
                                      const __BrtFloat4 &__indexof_triList){
  __BrtFloat1  whichVertex = __round_cpu_inner(__fmod_cpu_inner((__indexof_triList).swizzle1(maskX),__BrtFloat1((float)3)));

  triList = tri.A.swizzle3(maskX, maskY, maskZ);
  if (whichVertex > __BrtFloat1(0.500000f) && whichVertex < __BrtFloat1(1.500000f))
    triList = tri.B.swizzle3(maskX, maskY, maskZ);
  else
    if (whichVertex >= __BrtFloat1(1.500000f) && whichVertex < __BrtFloat1(2.500000f))
      triList = tri.C.swizzle3(maskX, maskY, maskZ);
}
void  __copyFinalTriangles_cpu (const std::vector<void *>&args,
                                const std::vector<const unsigned int *>&extents,
                                const std::vector<unsigned int>&dims,
                                unsigned int mapbegin, 
                                unsigned int mapextent) {
  __cpustruct_STri*arg0 = (__cpustruct_STri*)args[0];
  __BrtFloat3 *arg1 = (__BrtFloat3 *)args[1];
  unsigned int dim=dims[1];
  unsigned int newline=extents[1][dim-1];
  unsigned int ratio0 = extents[1][dim-1]/extents[0][dim-1];
  unsigned int scale0=extents[0][dim-1]/extents[1][dim-1];
  if (scale0<1) scale0 = 1;
  unsigned int ratioiter0 = 0;
  if (ratio0) ratioiter0 = mapbegin%ratio0;
  unsigned int iter0 = getIndexOf(mapbegin,extents[0], dim, extents[1]);
  arg1+=mapbegin;
  ;
__BrtFloat4 indexof1 = computeIndexOf(mapbegin, extents[1], dims[1], extents[1]);
  unsigned int i=0; 
  while (i<mapextent) {
    __copyFinalTriangles_cpu_inner (
      *(arg0 + iter0),
      *arg1,
      indexof1);
    i++;
    if (++ratioiter0>=ratio0){
      ratioiter0=0;
      iter0+=scale0;
    }
    ++arg1;
indexof1.unsafeGetAt(0)++;
    if ((mapbegin+i)%newline==0) {
      iter0=getIndexOf(i+mapbegin,extents[0],dim, extents[1]);
      indexof1 = computeReferenceIndexOf(i+mapbegin, extents[1],dim);
    }
  }
}

void  copyFinalTriangles (::brook::stream tri,
		::brook::stream triList) {
  static const void *__copyFinalTriangles_fp[] = {
     "fp30", __copyFinalTriangles_fp30,
     "arb", __copyFinalTriangles_arb,
     "ps20", __copyFinalTriangles_ps20,
     "cpu", (void *) __copyFinalTriangles_cpu,
     NULL, NULL };
  static __BRTKernel k(__copyFinalTriangles_fp);

  k->PushStream(tri);
  k->PushOutput(triList);
  k->Map();

}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __writeFinalTriangles_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -8192, 0.333333, 0\n"
				"    def c3, 3, -1.5, -2.5, 0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.x\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    texld r0, t0, s3\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r8.x, r6.x, c0.x, c0.z\n"
				"    mad r8.y, r6.y, c0.y, c0.w\n"
				"    texld r3, r8, s0\n"
				"    texld r10, r8, s2\n"
				"    texld r5, r8, s1\n"
				"    mad r10.w, t1.x, c1.x, c1.z\n"
				"    mul r3.w, r10.w, c2.z\n"
				"    frc r10.w, r3.w\n"
				"    mad r10.w, r10.w, c3.x, c3.w\n"
				"    frc r3.w, r10.w\n"
				"    add r10.w, r10.w, -r3.w\n"
				"    add r3.w, r10.w, c3.z\n"
				"    cmp_pp r3.w, r3.w, c2.w, c2.x\n"
				"    add r5.w, r10.w, c3.y\n"
				"    cmp_pp r0.w, r5.w, c2.x, c2.w\n"
				"    cmp_pp r5.w, r5.w, c2.w, c2.x\n"
				"    mul_pp r3.w, r3.w, r0.w\n"
				"    cmp r10.xyz, -r3.w, r3, r10\n"
				"    add r10.w, -r10.w, c3.w\n"
				"    cmp_pp r10.w, r10.w, c2.w, c2.x\n"
				"    mul_pp r5.w, r5.w, r10.w\n"
				"    cmp r7.xyz, -r5.w, r10, r5\n"
				"    mov r7.w, c2.w\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:3\n"
				"//c:0:triangles\n"
				"//s:2:indices\n"
				"//oi:3:triList\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(3, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __writeFinalTriangles_ps20 = &__writeFinalTriangles_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __writeFinalTriangles_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main._tex_indices : TEXUNIT3\n"
				"#semantic main._const_triList_invscalebias : C1\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT _tex_indices : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var float4 _const_triList_invscalebias : C1 :  : 5 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_indices_pos : $vin.TEXCOORD0 : TEX0 : 3 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 4 : 1\n"
				"#var float2 _tex_triList_pos : $vin.TEXCOORD1 : TEX1 : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE _const_triList_invscalebias;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX3, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {8192, 8192}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.x, f[TEX1].xyxx;\n"
				"SLTR H0.w, R1.x, {0}.x;\n"
				"MULR R1.x, R1.x, {0.33333334}.x;\n"
				"FRCR R1.x, |R1.x|;\n"
				"MULR R1.x, R1.x, {3}.x;\n"
				"MOVR R1.y, R1.x;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.y(GT.x), -R1.x;\n"
				"ADDR R1.y, R1.y, {0.5}.x;\n"
				"FLRR R1.y, R1.y;\n"
				"SLTR H0.w, R1.y, {1.5}.x;\n"
				"SGTR H1.x, R1.y, {0.5}.x;\n"
				"MULX H1.y, H1.x, H0.w;\n"
				"MADX H0.w, -H1.x, H0.w, {1}.x;\n"
				"SLTR H1.x, R1.y, {2.5}.x;\n"
				"SGER H1.z, R1.y, {1.5}.x;\n"
				"MULX H1.x, H1.z, H1.x;\n"
				"MULX H1.x, H0.w, H1.x;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX0, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX1, RECT;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVXC HC.x, H1.y;\n"
				"MOVR o[COLR].xyz(GT.x), R2.xyzx;\n"
				"TEX R0.xyz, R1.xyxx, TEX2, RECT;\n"
				"MOVXC HC.x, H1.x;\n"
				"MOVR o[COLR].xyz(GT.x), R0.xyzx;\n"
				"MOVR o[COLR].w, {0, 0, 0, 0}.w;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##c:0:triangles\n"
				"##s:2:indices\n"
				"##oi:3:triList\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(3, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __writeFinalTriangles_fp30 = &__writeFinalTriangles_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __writeFinalTriangles_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -8192, 0.333333, 0};\n"
				"PARAM c3 = {3, -1.5, -2.5, 0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"TEX r0, t0, texture[3], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r8.x, r6.x, c0.x, c0.z;\n"
				"MAD r8.y, r6.y, c0.y, c0.w;\n"
				"TEX r3, r8, texture[0], RECT;\n"
				"TEX r10, r8, texture[2], RECT;\n"
				"TEX r5, r8, texture[1], RECT;\n"
				"MAD r10.w, t1.x, c1.x, c1.z;\n"
				"MUL r3.w, r10.w, c2.z;\n"
				"FRC r10.w, r3.w;\n"
				"MAD r10.w, r10.w, c3.x, c3.w;\n"
				"FRC r3.w, r10.w;\n"
				"ADD r10.w, r10.w, -r3.w;\n"
				"ADD r3.w, r10.w, c3.z;\n"
				"CMP r3.w, r3.w, c2.x, c2.w;\n"
				"ADD r5.w, r10.w, c3.y;\n"
				"CMP r0.w, r5.w, c2.w, c2.x;\n"
				"CMP r5.w, r5.w, c2.x, c2.w;\n"
				"MUL r3.w, r3.w, r0.w;\n"
				"CMP r10.xyz, -r3.w, r10, r3;\n"
				"ADD r10.w, -r10.w, c3.w;\n"
				"CMP r10.w, r10.w, c2.x, c2.w;\n"
				"MUL r5.w, r5.w, r10.w;\n"
				"CMP r7.xyz, -r5.w, r5, r10;\n"
				"MOV r7.w, c2.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:3\n"
				"##c:0:triangles\n"
				"##s:2:indices\n"
				"##oi:3:triList\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(3, kOutputConstant_Indexof)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
		);
	static const void* __writeFinalTriangles_arb = &__writeFinalTriangles_arb_desc;
}

void __writeFinalTriangles_cpu_inner (const __BrtArray2d<__cpustruct_STri > &triangles,
                                       const __BrtFloat2  &indices,
                                       __BrtFloat3  &triList,
                                       const __BrtFloat4 &__indexof_triList){
  __BrtFloat2  zero2 = __BrtFloat1((float)0);
  __BrtFloat2  ind = (indices >= __BrtFloat1((float)0) && indices < __BrtFloat1((float)8192)).questioncolon(indices,zero2);

  __copyFinalTriangles_cpu_inner(triangles[ind],triList,__indexof_triList);
}
void  __writeFinalTriangles_cpu (const std::vector<void *>&args,
                                 const std::vector<const unsigned int *>&extents,
                                 const std::vector<unsigned int>&dims,
                                 unsigned int mapbegin, 
                                 unsigned int mapextent) {
  __BrtArray2d<__cpustruct_STri > arg0(
      (__cpustruct_STri *)args[0], extents[0]);
  __BrtFloat2 *arg1 = (__BrtFloat2 *)args[1];
  __BrtFloat3 *arg2 = (__BrtFloat3 *)args[2];
  unsigned int dim=dims[2];
  unsigned int newline=extents[2][dim-1];
  unsigned int ratio1 = extents[2][dim-1]/extents[1][dim-1];
  unsigned int scale1=extents[1][dim-1]/extents[2][dim-1];
  if (scale1<1) scale1 = 1;
  unsigned int ratioiter1 = 0;
  if (ratio1) ratioiter1 = mapbegin%ratio1;
  unsigned int iter1 = getIndexOf(mapbegin,extents[1], dim, extents[2]);
  arg2+=mapbegin;
  ;
__BrtFloat4 indexof2 = computeIndexOf(mapbegin, extents[2], dims[2], extents[2]);
  unsigned int i=0; 
  while (i<mapextent) {
    __writeFinalTriangles_cpu_inner (
      arg0,
      *(arg1 + iter1),
      *arg2,
      indexof2);
    i++;
    if (++ratioiter1>=ratio1){
      ratioiter1=0;
      iter1+=scale1;
    }
    ++arg2;
indexof2.unsafeGetAt(0)++;
    if ((mapbegin+i)%newline==0) {
      iter1=getIndexOf(i+mapbegin,extents[1],dim, extents[2]);
      indexof2 = computeReferenceIndexOf(i+mapbegin, extents[2],dim);
    }
  }
}

void  writeFinalTriangles (::brook::stream triangles,
		::brook::stream indices,
		::brook::stream triList) {
  static const void *__writeFinalTriangles_fp[] = {
     "fp30", __writeFinalTriangles_fp30,
     "arb", __writeFinalTriangles_arb,
     "ps20", __writeFinalTriangles_ps20,
     "cpu", (void *) __writeFinalTriangles_cpu,
     NULL, NULL };
  static __BRTKernel k(__writeFinalTriangles_fp);

  k->PushGatherStream(triangles);
  k->PushStream(indices);
  k->PushOutput(triList);
  k->Map();

}





__BrtFloat4 __addN_cpu_inner (const __BrtFloat3  &inxyz,
                        const __BrtFloat1  &inw){
  __BrtFloat4  x = __BrtFloat4 (inxyz.swizzle1(maskX),inxyz.swizzle1(maskY),inxyz.swizzle1(maskZ),inw);

  return x;
}





__BrtFloat4 __identity_cpu_inner (const __BrtFloat4  &a,
                            const __BrtFloat1  &b){
  return a;
}





__BrtFloat3 __ident3_cpu_inner (const __BrtFloat3  &a,
                          const __BrtFloat1  &b){
  return a;
}



namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __splitTriangles_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 4, 0\n"
				"    def c3, 5.5, 0.515625, 0.579534, 4.5\n"
				"    def c4, 0.625, -8, -2, -4\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s3\n"
				"    texld r0, r3, s9\n"
				"    texld r7, r10, s2\n"
				"    texld r2, r10, s0\n"
				"    texld r9, r10, s1\n"
				"    texld r4, r3, s10\n"
				"    texld r11, r3, s11\n"
				"    add r9.w, r5.w, c4.z\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r5.w, r5.w, c4.y\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add_pp r5.w, r9.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.w, c2.x\n"
				"    add r9.w, r0.w, c4.w\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r0.w, r0.w, c4.y\n"
				"    add r5.xyz, r5, r0\n"
				"    abs r10.w, r0.w\n"
				"    cmp_pp r1.w, -r10.w, c2.x, c2.w\n"
				"    add_pp r9.w, r9.w, r1.w\n"
				"    cmp_pp r9.w, -r9.w, c2.w, c2.x\n"
				"    mul r7.w, r7.w, r2.w\n"
				"    abs r7.w, r7.w\n"
				"    cmp_pp r7.w, -r7.w, c2.w, c2.x\n"
				"    mul r9.w, r9.w, r7.w\n"
				"    mul r5.w, r5.w, r9.w\n"
				"    mul r4.w, r4.w, r5.w\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    mul r5.w, r11.w, r4.w\n"
				"    abs r5.w, r5.w\n"
				"    dp3 r4.w, r4, r4\n"
				"    add r4.xyz, r4, r5\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    dp3 r11.w, r11, r11\n"
				"    add r4.xyz, r11, r4\n"
				"    cmp_pp r9.w, -r11.w, c2.w, c2.x\n"
				"    add r4.w, r4.w, r9.w\n"
				"    add r9.w, r4.w, c2.z\n"
				"    mov r4.w, -r9.w\n"
				"    rcp r9.w, r9.w\n"
				"    add r0.w, r4.w, c3.w\n"
				"    add r4.w, r4.w, c3.x\n"
				"    cmp r3.w, r0.w, c3.y, c3.z\n"
				"    cmp r4.w, r4.w, r3.w, c4.x\n"
				"    mul r10.xyz, r2, r4.w\n"
				"    add r4.w, -r4.w, c2.x\n"
				"    mul r10.w, r4.w, r9.w\n"
				"    add r6.xyz, r9, r4\n"
				"    add r7.xyz, r7, r6\n"
				"    mad r7.xyz, r7, r10.w, r10\n"
				"    cmp r1.xyz, -r5.w, r2, r7\n"
				"    mov r1.w, r2.w\n"
				"    mov oC0, r1\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 0.5, 0\n"
				"    def c3, 0.25, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s3\n"
				"    texld r0, r10, s2\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r10, s0\n"
				"    lrp r6.xyz, c2.z, r5, r0\n"
				"    abs r6.w, r2.w\n"
				"    lrp r10, c2.z, r7, r2\n"
				"    lrp r0.xyz, c3.x, r6, r10\n"
				"    mov r0.w, c2.x\n"
				"    cmp r2, -r6.w, r10, r0\n"
				"    mov oC0, r2\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 4, 0\n"
				"    def c3, 5.5, 0.515625, 0.579534, 4.5\n"
				"    def c4, 0.625, -8, -4, -2\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s3\n"
				"    texld r0, r3, s6\n"
				"    texld r7, r10, s0\n"
				"    texld r2, r10, s1\n"
				"    texld r9, r10, s2\n"
				"    texld r4, r3, s5\n"
				"    texld r11, r3, s4\n"
				"    add r9.w, r5.w, c4.z\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r5.w, r5.w, c4.y\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add_pp r5.w, r9.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.w, c2.x\n"
				"    add r9.w, r0.w, c4.w\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r0.w, r0.w, c4.y\n"
				"    add r5.xyz, r5, r0\n"
				"    abs r10.w, r0.w\n"
				"    cmp_pp r1.w, -r10.w, c2.x, c2.w\n"
				"    add_pp r9.w, r9.w, r1.w\n"
				"    cmp_pp r9.w, -r9.w, c2.w, c2.x\n"
				"    mul r7.w, r7.w, r2.w\n"
				"    abs r7.w, r7.w\n"
				"    cmp_pp r7.w, -r7.w, c2.w, c2.x\n"
				"    mul r7.w, r9.w, r7.w\n"
				"    mul r5.w, r5.w, r7.w\n"
				"    mul r4.w, r4.w, r5.w\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    mul r5.w, r11.w, r4.w\n"
				"    abs r5.w, r5.w\n"
				"    dp3 r4.w, r4, r4\n"
				"    add r4.xyz, r4, r5\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    dp3 r11.w, r11, r11\n"
				"    add r4.xyz, r11, r4\n"
				"    cmp_pp r7.w, -r11.w, c2.w, c2.x\n"
				"    add r4.w, r4.w, r7.w\n"
				"    add r7.w, r4.w, c2.z\n"
				"    mov r4.w, -r7.w\n"
				"    rcp r7.w, r7.w\n"
				"    add r0.w, r4.w, c3.w\n"
				"    add r4.w, r4.w, c3.x\n"
				"    cmp r3.w, r0.w, c3.y, c3.z\n"
				"    cmp r4.w, r4.w, r3.w, c4.x\n"
				"    mul r10.xyz, r2, r4.w\n"
				"    add r4.w, -r4.w, c2.x\n"
				"    mul r10.w, r4.w, r7.w\n"
				"    add r6.xyz, r7, r4\n"
				"    add r9.xyz, r9, r6\n"
				"    mad r9.xyz, r9, r10.w, r10\n"
				"    cmp r1.xyz, -r5.w, r2, r9\n"
				"    mov r1.w, r2.w\n"
				"    mov oC0, r1\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:2:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 0.5, 0\n"
				"    def c3, 0.25, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s6\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s6\n"
				"    texld r0, r10, s0\n"
				"    texld r7, r10, s2\n"
				"    texld r2, r10, s1\n"
				"    lrp r6.xyz, c2.z, r5, r0\n"
				"    abs r6.w, r2.w\n"
				"    lrp r10, c2.z, r7, r2\n"
				"    lrp r0.xyz, c3.x, r6, r10\n"
				"    mov r0.w, c2.x\n"
				"    cmp r2, -r6.w, r10, r0\n"
				"    mov oC0, r2\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:3:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 4, 0\n"
				"    def c3, 5.5, 0.515625, 0.579534, 4.5\n"
				"    def c4, 0.625, -8, -2, -4\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s9\n"
				"    texld r0, r3, s6\n"
				"    texld r7, r10, s1\n"
				"    texld r2, r10, s2\n"
				"    texld r9, r10, s0\n"
				"    texld r4, r3, s7\n"
				"    texld r11, r3, s8\n"
				"    add r9.w, r5.w, c4.z\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r5.w, r5.w, c4.y\n"
				"    abs r5.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.x, c2.w\n"
				"    add_pp r5.w, r9.w, r5.w\n"
				"    cmp_pp r5.w, -r5.w, c2.w, c2.x\n"
				"    add r9.w, r0.w, c4.w\n"
				"    abs r9.w, r9.w\n"
				"    cmp_pp r9.w, -r9.w, c2.x, c2.w\n"
				"    add r0.w, r0.w, c4.y\n"
				"    add r5.xyz, r5, r0\n"
				"    abs r10.w, r0.w\n"
				"    cmp_pp r1.w, -r10.w, c2.x, c2.w\n"
				"    add_pp r9.w, r9.w, r1.w\n"
				"    cmp_pp r9.w, -r9.w, c2.w, c2.x\n"
				"    mul r7.w, r7.w, r2.w\n"
				"    abs r7.w, r7.w\n"
				"    cmp_pp r7.w, -r7.w, c2.w, c2.x\n"
				"    mul r9.w, r9.w, r7.w\n"
				"    mul r5.w, r5.w, r9.w\n"
				"    mul r4.w, r4.w, r5.w\n"
				"    abs r4.w, r4.w\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    mul r5.w, r11.w, r4.w\n"
				"    abs r5.w, r5.w\n"
				"    mov r7.w, -r5.w\n"
				"    dp3 r4.w, r11, r11\n"
				"    cmp_pp r4.w, -r4.w, c2.w, c2.x\n"
				"    dp3 r5.w, r4, r4\n"
				"    add r4.xyz, r4, r5\n"
				"    cmp_pp r11.w, -r5.w, c2.w, c2.x\n"
				"    add r4.w, r4.w, r11.w\n"
				"    add r11.w, r4.w, c2.z\n"
				"    mov r4.w, -r11.w\n"
				"    rcp r11.w, r11.w\n"
				"    add r9.w, r4.w, c3.w\n"
				"    add r4.w, r4.w, c3.x\n"
				"    cmp r9.w, r9.w, c3.y, c3.z\n"
				"    cmp r4.w, r4.w, r9.w, c4.x\n"
				"    mul r0.xyz, r2, r4.w\n"
				"    add r4.w, -r4.w, c2.x\n"
				"    mul r0.w, r4.w, r11.w\n"
				"    add r3.xyz, r11, r4\n"
				"    add r10.xyz, r9, r3\n"
				"    add r7.xyz, r7, r10\n"
				"    mad r7.xyz, r7, r0.w, r0\n"
				"    cmp r6.xyz, r7.w, r2, r7\n"
				"    mov r6.w, r2.w\n"
				"    mov oC0, r6\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:4:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c2, 1, -2048, 0.5, 0\n"
				"    def c3, 0.25, 0, 0, 0\n"
				"    dcl t0.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s12\n"
				"    add r7.xy, r0, c2.y\n"
				"    cmp_pp r2.xy, r7, c2.w, c2.x\n"
				"    cmp_pp r9.xy, r0, c2.x, c2.w\n"
				"    mul_pp r4.xy, r2, r9\n"
				"    cmp r6.xy, -r4, c2.w, r0\n"
				"    mad r3.x, r6.x, c1.x, c1.z\n"
				"    mad r3.y, r6.y, c1.y, c1.w\n"
				"    mad r10.x, r6.x, c0.x, c0.z\n"
				"    mad r10.y, r6.y, c0.y, c0.w\n"
				"    texld r5, r3, s9\n"
				"    texld r0, r10, s1\n"
				"    texld r7, r10, s0\n"
				"    texld r2, r10, s2\n"
				"    lrp r6.xyz, c2.z, r5, r0\n"
				"    lrp r10, c2.z, r2, r7\n"
				"    lrp r5.xyz, c3.x, r6, r10\n"
				"    abs r7.w, r2.w\n"
				"    mov r5.w, c2.x\n"
				"    cmp r4, -r7.w, r10, r5\n"
				"    mov oC0, r4\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:4\n"
				"//c:0:triangles\n"
				"//c:0:neighbors\n"
				"//s:2:i\n"
				"//o:0:splittri\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:5:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
		);
	static const void* __splitTriangles_ps20 = &__splitTriangles_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __splitTriangles_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX8, RECT;\n"
				"TEX R2.xyz, R1.xyxx, TEX7, RECT;\n"
				"DP3R R0.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R0.x, {0}.x;\n"
				"ADDR R0.x, {4}.x, H0.x;\n"
				"TEX R3.xyz, R1.xyxx, TEX4, RECT;\n"
				"TEX R4, R1.xyxx, TEX11, RECT;\n"
				"SNER H0.x, R4.w, {0}.x;\n"
				"DP3R R0.y, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.y, R0.y, {0}.x;\n"
				"ADDR R0.y, {4}.x, H0.y;\n"
				"DP3R R0.z, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.z, {0}.x;\n"
				"ADDR R0.x, R0.x, H0.y;\n"
				"TEX R2.xyz, R1.xyxx, TEX5, RECT;\n"
				"TEX R3, R1.xyxx, TEX10, RECT;\n"
				"SNER H0.y, R3.w, {0}.x;\n"
				"DP3R R0.z, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.z, R0.z, {0}.x;\n"
				"ADDR R0.y, R0.y, H0.z;\n"
				"DP3R R0.z, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.z, R0.z, {0}.x;\n"
				"ADDR R0.z, {4}.x, H0.z;\n"
				"DP3R R0.w, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.z, R0.w, {0}.x;\n"
				"ADDR R0.z, R0.z, H0.z;\n"
				"MOVR R2.z, R0.x;\n"
				"MOVR R2.y, R0.y;\n"
				"MOVR R2.x, R0.z;\n"
				"SGTR H1.xyz, R2.xyzx, {4.5, 4.5, 4.5}.xyzx;\n"
				"SGTR H2.xyz, R2.xyzx, {5.5, 5.5, 5.5}.xyzx;\n"
				"MOVR R0.xyz, {0.515625, 0.515625, 0.515625}.xyzx;\n"
				"MOVXC HC.xyz, H1.xyzx;\n"
				"MOVR R0.xyz(GT.xyzx), {0.57953399, 0.57953399, 0.57953399}.xyzx;\n"
				"MOVXC HC.xyz, H2.xyzx;\n"
				"MOVR R0.xyz(GT.xyzx), {0.625, 0.625, 0.625}.xyzx;\n"
				"TEX R5, R1.xyxx, TEX9, RECT;\n"
				"TEX R6, R1.xyxx, TEX3, RECT;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"ADDR R5.xyz, R6.xyzx, R5.xyzx;\n"
				"ADDR R3.xyz, R5.xyzx, R3.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, R4.xyzx;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"SEQR H0.w, R6.w, {8}.x;\n"
				"SEQR H1.x, R6.w, {2}.x;\n"
				"ADDX H0.w, H1.x, H0.w;\n"
				"MINX H0.w, H0.w, {1}.x;\n"
				"TEX R4, R1.xyxx, TEX0, RECT;\n"
				"TEX R5, R1.xyxx, TEX2, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX1, RECT;\n"
				"ADDR R1.xyz, R3.xyzx, R1.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, R5.xyzx;\n"
				"SNER H1.x, R5.w, {0}.x;\n"
				"SNER H1.y, R4.w, {0}.x;\n"
				"MULX H1.x, H1.y, H1.x;\n"
				"MULX H0.z, H1.x, H0.z;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MULX H0.y, H0.w, H0.y;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"RCPR R3.x, R2.x;\n"
				"RCPR R3.y, R2.y;\n"
				"RCPR R3.z, R2.z;\n"
				"ADDR R2.xyz, {1}.x, -R0.xyzx;\n"
				"MULR R0.w, R2.x, R3.x;\n"
				"MULR R1.xyz, R0.w, R1.xyzx;\n"
				"MADR R1.xyz, R4.xyzx, R0.x, R1.xyzx;\n"
				"MOVR o[COLR], R4;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R1.xyzx;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX0, RECT;\n"
				"TEX R2, R1.xyxx, TEX1, RECT;\n"
				"ADDR R2, R2, -R0;\n"
				"MADR R2, {0.5}.x, R2, R0;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"TEX R0.xyz, R1.xyxx, TEX2, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX3, RECT;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R1.xyzx, R0.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"MADR R0.xyz, {0.25}.x, R0.xyzx, R2.xyzx;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2(GT.x), R0;\n"
				"MOVR o[COLR], R2;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_2 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0.xyz, R1.xyxx, TEX8, RECT;\n"
				"TEX R2, R1.xyxx, TEX4, RECT;\n"
				"SNER H0.x, R2.w, {0}.x;\n"
				"DP3R R0.x, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R0.x, {0}.x;\n"
				"ADDR R0.x, {4}.x, H0.y;\n"
				"TEX R3.xyz, R1.xyxx, TEX7, RECT;\n"
				"TEX R4, R1.xyxx, TEX5, RECT;\n"
				"SNER H0.y, R4.w, {0}.x;\n"
				"DP3R R0.y, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.z, R0.y, {0}.x;\n"
				"ADDR R0.x, R0.x, H0.z;\n"
				"DP3R R0.y, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.z, R0.y, {0}.x;\n"
				"ADDR R0.y, {4}.x, H0.z;\n"
				"TEX R3.xyz, R1.xyxx, TEX11, RECT;\n"
				"TEX R5.xyz, R1.xyxx, TEX10, RECT;\n"
				"DP3R R0.z, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.z, R0.z, {0}.x;\n"
				"ADDR R0.z, {4}.x, H0.z;\n"
				"DP3R R0.w, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.z, R0.w, {0}.x;\n"
				"ADDR R0.y, R0.y, H0.z;\n"
				"DP3R R0.w, R5.xyzx, R5.xyzx;\n"
				"SGTR H0.z, R0.w, {0}.x;\n"
				"ADDR R0.z, R0.z, H0.z;\n"
				"MOVR R3.z, R0.x;\n"
				"MOVR R3.y, R0.y;\n"
				"MOVR R3.x, R0.z;\n"
				"SGTR H1.xyz, R3.xyzx, {4.5, 4.5, 4.5}.xyzx;\n"
				"SGTR H2.xyz, R3.xyzx, {5.5, 5.5, 5.5}.xyzx;\n"
				"MOVR R0.xyz, {0.515625, 0.515625, 0.515625}.xyzx;\n"
				"MOVXC HC.xyz, H1.xyzx;\n"
				"MOVR R0.xyz(GT.xyzx), {0.57953399, 0.57953399, 0.57953399}.xyzx;\n"
				"MOVXC HC.xyz, H2.xyzx;\n"
				"MOVR R0.xyz(GT.xyzx), {0.625, 0.625, 0.625}.xyzx;\n"
				"TEX R5, R1.xyxx, TEX6, RECT;\n"
				"TEX R6, R1.xyxx, TEX3, RECT;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {2}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"ADDR R5.xyz, R6.xyzx, R5.xyzx;\n"
				"ADDR R4.xyz, R5.xyzx, R4.xyzx;\n"
				"ADDR R2.xyz, R4.xyzx, R2.xyzx;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"SEQR H0.w, R6.w, {8}.x;\n"
				"SEQR H1.x, R6.w, {4}.x;\n"
				"ADDX H0.w, H1.x, H0.w;\n"
				"MINX H0.w, H0.w, {1}.x;\n"
				"TEX R4, R1.xyxx, TEX1, RECT;\n"
				"TEX R5, R1.xyxx, TEX0, RECT;\n"
				"ADDR R2.xyz, R2.xyzx, R5.xyzx;\n"
				"SNER H1.x, R5.w, {0}.x;\n"
				"TEX R1.xyz, R1.xyxx, TEX2, RECT;\n"
				"ADDR R1.xyz, R2.xyzx, R1.xyzx;\n"
				"SNER H1.y, R4.w, {0}.x;\n"
				"MULX H1.y, H1.x, H1.y;\n"
				"MULX H0.z, H1.y, H0.z;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MULX H0.y, H0.w, H0.y;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"RCPR R2.x, R3.x;\n"
				"RCPR R2.y, R3.y;\n"
				"RCPR R2.z, R3.z;\n"
				"ADDR R3.xyz, {1}.x, -R0.xyzx;\n"
				"MULR R2.y, R3.xyzx, R2.xyzx;\n"
				"MULR R1.xyz, R2.y, R1.xyzx;\n"
				"MADR R1.xyz, R4.xyzx, R0.y, R1.xyzx;\n"
				"MOVR o[COLR], R4;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR o[COLR].xyz(GT.x), R1.xyzx;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_3 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX1, RECT;\n"
				"TEX R2, R1.xyxx, TEX2, RECT;\n"
				"ADDR R2, R2, -R0;\n"
				"MADR R2, {0.5}.x, R2, R0;\n"
				"SNER H0.x, R0.w, {0}.x;\n"
				"TEX R0.xyz, R1.xyxx, TEX0, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX6, RECT;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"MADR R0.xyz, {0.5}.x, R1.xyzx, R0.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"MADR R0.xyz, {0.25}.x, R0.xyzx, R2.xyzx;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2(GT.x), R0;\n"
				"MOVR o[COLR], R2;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_4 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX8, RECT;\n"
				"TEX R2, R1.xyxx, TEX7, RECT;\n"
				"SNER H0.x, R2.w, {0}.x;\n"
				"SNER H0.y, R0.w, {0}.x;\n"
				"DP3R R1.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.z, R1.w, {0}.x;\n"
				"ADDR R1.w, {4}.x, H0.z;\n"
				"TEX R3.xyz, R1.xyxx, TEX4, RECT;\n"
				"TEX R4.xyz, R1.xyxx, TEX5, RECT;\n"
				"DP3R R3.x, R3.xyzx, R3.xyzx;\n"
				"SGTR H0.z, R3.x, {0}.x;\n"
				"ADDR R3.x, {4}.x, H0.z;\n"
				"DP3R R3.y, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.z, R3.y, {0}.x;\n"
				"ADDR R1.w, R1.w, H0.z;\n"
				"TEX R5.xyz, R1.xyxx, TEX11, RECT;\n"
				"TEX R6.xyz, R1.xyxx, TEX10, RECT;\n"
				"DP3R R3.y, R5.xyzx, R5.xyzx;\n"
				"SGTR H0.z, R3.y, {0}.x;\n"
				"ADDR R3.y, {4}.x, H0.z;\n"
				"DP3R R3.z, R4.xyzx, R4.xyzx;\n"
				"SGTR H0.z, R3.z, {0}.x;\n"
				"ADDR R3.x, R3.x, H0.z;\n"
				"DP3R R3.z, R6.xyzx, R6.xyzx;\n"
				"SGTR H0.z, R3.z, {0}.x;\n"
				"ADDR R3.y, R3.y, H0.z;\n"
				"MOVR R4.z, R1.w;\n"
				"MOVR R4.y, R3.x;\n"
				"MOVR R4.x, R3.y;\n"
				"SGTR H1.xyz, R4.xyzx, {4.5, 4.5, 4.5}.xyzx;\n"
				"SGTR H2.xyz, R4.xyzx, {5.5, 5.5, 5.5}.xyzx;\n"
				"MOVR R3.xyz, {0.515625, 0.515625, 0.515625}.xyzx;\n"
				"MOVXC HC.xyz, H1.xyzx;\n"
				"MOVR R3.xyz(GT.xyzx), {0.57953399, 0.57953399, 0.57953399}.xyzx;\n"
				"MOVXC HC.xyz, H2.xyzx;\n"
				"MOVR R3.xyz(GT.xyzx), {0.625, 0.625, 0.625}.xyzx;\n"
				"TEX R5, R1.xyxx, TEX6, RECT;\n"
				"TEX R6, R1.xyxx, TEX9, RECT;\n"
				"SEQR H0.z, R5.w, {8}.x;\n"
				"SEQR H0.w, R5.w, {4}.x;\n"
				"ADDX H0.z, H0.w, H0.z;\n"
				"ADDR R5.xyz, R6.xyzx, R5.xyzx;\n"
				"ADDR R2.xyz, R5.xyzx, R2.xyzx;\n"
				"ADDR R0.xyz, R2.xyzx, R0.xyzx;\n"
				"MINX H0.z, H0.z, {1}.x;\n"
				"SEQR H0.w, R6.w, {8}.x;\n"
				"SEQR H1.x, R6.w, {2}.x;\n"
				"ADDX H0.w, H1.x, H0.w;\n"
				"MINX H0.w, H0.w, {1}.x;\n"
				"TEX R2, R1.xyxx, TEX2, RECT;\n"
				"TEX R5, R1.xyxx, TEX1, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX0, RECT;\n"
				"ADDR R0.xyz, R0.xyzx, R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, R5.xyzx;\n"
				"SNER H1.x, R5.w, {0}.x;\n"
				"SNER H1.y, R2.w, {0}.x;\n"
				"MULX H1.x, H1.y, H1.x;\n"
				"MULX H0.z, H1.x, H0.z;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MULX H0.x, H0.w, H0.x;\n"
				"MULX H0.y, H0.x, H0.y;\n"
				"RCPR R1.x, R4.x;\n"
				"RCPR R1.y, R4.y;\n"
				"RCPR R1.z, R4.z;\n"
				"ADDR R4.xyz, {1}.x, -R3.xyzx;\n"
				"MULR R1.z, R4.xyzx, R1.xyzx;\n"
				"MULR R0.xyz, R1.z, R0.xyzx;\n"
				"MADR R0.xyz, R2.xyzx, R3.z, R0.xyzx;\n"
				"MOVR o[COLR], R2;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR o[COLR].xyz(GT.x), R0.xyzx;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.triangles : TEXUNIT0\n"
				"#semantic main.__gatherconst_triangles : C0\n"
				"#semantic main.neighbors : TEXUNIT3\n"
				"#semantic main.__gatherconst_neighbors : C1\n"
				"#semantic main._tex_i : TEXUNIT12\n"
				"#semantic main.__workspace : C2\n"
				"#var samplerRECT triangles[0] : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT triangles[1] : TEXUNIT1 : texunit 1 : 0 : 1\n"
				"#var samplerRECT triangles[2] : TEXUNIT2 : texunit 2 : 0 : 1\n"
				"#var float4 __gatherconst_triangles : C0 :  : 1 : 1\n"
				"#var samplerRECT neighbors[0] : TEXUNIT3 : texunit 3 : 2 : 1\n"
				"#var samplerRECT neighbors[1] : TEXUNIT4 : texunit 4 : 2 : 1\n"
				"#var samplerRECT neighbors[2] : TEXUNIT5 : texunit 5 : 2 : 1\n"
				"#var samplerRECT neighbors[3] : TEXUNIT6 : texunit 6 : 2 : 1\n"
				"#var samplerRECT neighbors[4] : TEXUNIT7 : texunit 7 : 2 : 1\n"
				"#var samplerRECT neighbors[5] : TEXUNIT8 : texunit 8 : 2 : 1\n"
				"#var samplerRECT neighbors[6] : TEXUNIT9 : texunit 9 : 2 : 1\n"
				"#var samplerRECT neighbors[7] : TEXUNIT10 : texunit 10 : 2 : 1\n"
				"#var samplerRECT neighbors[8] : TEXUNIT11 : texunit 11 : 2 : 1\n"
				"#var float4 __gatherconst_neighbors : C1 :  : 3 : 1\n"
				"#var samplerRECT _tex_i : TEXUNIT12 : texunit 12 : 4 : 1\n"
				"#var float4 __workspace : C2 :  : 7 : 1\n"
				"#var float2 _tex_i_pos : $vin.TEXCOORD0 : TEX0 : 5 : 1\n"
				"#var float4 __output_5 : $vout.COLOR0 : COL : 6 : 1\n"
				"DECLARE __gatherconst_triangles;\n"
				"DECLARE __gatherconst_neighbors;\n"
				"DECLARE __workspace;\n"
				"TEX R0.xy, f[TEX0].xyxx, TEX12, RECT;\n"
				"SLTR H0.xy, R0.xyxx, {2048, 2048}.x;\n"
				"SGER H1.xy, R0.xyxx, {0, 0}.x;\n"
				"MULX H0.xy, H1.xyxx, H0.xyxx;\n"
				"MOVR R1.xy, {0, 0}.xyxx;\n"
				"MOVXC HC.xy, H0.xyxx;\n"
				"MOVR R1.xy(GT.xyxx), R0.xyxx;\n"
				"TEX R0, R1.xyxx, TEX0, RECT;\n"
				"TEX R2, R1.xyxx, TEX2, RECT;\n"
				"SNER H0.x, R2.w, {0}.x;\n"
				"ADDR R2, R2, -R0;\n"
				"MADR R0, {0.5}.x, R2, R0;\n"
				"TEX R2.xyz, R1.xyxx, TEX1, RECT;\n"
				"TEX R1.xyz, R1.xyxx, TEX9, RECT;\n"
				"ADDR R1.xyz, R1.xyzx, -R2.xyzx;\n"
				"MADR R1.xyz, {0.5}.x, R1.xyzx, R2.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"MADR R1.xyz, {0.25}.x, R1.xyzx, R0.xyzx;\n"
				"MOVR R1.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0(GT.x), R1;\n"
				"MOVR o[COLR], R0;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
		);
	static const void* __splitTriangles_fp30 = &__splitTriangles_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __splitTriangles_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 4, 0};\n"
				"PARAM c3 = {5.5, 0.515625, 0.579534, 4.5};\n"
				"PARAM c4 = {0.625, -8, -2, -4};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[3], RECT;\n"
				"TEX r0, r3, texture[9], RECT;\n"
				"TEX r7, r10, texture[2], RECT;\n"
				"TEX r2, r10, texture[0], RECT;\n"
				"TEX r9, r10, texture[1], RECT;\n"
				"TEX r4, r3, texture[10], RECT;\n"
				"TEX r11, r3, texture[11], RECT;\n"
				"ADD r9.w, r5.w, c4.z;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, c4.y;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r5.w, r9.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.x, c2.w;\n"
				"ADD r9.w, r0.w, c4.w;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r0.w, r0.w, c4.y;\n"
				"ADD r5.xyz, r5, r0;\n"
				"ABS r10.w, r0.w;\n"
				"CMP r1.w, -r10.w, c2.w, c2.x;\n"
				"ADD r9.w, r9.w, r1.w;\n"
				"CMP r9.w, -r9.w, c2.x, c2.w;\n"
				"MUL r7.w, r7.w, r2.w;\n"
				"ABS r7.w, r7.w;\n"
				"CMP r7.w, -r7.w, c2.x, c2.w;\n"
				"MUL r9.w, r9.w, r7.w;\n"
				"MUL r5.w, r5.w, r9.w;\n"
				"MUL r4.w, r4.w, r5.w;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"MUL r5.w, r11.w, r4.w;\n"
				"ABS r5.w, r5.w;\n"
				"DP3 r4.w, r4, r4;\n"
				"ADD r4.xyz, r4, r5;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"DP3 r11.w, r11, r11;\n"
				"ADD r4.xyz, r11, r4;\n"
				"CMP r9.w, -r11.w, c2.x, c2.w;\n"
				"ADD r4.w, r4.w, r9.w;\n"
				"ADD r9.w, r4.w, c2.z;\n"
				"MOV r4.w, -r9.w;\n"
				"RCP r9.w, r9.w;\n"
				"ADD r0.w, r4.w, c3.w;\n"
				"ADD r4.w, r4.w, c3.x;\n"
				"CMP r3.w, r0.w, c3.z, c3.y;\n"
				"CMP r4.w, r4.w, c4.x, r3.w;\n"
				"MUL r10.xyz, r2, r4.w;\n"
				"ADD r4.w, -r4.w, c2.x;\n"
				"MUL r10.w, r4.w, r9.w;\n"
				"ADD r6.xyz, r9, r4;\n"
				"ADD r7.xyz, r7, r6;\n"
				"MAD r7.xyz, r7, r10.w, r10;\n"
				"CMP r1.xyz, -r5.w, r7, r2;\n"
				"MOV r1.w, r2.w;\n"
				"MOV oC0, r1;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 0.5, 0};\n"
				"PARAM c3 = {0.25, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[3], RECT;\n"
				"TEX r0, r10, texture[2], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r10, texture[0], RECT;\n"
				"LRP r6.xyz, c2.z, r5, r0;\n"
				"ABS r6.w, r2.w;\n"
				"LRP r10, c2.z, r7, r2;\n"
				"LRP r0.xyz, c3.x, r6, r10;\n"
				"MOV r0.w, c2.x;\n"
				"CMP r2, -r6.w, r0, r10;\n"
				"MOV oC0, r2;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 4, 0};\n"
				"PARAM c3 = {5.5, 0.515625, 0.579534, 4.5};\n"
				"PARAM c4 = {0.625, -8, -4, -2};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[3], RECT;\n"
				"TEX r0, r3, texture[6], RECT;\n"
				"TEX r7, r10, texture[0], RECT;\n"
				"TEX r2, r10, texture[1], RECT;\n"
				"TEX r9, r10, texture[2], RECT;\n"
				"TEX r4, r3, texture[5], RECT;\n"
				"TEX r11, r3, texture[4], RECT;\n"
				"ADD r9.w, r5.w, c4.z;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, c4.y;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r5.w, r9.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.x, c2.w;\n"
				"ADD r9.w, r0.w, c4.w;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r0.w, r0.w, c4.y;\n"
				"ADD r5.xyz, r5, r0;\n"
				"ABS r10.w, r0.w;\n"
				"CMP r1.w, -r10.w, c2.w, c2.x;\n"
				"ADD r9.w, r9.w, r1.w;\n"
				"CMP r9.w, -r9.w, c2.x, c2.w;\n"
				"MUL r7.w, r7.w, r2.w;\n"
				"ABS r7.w, r7.w;\n"
				"CMP r7.w, -r7.w, c2.x, c2.w;\n"
				"MUL r7.w, r9.w, r7.w;\n"
				"MUL r5.w, r5.w, r7.w;\n"
				"MUL r4.w, r4.w, r5.w;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"MUL r5.w, r11.w, r4.w;\n"
				"ABS r5.w, r5.w;\n"
				"DP3 r4.w, r4, r4;\n"
				"ADD r4.xyz, r4, r5;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"DP3 r11.w, r11, r11;\n"
				"ADD r4.xyz, r11, r4;\n"
				"CMP r7.w, -r11.w, c2.x, c2.w;\n"
				"ADD r4.w, r4.w, r7.w;\n"
				"ADD r7.w, r4.w, c2.z;\n"
				"MOV r4.w, -r7.w;\n"
				"RCP r7.w, r7.w;\n"
				"ADD r0.w, r4.w, c3.w;\n"
				"ADD r4.w, r4.w, c3.x;\n"
				"CMP r3.w, r0.w, c3.z, c3.y;\n"
				"CMP r4.w, r4.w, c4.x, r3.w;\n"
				"MUL r10.xyz, r2, r4.w;\n"
				"ADD r4.w, -r4.w, c2.x;\n"
				"MUL r10.w, r4.w, r7.w;\n"
				"ADD r6.xyz, r7, r4;\n"
				"ADD r9.xyz, r9, r6;\n"
				"MAD r9.xyz, r9, r10.w, r10;\n"
				"CMP r1.xyz, -r5.w, r9, r2;\n"
				"MOV r1.w, r2.w;\n"
				"MOV oC0, r1;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 0.5, 0};\n"
				"PARAM c3 = {0.25, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[6], RECT;\n"
				"TEX r0, r10, texture[0], RECT;\n"
				"TEX r7, r10, texture[2], RECT;\n"
				"TEX r2, r10, texture[1], RECT;\n"
				"LRP r6.xyz, c2.z, r5, r0;\n"
				"ABS r6.w, r2.w;\n"
				"LRP r10, c2.z, r7, r2;\n"
				"LRP r0.xyz, c3.x, r6, r10;\n"
				"MOV r0.w, c2.x;\n"
				"CMP r2, -r6.w, r0, r10;\n"
				"MOV oC0, r2;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 4, 0};\n"
				"PARAM c3 = {5.5, 0.515625, 0.579534, 4.5};\n"
				"PARAM c4 = {0.625, -8, -2, -4};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[9], RECT;\n"
				"TEX r0, r3, texture[6], RECT;\n"
				"TEX r7, r10, texture[1], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"TEX r9, r10, texture[0], RECT;\n"
				"TEX r4, r3, texture[7], RECT;\n"
				"TEX r11, r3, texture[8], RECT;\n"
				"ADD r9.w, r5.w, c4.z;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r5.w, r5.w, c4.y;\n"
				"ABS r5.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.w, c2.x;\n"
				"ADD r5.w, r9.w, r5.w;\n"
				"CMP r5.w, -r5.w, c2.x, c2.w;\n"
				"ADD r9.w, r0.w, c4.w;\n"
				"ABS r9.w, r9.w;\n"
				"CMP r9.w, -r9.w, c2.w, c2.x;\n"
				"ADD r0.w, r0.w, c4.y;\n"
				"ADD r5.xyz, r5, r0;\n"
				"ABS r10.w, r0.w;\n"
				"CMP r1.w, -r10.w, c2.w, c2.x;\n"
				"ADD r9.w, r9.w, r1.w;\n"
				"CMP r9.w, -r9.w, c2.x, c2.w;\n"
				"MUL r7.w, r7.w, r2.w;\n"
				"ABS r7.w, r7.w;\n"
				"CMP r7.w, -r7.w, c2.x, c2.w;\n"
				"MUL r9.w, r9.w, r7.w;\n"
				"MUL r5.w, r5.w, r9.w;\n"
				"MUL r4.w, r4.w, r5.w;\n"
				"ABS r4.w, r4.w;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"MUL r5.w, r11.w, r4.w;\n"
				"ABS r5.w, r5.w;\n"
				"MOV r7.w, -r5.w;\n"
				"DP3 r4.w, r11, r11;\n"
				"CMP r4.w, -r4.w, c2.x, c2.w;\n"
				"DP3 r5.w, r4, r4;\n"
				"ADD r4.xyz, r4, r5;\n"
				"CMP r11.w, -r5.w, c2.x, c2.w;\n"
				"ADD r4.w, r4.w, r11.w;\n"
				"ADD r11.w, r4.w, c2.z;\n"
				"MOV r4.w, -r11.w;\n"
				"RCP r11.w, r11.w;\n"
				"ADD r9.w, r4.w, c3.w;\n"
				"ADD r4.w, r4.w, c3.x;\n"
				"CMP r9.w, r9.w, c3.z, c3.y;\n"
				"CMP r4.w, r4.w, c4.x, r9.w;\n"
				"MUL r0.xyz, r2, r4.w;\n"
				"ADD r4.w, -r4.w, c2.x;\n"
				"MUL r0.w, r4.w, r11.w;\n"
				"ADD r3.xyz, r11, r4;\n"
				"ADD r10.xyz, r9, r3;\n"
				"ADD r7.xyz, r7, r10;\n"
				"MAD r7.xyz, r7, r0.w, r0;\n"
				"CMP r6.xyz, r7.w, r7, r2;\n"
				"MOV r6.w, r2.w;\n"
				"MOV oC0, r6;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = {1, -2048, 0.5, 0};\n"
				"PARAM c3 = {0.25, 0, 0, 0};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"TEX r0, t0, texture[12], RECT;\n"
				"ADD r7.xy, r0, c2.y;\n"
				"CMP r2.xy, r7, c2.x, c2.w;\n"
				"CMP r9.xy, r0, c2.w, c2.x;\n"
				"MUL r4.xy, r2, r9;\n"
				"CMP r6.xy, -r4, r0, c2.w;\n"
				"MAD r3.x, r6.x, c1.x, c1.z;\n"
				"MAD r3.y, r6.y, c1.y, c1.w;\n"
				"MAD r10.x, r6.x, c0.x, c0.z;\n"
				"MAD r10.y, r6.y, c0.y, c0.w;\n"
				"TEX r5, r3, texture[9], RECT;\n"
				"TEX r0, r10, texture[1], RECT;\n"
				"TEX r7, r10, texture[0], RECT;\n"
				"TEX r2, r10, texture[2], RECT;\n"
				"LRP r6.xyz, c2.z, r5, r0;\n"
				"LRP r10, c2.z, r2, r7;\n"
				"LRP r5.xyz, c3.x, r6, r10;\n"
				"ABS r7.w, r2.w;\n"
				"MOV r5.w, c2.x;\n"
				"CMP r4, -r7.w, r5, r10;\n"
				"MOV oC0, r4;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:4\n"
				"##c:0:triangles\n"
				"##c:0:neighbors\n"
				"##s:2:i\n"
				"##o:0:splittri\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(1, kGatherConstant_Shape)
				.constant(2, kGatherConstant_Shape)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.sampler(3, 0)
				.interpolant(3, kStreamInterpolant_Position)
				.output(4, 5)
			)
		);
	static const void* __splitTriangles_arb = &__splitTriangles_arb_desc;
}

void __splitTriangles_cpu_inner (const __BrtArray2d<__cpustruct_STri > &triangles,
                                  const __BrtArray2d<__cpustruct_Neighbor > &neighbors,
                                  const __BrtFloat2  &i,
                                  __cpustruct_SplitTri &splittri){
  __BrtFloat2  zero2 = __BrtFloat1((float)0);
  __BrtFloat2  index = (i >= __BrtFloat1((float)0) && i < __BrtFloat1((float)2048)).questioncolon(i,zero2);
  __cpustruct_STri tri = triangles[index];
  __cpustruct_Neighbor oldneighbors = neighbors[index];
  __BrtFloat1  eAAB = __isNeighbor_cpu_inner(oldneighbors.AAB);
  __BrtFloat1  eAAC = __isNeighbor_cpu_inner(oldneighbors.AAC);
  __BrtFloat1  eABB = __isNeighbor_cpu_inner(oldneighbors.ABB);
  __BrtFloat1  eBBC = __isNeighbor_cpu_inner(oldneighbors.BBC);
  __BrtFloat1  eBCC = __isNeighbor_cpu_inner(oldneighbors.BCC);
  __BrtFloat1  eACC = __isNeighbor_cpu_inner(oldneighbors.ACC);
  __BrtFloat3  fiveandhalf = __BrtFloat1(5.500000f);
  __BrtFloat3  fourandhalf = __BrtFloat1(4.500000f);
  __BrtFloat3  weights = __BrtFloat3(__BrtFloat1(0.625000f), __BrtFloat1(0.579534f), __BrtFloat1(0.515625f));
  __BrtFloat3  ABCneighbors = __BrtFloat3(__BrtFloat1(4.000000f) + eAAC + eAAB, __BrtFloat1(4.000000f) + eBBC + eABB, __BrtFloat1(4.000000f) + eBCC + eACC);
  __BrtFloat3  abcn = (ABCneighbors > fiveandhalf).questioncolon(weights.swizzle3(maskX, maskX, maskX),(ABCneighbors > fourandhalf).questioncolon(weights.swizzle3(maskY, maskY, maskY),weights.swizzle3(maskZ, maskZ, maskZ)));
  __BrtFloat1  an = abcn.swizzle1(maskX);
  __BrtFloat1  bn = abcn.swizzle1(maskY);
  __BrtFloat1  cn = abcn.swizzle1(maskZ);
  __BrtFloat3  abcnon = (__BrtFloat1((float)1) - abcn) / ABCneighbors;
  __BrtFloat1  anon = abcnon.swizzle1(maskX);
  __BrtFloat1  bnon = abcnon.swizzle1(maskY);
  __BrtFloat1  cnon = abcnon.swizzle1(maskZ);

  splittri.AC = __lerp_cpu_inner(tri.A,tri.C,__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (tri.C.swizzle1(maskW))
      splittri.AC = __addN_cpu_inner(__lerp_cpu_inner(splittri.AC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(tri.B.swizzle3(maskX, maskY, maskZ),oldneighbors.AC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),__BrtFloat1((float)1));
  splittri.AB = __lerp_cpu_inner(tri.A,tri.B,__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (tri.A.swizzle1(maskW))
      splittri.AB = __addN_cpu_inner(__lerp_cpu_inner(splittri.AB.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(tri.C.swizzle3(maskX, maskY, maskZ),oldneighbors.AB.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),__BrtFloat1((float)1));
  splittri.BC = __lerp_cpu_inner(tri.B,tri.C,__BrtFloat1(0.500000f));
  if (__BrtFloat1((float)1))
    if (tri.B.swizzle1(maskW))
      splittri.BC = __addN_cpu_inner(__lerp_cpu_inner(splittri.BC.swizzle3(maskX, maskY, maskZ),__lerp_cpu_inner(tri.A.swizzle3(maskX, maskY, maskZ),oldneighbors.BC.swizzle3(maskX, maskY, maskZ),__BrtFloat1(0.500000f)),__BrtFloat1(0.250000f)),__BrtFloat1((float)1));
  splittri.A = tri.A;
  if (__BrtFloat1((float)1))
    if (tri.A.swizzle1(maskW) && tri.C.swizzle1(maskW) && (oldneighbors.AC.swizzle1(maskW) == __BrtFloat1((float)4) || oldneighbors.AC.swizzle1(maskW) == __BrtFloat1((float)8)) && (oldneighbors.AB.swizzle1(maskW) == __BrtFloat1((float)2) || oldneighbors.AB.swizzle1(maskW) == __BrtFloat1((float)8)) && oldneighbors.AAB.swizzle1(maskW) && oldneighbors.AAC.swizzle1(maskW))
      splittri.A.mask3(tri.A.swizzle3(maskX, maskY, maskZ) * an + anon * (oldneighbors.AB.swizzle3(maskX, maskY, maskZ) + oldneighbors.AC.swizzle3(maskX, maskY, maskZ) + oldneighbors.AAB.swizzle3(maskX, maskY, maskZ) + oldneighbors.AAC.swizzle3(maskX, maskY, maskZ) + tri.B.swizzle3(maskX, maskY, maskZ) + tri.C.swizzle3(maskX, maskY, maskZ)),maskX,maskY,maskZ);
  splittri.B = tri.B;
  if (__BrtFloat1((float)1))
    if (tri.A.swizzle1(maskW) && tri.B.swizzle1(maskW) && (oldneighbors.BC.swizzle1(maskW) == __BrtFloat1((float)2) || oldneighbors.BC.swizzle1(maskW) == __BrtFloat1((float)8)) && (oldneighbors.AB.swizzle1(maskW) == __BrtFloat1((float)4) || oldneighbors.AB.swizzle1(maskW) == __BrtFloat1((float)8)) && oldneighbors.ABB.swizzle1(maskW) && oldneighbors.BBC.swizzle1(maskW))
      splittri.B.mask3(tri.B.swizzle3(maskX, maskY, maskZ) * bn + bnon * (oldneighbors.AB.swizzle3(maskX, maskY, maskZ) + oldneighbors.BC.swizzle3(maskX, maskY, maskZ) + oldneighbors.ABB.swizzle3(maskX, maskY, maskZ) + oldneighbors.BBC.swizzle3(maskX, maskY, maskZ) + tri.A.swizzle3(maskX, maskY, maskZ) + tri.C.swizzle3(maskX, maskY, maskZ)),maskX,maskY,maskZ);
  splittri.C = tri.C;
  if (__BrtFloat1((float)1))
    if (tri.C.swizzle1(maskW) && tri.B.swizzle1(maskW) && (oldneighbors.BC.swizzle1(maskW) == __BrtFloat1((float)4) || oldneighbors.BC.swizzle1(maskW) == __BrtFloat1((float)8)) && (oldneighbors.AC.swizzle1(maskW) == __BrtFloat1((float)2) || oldneighbors.AC.swizzle1(maskW) == __BrtFloat1((float)8)) && oldneighbors.ACC.swizzle1(maskW) && oldneighbors.BCC.swizzle1(maskW))
      splittri.C.mask3(tri.C.swizzle3(maskX, maskY, maskZ) * cn + cnon * (oldneighbors.AC.swizzle3(maskX, maskY, maskZ) + oldneighbors.BC.swizzle3(maskX, maskY, maskZ) + oldneighbors.ACC.swizzle3(maskX, maskY, maskZ) + oldneighbors.BCC.swizzle3(maskX, maskY, maskZ) + tri.A.swizzle3(maskX, maskY, maskZ) + tri.B.swizzle3(maskX, maskY, maskZ)),maskX,maskY,maskZ);
}
void  __splitTriangles_cpu (const std::vector<void *>&args,
                            const std::vector<const unsigned int *>&extents,
                            const std::vector<unsigned int>&dims,
                            unsigned int mapbegin, 
                            unsigned int mapextent) {
  __BrtArray2d<__cpustruct_STri > arg0(
      (__cpustruct_STri *)args[0], extents[0]);
  __BrtArray2d<__cpustruct_Neighbor > arg1(
      (__cpustruct_Neighbor *)args[1], extents[1]);
  __BrtFloat2 *arg2 = (__BrtFloat2 *)args[2];
  __cpustruct_SplitTri*arg3 = (__cpustruct_SplitTri*)args[3];
  unsigned int dim=dims[3];
  unsigned int newline=extents[3][dim-1];
  unsigned int ratio2 = extents[3][dim-1]/extents[2][dim-1];
  unsigned int scale2=extents[2][dim-1]/extents[3][dim-1];
  if (scale2<1) scale2 = 1;
  unsigned int ratioiter2 = 0;
  if (ratio2) ratioiter2 = mapbegin%ratio2;
  unsigned int iter2 = getIndexOf(mapbegin,extents[2], dim, extents[3]);
  arg3+=mapbegin;
  unsigned int i=0; 
  while (i<mapextent) {
    __splitTriangles_cpu_inner (
      arg0,
      arg1,
      *(arg2 + iter2),
      *arg3);
    i++;
    if (++ratioiter2>=ratio2){
      ratioiter2=0;
      iter2+=scale2;
    }
    ++arg3;
    if ((mapbegin+i)%newline==0) {
      iter2=getIndexOf(i+mapbegin,extents[2],dim, extents[3]);
    }
  }
}

void  splitTriangles (::brook::stream triangles,
		::brook::stream neighbors,
		::brook::stream i,
		::brook::stream splittri) {
  static const void *__splitTriangles_fp[] = {
     "fp30", __splitTriangles_fp30,
     "arb", __splitTriangles_arb,
     "ps20", __splitTriangles_ps20,
     "cpu", (void *) __splitTriangles_cpu,
     NULL, NULL };
  static __BRTKernel k(__splitTriangles_fp);

  k->PushGatherStream(triangles);
  k->PushGatherStream(neighbors);
  k->PushStream(i);
  k->PushOutput(splittri);
  k->Map();

}


void  __printf_cpu_inner(float  f)
{
  printf("%.2f ",f);
}

void  __printnew_cpu_inner()
{
  printf("\n");
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __linearReorgSplitTriangles_ps20_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s5\n"
				"    texld r0, t0, s3\n"
				"    texld r7, t0, s5\n"
				"    texld r2, t0, s2\n"
				"    texld r9, t0, s1\n"
				"    texld r4, t0, s0\n"
				"    mov r7.w, -c2.x\n"
				"    cmp r7.w, c2.x, c2.x, r7.w\n"
				"    mad r6.x, t2.x, c0.x, c0.z\n"
				"    mad r6.y, t2.y, c0.y, c0.w\n"
				"    cmp r7.w, -r7.w, r6.y, r6.x\n"
				"    mul r7.w, r7.w, c4.x\n"
				"    frc r7.w, r7.w\n"
				"    mad r7.w, r7.w, c4.w, c4.y\n"
				"    frc r0.w, r7.w\n"
				"    add r7.w, r7.w, -r0.w\n"
				"    add r0.w, -r7.w, c4.z\n"
				"    cmp r7.w, r0.w, r7.w, c5.x\n"
				"    add r9.w, r7.w, c5.w\n"
				"    add r4.w, r7.w, c5.y\n"
				"    add r2.w, r7.w, c5.z\n"
				"    mov r1.xyz, r0\n"
				"    mov r1.w, r7.x\n"
				"    mov r8.xyz, r7\n"
				"    cmp r7.yz, r2.w, r7, r0\n"
				"    mov r8.w, r0.x\n"
				"    cmp r0, r2.w, r1, r8\n"
				"    mov r3.w, r2.x\n"
				"    cmp r2.yz, r4.w, r7, r2\n"
				"    mov r3.xyz, r9\n"
				"    cmp r10, r4.w, r0, r3\n"
				"    mov r4.w, r9.x\n"
				"    cmp r9.yz, r9.w, r2, r9\n"
				"    cmp r5, r9.w, r10, r4\n"
				"    mov r9.x, r5.w\n"
				"    add r6.xyz, r5, -r9\n"
				"    dp3 r1.w, r6, r6\n"
				"    add r8.w, -r1.w, c1.x\n"
				"    mov r0.w, c3.x\n"
				"    cmp_pp r5.w, r8.w, c5.x, r0.w\n"
				"    mov oC0, r5\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:0:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    texld r0, t0, s4\n"
				"    texld r7, t0, s5\n"
				"    texld r2, t0, s1\n"
				"    texld r9, t0, s3\n"
				"    texld r4, t0, s2\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r6.x, t2.x, c0.x, c0.z\n"
				"    mad r6.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r6.y, r6.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r2.w, r0.w\n"
				"    add r0.w, r0.w, -r2.w\n"
				"    add r2.w, -r0.w, c4.z\n"
				"    cmp r0.w, r2.w, r0.w, c5.x\n"
				"    add r7.w, r0.w, c5.w\n"
				"    add r9.w, r0.w, c5.y\n"
				"    add r2.w, r0.w, c5.z\n"
				"    mov r1.w, r0.x\n"
				"    mov r8.xyz, r7\n"
				"    mov r8.w, r2.x\n"
				"    mov r1.xyz, r9\n"
				"    cmp r3, r2.w, r8, r1\n"
				"    cmp r0.yz, r2.w, r2, r0\n"
				"    mov r4.w, r9.x\n"
				"    cmp r9.yz, r9.w, r0, r9\n"
				"    cmp r10, r9.w, r3, r4\n"
				"    mov r2.w, r7.x\n"
				"    cmp r7.yz, r7.w, r9, r7\n"
				"    cmp r5, r7.w, r10, r2\n"
				"    mov r7.x, r5.w\n"
				"    add r6.xyz, r5, -r7\n"
				"    dp3 r8.w, r6, r6\n"
				"    add r3.w, -r8.w, c1.x\n"
				"    mov r0.w, c3.x\n"
				"    cmp_pp r5.w, r3.w, c5.x, r0.w\n"
				"    mov oC0, r5\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:1:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    texld r0, t0, s4\n"
				"    texld r7, t0, s3\n"
				"    texld r2, t0, s1\n"
				"    texld r9, t0, s5\n"
				"    texld r4, t0, s0\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r6.x, t2.x, c0.x, c0.z\n"
				"    mad r6.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r6.y, r6.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r2.w, r0.w\n"
				"    add r0.w, r0.w, -r2.w\n"
				"    add r2.w, -r0.w, c4.z\n"
				"    cmp r0.w, r2.w, r0.w, c5.x\n"
				"    add r9.w, r0.w, c5.w\n"
				"    add r4.w, r0.w, c5.y\n"
				"    add r2.w, r0.w, c5.z\n"
				"    mov r1.w, r0.x\n"
				"    mov r8.xyz, r7\n"
				"    mov r8.w, r2.x\n"
				"    mov r1.xyz, r9\n"
				"    cmp r3, r2.w, r8, r1\n"
				"    cmp r0.xy, r2.w, r2.yzxw, r0.yzxw\n"
				"    mov r2.w, r7.x\n"
				"    cmp r7.xy, r4.w, r0, r7.yzxw\n"
				"    cmp r10, r4.w, r3, r2\n"
				"    mov r4.w, r9.x\n"
				"    cmp r9.xy, r9.w, r7, r9.yzxw\n"
				"    cmp r5, r9.w, r10, r4\n"
				"    mov r9.z, r5.w\n"
				"    mov r6.xyz, r9.zxyw\n"
				"    add r8.xyz, r5, -r9.zxyw\n"
				"    dp3 r1.w, r8, r8\n"
				"    add r0.w, -r1.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r6.w, r0.w, c5.x, r1.w\n"
				"    mov oC0, r6\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:2:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 8, 0, 2\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    texld r0, t1, s7\n"
				"    texld r7, t0, s4\n"
				"    texld r2, t0, s5\n"
				"    texld r9, t0, s3\n"
				"    texld r4, t0, s1\n"
				"    texld r11, t0, s2\n"
				"    texld r6, t1, s6\n"
				"    texld r1, t1, s8\n"
				"    texld r8, t0, s0\n"
				"    mov r7.w, -c2.x\n"
				"    cmp r7.w, c2.x, c2.x, r7.w\n"
				"    mad r0.x, t2.x, c0.x, c0.z\n"
				"    mad r0.y, t2.y, c0.y, c0.w\n"
				"    cmp r7.w, -r7.w, r0.y, r0.x\n"
				"    mul r7.w, r7.w, c4.x\n"
				"    frc r7.w, r7.w\n"
				"    mad r7.w, r7.w, c4.w, c4.y\n"
				"    frc r11.w, r7.w\n"
				"    add r7.w, r7.w, -r11.w\n"
				"    add r11.w, -r7.w, c4.z\n"
				"    cmp r7.w, r11.w, r7.w, c5.x\n"
				"    add r2.w, r7.w, c5.w\n"
				"    add r9.w, r7.w, c5.y\n"
				"    add r4.w, r7.w, c5.z\n"
				"    mov r3.z, r7.x\n"
				"    mov r3.w, r7.y\n"
				"    mov r3.xy, r2.yzxw\n"
				"    mov r10.xy, r9.yzxw\n"
				"    mov r10.z, r4.x\n"
				"    mov r10.w, r4.y\n"
				"    cmp r5, r4.w, r3, r10\n"
				"    mov r0.xy, r11.yzxw\n"
				"    mov r11.w, r11.x\n"
				"    mov r0.z, r6.w\n"
				"    cmp r3, r9.w, r5, r0\n"
				"    mov r10.z, r6.x\n"
				"    mov r10.w, r6.y\n"
				"    mov r10.xy, r4.yzxw\n"
				"    cmp r5, r2.w, r3, r10\n"
				"    mov r1.y, r5.z\n"
				"    mov r1.z, r5.w\n"
				"    cmp r8.w, r4.w, r7.z, r4.z\n"
				"    cmp r1.w, r9.w, r8.w, r1.w\n"
				"    cmp r1.x, r2.w, r1.w, r6.z\n"
				"    mov r6.xyz, -r1.yzxw\n"
				"    mov r7.xyz, r1.yzxw\n"
				"    mov r8.w, r4.x\n"
				"    mov r11.xyz, r4\n"
				"    mov r0.xyz, r9\n"
				"    mov r3.w, r9.x\n"
				"    mov r0.w, r2.x\n"
				"    mov r3.xyz, r2\n"
				"    cmp r4, r4.w, r0, r3\n"
				"    cmp r9, r9.w, r4, r11\n"
				"    cmp r2, r2.w, r9, r8\n"
				"    add r10.x, r6.x, r2.w\n"
				"    add r1.xyz, r6, r2\n"
				"    add r10.yz, r5.zxyw, r6\n"
				"    dp3 r1.w, r10, r10\n"
				"    add r1.w, -r1.w, c1.x\n"
				"    mov r2.w, c3.x\n"
				"    cmp_pp r5.w, r1.w, c5.x, r2.w\n"
				"    mov r2.w, c4.w\n"
				"    cmp r1.w, r1.w, c5.x, r2.w\n"
				"    dp3 r6.w, r1, r1\n"
				"    add r11.w, -r6.w, c1.x\n"
				"    mov r2.w, c3.x\n"
				"    cmp_pp r0.w, r11.w, c5.x, r2.w\n"
				"    cmp r3.w, r11.w, r1.w, c3.w\n"
				"    mul_pp r4.w, r5.w, r0.w\n"
				"    cmp r7.w, -r4.w, r3.w, c3.y\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:3:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s5\n"
				"    dcl_2d s7\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    dcl_2d s13\n"
				"    dcl_2d s14\n"
				"    texld r0, t0, s5\n"
				"    texld r7, t1, s12\n"
				"    texld r2, t0, s3\n"
				"    texld r9, t1, s9\n"
				"    texld r4, t1, s7\n"
				"    texld r11, t0, s2\n"
				"    texld r6, t0, s1\n"
				"    texld r1, t1, s13\n"
				"    texld r8, t1, s14\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r7.x, t2.x, c0.x, c0.z\n"
				"    mad r7.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r7.y, r7.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r2.w, r0.w\n"
				"    add r0.w, r0.w, -r2.w\n"
				"    add r2.w, -r0.w, c4.z\n"
				"    cmp r0.w, r2.w, r0.w, c5.x\n"
				"    add r11.w, r0.w, c5.w\n"
				"    add r4.w, r0.w, c5.y\n"
				"    add r9.w, r0.w, c5.z\n"
				"    mov r0.w, r7.w\n"
				"    mov r2.w, r9.x\n"
				"    cmp r3, r9.w, r0, r2\n"
				"    mov r10.w, r4.x\n"
				"    mov r10.xyz, r11\n"
				"    cmp r5, r4.w, r3, r10\n"
				"    mov r6.w, r11.x\n"
				"    cmp r7, r11.w, r5, r6\n"
				"    mov r8.z, r7.w\n"
				"    mov r1.x, r1.w\n"
				"    mov r1.y, r8.w\n"
				"    cmp r9.xy, r9.w, r1, r9.yzxw\n"
				"    cmp r4.xy, r4.w, r9, r4.yzxw\n"
				"    cmp r8.xy, r11.w, r4, r11.yzxw\n"
				"    add r7.xyz, r7, -r8.zxyw\n"
				"    dp3 r8.w, r7, r7\n"
				"    add r8.w, -r8.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r8.w, r8.w, c5.x, r1.w\n"
				"    dp3 r0.w, r8, r8\n"
				"    mov r2.xyz, r8.zxyw\n"
				"    mov r1.w, c5.x\n"
				"    cmp_pp r10.w, -r0.w, c3.x, r1.w\n"
				"    add_pp r5.w, r8.w, r10.w\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r2.w, -r5.w, c5.x, r1.w\n"
				"    mov oC0, r2\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:4:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s5\n"
				"    texld r7, t0, s3\n"
				"    texld r2, t1, s12\n"
				"    texld r9, t0, s2\n"
				"    texld r4, t1, s8\n"
				"    texld r11, t0, s1\n"
				"    texld r6, t1, s6\n"
				"    texld r1, t1, s7\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r6.x, t2.x, c0.x, c0.z\n"
				"    mad r6.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r6.y, r6.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r7.w, r0.w\n"
				"    add r0.w, r0.w, -r7.w\n"
				"    add r7.w, -r0.w, c4.z\n"
				"    cmp r0.w, r7.w, r0.w, c5.x\n"
				"    add r11.w, r0.w, c5.w\n"
				"    add r9.w, r0.w, c5.y\n"
				"    add r2.w, r0.w, c5.z\n"
				"    mov r0.w, r2.x\n"
				"    mov r7.w, r9.x\n"
				"    cmp r8, r2.w, r0, r7\n"
				"    cmp r6.xy, r2.w, r2.yzxw, r9.yzxw\n"
				"    mov r3.xyz, r9\n"
				"    mov r3.w, r4.x\n"
				"    cmp r10, r9.w, r8, r3\n"
				"    cmp r1.xy, r9.w, r6, r4.yzxw\n"
				"    mov r6.y, r4.w\n"
				"    mov r4.xyz, r11\n"
				"    mov r4.w, r6.w\n"
				"    cmp r9, r11.w, r10, r4\n"
				"    mov r11.z, r9.w\n"
				"    mov r6.x, r1.w\n"
				"    cmp r11.xy, r11.w, r1, r6\n"
				"    add r9.xyz, r9, -r11.zxyw\n"
				"    dp3 r11.w, r9, r9\n"
				"    add r11.w, -r11.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r11.w, r11.w, c5.x, r1.w\n"
				"    dp3 r2.w, r11, r11\n"
				"    mov r0.xyz, r11.zxyw\n"
				"    mov r1.w, c5.x\n"
				"    cmp_pp r8.w, -r2.w, c3.x, r1.w\n"
				"    add_pp r3.w, r11.w, r8.w\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r0.w, -r3.w, c5.x, r1.w\n"
				"    mov oC0, r0\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:5:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 8, 0, 2\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    texld r0, t1, s10\n"
				"    texld r7, t0, s0\n"
				"    texld r2, t0, s4\n"
				"    texld r9, t0, s1\n"
				"    texld r4, t1, s9\n"
				"    texld r11, t0, s3\n"
				"    texld r6, t0, s5\n"
				"    texld r1, t1, s11\n"
				"    texld r8, t0, s2\n"
				"    mov r2.w, -c2.x\n"
				"    cmp r2.w, c2.x, c2.x, r2.w\n"
				"    mad r0.x, t2.x, c0.x, c0.z\n"
				"    mad r0.y, t2.y, c0.y, c0.w\n"
				"    cmp r2.w, -r2.w, r0.y, r0.x\n"
				"    mul r2.w, r2.w, c4.x\n"
				"    frc r2.w, r2.w\n"
				"    mad r2.w, r2.w, c4.w, c4.y\n"
				"    frc r7.w, r2.w\n"
				"    add r2.w, r2.w, -r7.w\n"
				"    add r7.w, -r2.w, c4.z\n"
				"    cmp r2.w, r7.w, r2.w, c5.x\n"
				"    add r11.w, r2.w, c5.w\n"
				"    add r8.w, r2.w, c5.y\n"
				"    add r6.w, r2.w, c5.z\n"
				"    mov r3.z, r7.x\n"
				"    mov r3.w, r7.y\n"
				"    mov r0.xy, r2.yzxw\n"
				"    mov r2.w, r2.x\n"
				"    mov r3.xy, r9.yzxw\n"
				"    mov r0.z, r4.w\n"
				"    cmp r10, r6.w, r3, r0\n"
				"    mov r5.z, r4.x\n"
				"    mov r5.w, r4.y\n"
				"    mov r5.xy, r11.yzxw\n"
				"    cmp r3, r8.w, r10, r5\n"
				"    mov r0.xy, r6.yzxw\n"
				"    mov r0.z, r11.x\n"
				"    mov r0.w, r11.y\n"
				"    cmp r10, r11.w, r3, r0\n"
				"    mov r1.y, r10.z\n"
				"    mov r1.z, r10.w\n"
				"    cmp r1.w, r6.w, r7.z, r1.w\n"
				"    cmp r1.w, r8.w, r1.w, r4.z\n"
				"    cmp r1.x, r11.w, r1.w, r11.z\n"
				"    mov r4.xyz, -r1.yzxw\n"
				"    mov r7.xyz, r1.yzxw\n"
				"    mov r5.xyz, r9\n"
				"    mov r9.w, r9.x\n"
				"    mov r5.w, r6.x\n"
				"    mov r9.xyz, r6\n"
				"    mov r3.xyz, r8\n"
				"    mov r3.w, r11.x\n"
				"    mov r2.xyz, r11\n"
				"    cmp r6, r6.w, r9, r2\n"
				"    cmp r8, r8.w, r6, r3\n"
				"    cmp r11, r11.w, r8, r5\n"
				"    add r0.x, r4.x, r11.w\n"
				"    add r1.xyz, r4, r11\n"
				"    add r0.yz, r10.zxyw, r4\n"
				"    dp3 r1.w, r0, r0\n"
				"    add r1.w, -r1.w, c1.x\n"
				"    mov r0.w, c3.x\n"
				"    cmp_pp r10.w, r1.w, c5.x, r0.w\n"
				"    mov r0.w, c4.w\n"
				"    cmp r1.w, r1.w, c5.x, r0.w\n"
				"    dp3 r4.w, r1, r1\n"
				"    add r9.w, -r4.w, c1.x\n"
				"    mov r0.w, c3.x\n"
				"    cmp_pp r3.w, r9.w, c5.x, r0.w\n"
				"    cmp r2.w, r9.w, r1.w, c3.w\n"
				"    mul_pp r6.w, r10.w, r3.w\n"
				"    cmp r7.w, -r6.w, r2.w, c3.y\n"
				"    mov oC0, r7\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:6:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s7\n"
				"    dcl_2d s8\n"
				"    dcl_2d s10\n"
				"    dcl_2d s12\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t1, s6\n"
				"    texld r2, t1, s10\n"
				"    texld r9, t0, s4\n"
				"    texld r4, t0, s3\n"
				"    texld r11, t0, s5\n"
				"    texld r6, t1, s12\n"
				"    texld r1, t1, s7\n"
				"    texld r8, t1, s8\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r7.x, t2.x, c0.x, c0.z\n"
				"    mad r7.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r7.y, r7.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r4.w, r0.w\n"
				"    add r0.w, r0.w, -r4.w\n"
				"    add r4.w, -r0.w, c4.z\n"
				"    cmp r0.w, r4.w, r0.w, c5.x\n"
				"    add r6.w, r0.w, c5.y\n"
				"    add r9.w, r0.w, c5.z\n"
				"    add r2.w, r0.w, c5.w\n"
				"    mov r0.w, r7.w\n"
				"    mov r3.w, r2.x\n"
				"    mov r3.xyz, r9\n"
				"    cmp r10, r9.w, r0, r3\n"
				"    mov r4.w, r9.x\n"
				"    cmp r5, r6.w, r10, r4\n"
				"    mov r11.w, r6.x\n"
				"    cmp r7, r2.w, r5, r11\n"
				"    mov r8.z, r7.w\n"
				"    mov r1.x, r1.w\n"
				"    mov r1.y, r8.w\n"
				"    cmp r2.xy, r9.w, r1, r2.yzxw\n"
				"    cmp r2.xy, r6.w, r2, r9.yzxw\n"
				"    cmp r8.xy, r2.w, r2, r6.yzxw\n"
				"    add r7.xyz, r7, -r8.zxyw\n"
				"    dp3 r8.w, r7, r7\n"
				"    add r8.w, -r8.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r8.w, r8.w, c5.x, r1.w\n"
				"    dp3 r9.w, r8, r8\n"
				"    mov r0.xyz, r8.zxyw\n"
				"    mov r1.w, c5.x\n"
				"    cmp_pp r10.w, -r9.w, c3.x, r1.w\n"
				"    add_pp r4.w, r8.w, r10.w\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r0.w, -r4.w, c5.x, r1.w\n"
				"    mov oC0, r0\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:7:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    texld r0, t0, s1\n"
				"    texld r7, t1, s6\n"
				"    texld r2, t0, s4\n"
				"    texld r9, t1, s11\n"
				"    texld r4, t0, s3\n"
				"    texld r11, t1, s9\n"
				"    texld r6, t0, s5\n"
				"    texld r1, t1, s10\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r11.x, t2.x, c0.x, c0.z\n"
				"    mad r11.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r11.y, r11.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r7.w, r0.w\n"
				"    add r0.w, r0.w, -r7.w\n"
				"    add r7.w, -r0.w, c4.z\n"
				"    cmp r0.w, r7.w, r0.w, c5.x\n"
				"    add r2.w, r0.w, c5.w\n"
				"    add r6.w, r0.w, c5.y\n"
				"    add r7.w, r0.w, c5.z\n"
				"    mov r0.w, r7.x\n"
				"    mov r8.xyz, r2\n"
				"    mov r8.w, r9.x\n"
				"    cmp r3, r7.w, r0, r8\n"
				"    cmp r1.xy, r7.w, r7.yzxw, r9.yzxw\n"
				"    mov r11.y, r9.w\n"
				"    mov r4.w, r11.w\n"
				"    cmp r9, r6.w, r3, r4\n"
				"    mov r10.xyz, r6\n"
				"    mov r10.w, r2.x\n"
				"    cmp r5, r2.w, r9, r10\n"
				"    mov r6.z, r5.w\n"
				"    mov r11.x, r1.w\n"
				"    cmp r7.xy, r6.w, r1, r11\n"
				"    cmp r6.xy, r2.w, r7, r2.yzxw\n"
				"    add r5.xyz, r5, -r6.zxyw\n"
				"    dp3 r6.w, r5, r5\n"
				"    add r6.w, -r6.w, c1.x\n"
				"    mov r2.w, c3.x\n"
				"    cmp_pp r6.w, r6.w, c5.x, r2.w\n"
				"    dp3 r0.w, r6, r6\n"
				"    mov r8.xyz, r6.zxyw\n"
				"    mov r2.w, c5.x\n"
				"    cmp_pp r1.w, -r0.w, c3.x, r2.w\n"
				"    add_pp r4.w, r6.w, r1.w\n"
				"    mov r2.w, c3.x\n"
				"    cmp_pp r8.w, -r4.w, c5.x, r2.w\n"
				"    mov oC0, r8\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:8:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 8, 0, 2\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s2\n"
				"    dcl_2d s3\n"
				"    dcl_2d s4\n"
				"    dcl_2d s5\n"
				"    dcl_2d s12\n"
				"    dcl_2d s13\n"
				"    dcl_2d s14\n"
				"    texld r0, t1, s13\n"
				"    texld r7, t0, s2\n"
				"    texld r2, t0, s4\n"
				"    texld r9, t0, s1\n"
				"    texld r4, t1, s12\n"
				"    texld r11, t0, s3\n"
				"    texld r6, t0, s5\n"
				"    texld r1, t1, s14\n"
				"    texld r8, t0, s0\n"
				"    mov r2.w, -c2.x\n"
				"    cmp r2.w, c2.x, c2.x, r2.w\n"
				"    mad r0.x, t2.x, c0.x, c0.z\n"
				"    mad r0.y, t2.y, c0.y, c0.w\n"
				"    cmp r2.w, -r2.w, r0.y, r0.x\n"
				"    mul r2.w, r2.w, c4.x\n"
				"    frc r2.w, r2.w\n"
				"    mad r2.w, r2.w, c4.w, c4.y\n"
				"    frc r7.w, r2.w\n"
				"    add r2.w, r2.w, -r7.w\n"
				"    add r7.w, -r2.w, c4.z\n"
				"    cmp r2.w, r7.w, r2.w, c5.x\n"
				"    add r11.w, r2.w, c5.w\n"
				"    add r9.w, r2.w, c5.y\n"
				"    add r6.w, r2.w, c5.z\n"
				"    mov r3.z, r7.x\n"
				"    mov r3.w, r7.y\n"
				"    mov r10.xy, r2.yzxw\n"
				"    mov r2.w, r2.x\n"
				"    mov r3.xy, r9.yzxw\n"
				"    mov r10.z, r4.x\n"
				"    mov r10.w, r4.y\n"
				"    cmp r5, r6.w, r3, r10\n"
				"    mov r3.xy, r11.yzxw\n"
				"    mov r3.z, r6.x\n"
				"    mov r3.w, r6.y\n"
				"    cmp r10, r9.w, r5, r3\n"
				"    mov r0.z, r4.w\n"
				"    cmp r8.w, r6.w, r7.z, r4.z\n"
				"    mov r0.xy, r6.yzxw\n"
				"    cmp r4, r11.w, r10, r0\n"
				"    mov r1.y, r4.z\n"
				"    mov r1.z, r4.w\n"
				"    cmp r8.w, r9.w, r8.w, r6.z\n"
				"    cmp r1.x, r11.w, r8.w, r1.w\n"
				"    mov r7.xyz, -r1.yzxw\n"
				"    mov r5.xyz, r1.yzxw\n"
				"    mov r8.w, r6.x\n"
				"    mov r2.xyz, r6\n"
				"    mov r3.xyz, r9\n"
				"    mov r10.w, r9.x\n"
				"    mov r3.w, r11.x\n"
				"    mov r10.xyz, r11\n"
				"    cmp r6, r6.w, r10, r2\n"
				"    cmp r9, r9.w, r6, r3\n"
				"    cmp r11, r11.w, r9, r8\n"
				"    add r0.x, r7.x, r11.w\n"
				"    add r1.xyz, r7, r11\n"
				"    add r0.yz, r4.zxyw, r7\n"
				"    dp3 r1.w, r0, r0\n"
				"    add r1.w, -r1.w, c1.x\n"
				"    mov r0.w, c3.x\n"
				"    cmp_pp r4.w, r1.w, c5.x, r0.w\n"
				"    dp3 r7.w, r1, r1\n"
				"    add r2.w, -r7.w, c1.x\n"
				"    cmp_pp r3.w, r2.w, c5.x, r0.w\n"
				"    mov r0.w, c4.w\n"
				"    cmp r10.w, r2.w, c5.x, r0.w\n"
				"    mul_pp r6.w, r4.w, r3.w\n"
				"    cmp r11.w, r1.w, r10.w, c3.w\n"
				"    cmp r5.w, -r6.w, r11.w, c3.y\n"
				"    mov oC0, r5\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:9:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s5\n"
				"    dcl_2d s6\n"
				"    dcl_2d s9\n"
				"    dcl_2d s10\n"
				"    dcl_2d s11\n"
				"    dcl_2d s13\n"
				"    texld r0, t0, s3\n"
				"    texld r7, t1, s9\n"
				"    texld r2, t0, s5\n"
				"    texld r9, t0, s0\n"
				"    texld r4, t0, s1\n"
				"    texld r11, t1, s6\n"
				"    texld r6, t1, s13\n"
				"    texld r1, t1, s10\n"
				"    texld r8, t1, s11\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r7.x, t2.x, c0.x, c0.z\n"
				"    mad r7.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r7.y, r7.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r2.w, r0.w\n"
				"    add r0.w, r0.w, -r2.w\n"
				"    add r2.w, -r0.w, c4.z\n"
				"    cmp r0.w, r2.w, r0.w, c5.x\n"
				"    add r9.w, r0.w, c5.y\n"
				"    add r11.w, r0.w, c5.z\n"
				"    add r6.w, r0.w, c5.w\n"
				"    mov r0.w, r7.w\n"
				"    mov r2.w, r9.x\n"
				"    cmp r3, r11.w, r0, r2\n"
				"    mov r4.w, r11.x\n"
				"    cmp r10, r9.w, r3, r4\n"
				"    mov r5.w, r6.x\n"
				"    mov r5.xyz, r9\n"
				"    cmp r7, r6.w, r10, r5\n"
				"    mov r8.z, r7.w\n"
				"    mov r1.x, r1.w\n"
				"    mov r1.y, r8.w\n"
				"    cmp r9.xy, r11.w, r1, r9.yzxw\n"
				"    cmp r11.xy, r9.w, r9, r11.yzxw\n"
				"    cmp r8.xy, r6.w, r11, r6.yzxw\n"
				"    add r7.xyz, r7, -r8.zxyw\n"
				"    dp3 r8.w, r7, r7\n"
				"    add r8.w, -r8.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r8.w, r8.w, c5.x, r1.w\n"
				"    dp3 r0.w, r8, r8\n"
				"    mov r2.xyz, r8.zxyw\n"
				"    mov r1.w, c5.x\n"
				"    cmp_pp r4.w, -r0.w, c3.x, r1.w\n"
				"    add_pp r10.w, r8.w, r4.w\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r2.w, -r10.w, c5.x, r1.w\n"
				"    mov oC0, r2\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:10:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"    ps_2_0\n"
				"    def c3, 1, 0, 0, 0\n"
				"    def c4, 0.25, 0.5, 3.5, 4\n"
				"    def c5, 0, -1.5, -2.5, -0.5\n"
				"    dcl t0.xy\n"
				"    dcl t1.xy\n"
				"    dcl t2.xy\n"
				"    dcl_2d s0\n"
				"    dcl_2d s1\n"
				"    dcl_2d s3\n"
				"    dcl_2d s5\n"
				"    dcl_2d s9\n"
				"    dcl_2d s12\n"
				"    dcl_2d s13\n"
				"    dcl_2d s14\n"
				"    texld r0, t0, s3\n"
				"    texld r7, t0, s5\n"
				"    texld r2, t1, s12\n"
				"    texld r9, t1, s9\n"
				"    texld r4, t0, s1\n"
				"    texld r11, t0, s0\n"
				"    texld r6, t1, s14\n"
				"    texld r1, t1, s13\n"
				"    mov r0.w, -c2.x\n"
				"    cmp r0.w, c2.x, c2.x, r0.w\n"
				"    mad r2.x, t2.x, c0.x, c0.z\n"
				"    mad r2.y, t2.y, c0.y, c0.w\n"
				"    cmp r0.w, -r0.w, r2.y, r2.x\n"
				"    mul r0.w, r0.w, c4.x\n"
				"    frc r0.w, r0.w\n"
				"    mad r0.w, r0.w, c4.w, c4.y\n"
				"    frc r7.w, r0.w\n"
				"    add r0.w, r0.w, -r7.w\n"
				"    add r7.w, -r0.w, c4.z\n"
				"    cmp r4.w, r7.w, r0.w, c5.x\n"
				"    add r11.w, r4.w, c5.z\n"
				"    mov r7.w, r2.w\n"
				"    mov r0.w, r9.x\n"
				"    cmp r8, r11.w, r0, r7\n"
				"    add r9.w, r4.w, c5.y\n"
				"    add r4.w, r4.w, c5.w\n"
				"    mov r3.xyz, r4\n"
				"    mov r3.w, r11.x\n"
				"    cmp r10, r9.w, r8, r3\n"
				"    mov r5.xyz, r11\n"
				"    mov r5.w, r6.x\n"
				"    cmp r2, r4.w, r10, r5\n"
				"    mov r4.z, r2.w\n"
				"    mov r1.x, r1.w\n"
				"    mov r1.y, r6.w\n"
				"    cmp r9.xy, r11.w, r9.yzxw, r1\n"
				"    cmp r11.xy, r9.w, r9, r11.yzxw\n"
				"    cmp r4.xy, r4.w, r11, r6.yzxw\n"
				"    add r2.xyz, r2, -r4.zxyw\n"
				"    dp3 r4.w, r2, r2\n"
				"    add r4.w, -r4.w, c1.x\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r4.w, r4.w, c5.x, r1.w\n"
				"    dp3 r7.w, r4, r4\n"
				"    mov r0.xyz, r4.zxyw\n"
				"    mov r1.w, c5.x\n"
				"    cmp_pp r3.w, -r7.w, c3.x, r1.w\n"
				"    add_pp r10.w, r4.w, r3.w\n"
				"    mov r1.w, c3.x\n"
				"    cmp_pp r0.w, -r10.w, c5.x, r1.w\n"
				"    mov oC0, r0\n"
				"\n"
				" \n"
				"//!!BRCC\n"
				"//narg:6\n"
				"//s:0:splittri\n"
				"//s:0:newnei\n"
				"//oi:0:tri\n"
				"//o:0:neighbor\n"
				"//c:1:epsilon\n"
				"//c:1:stretchX\n"
				"//workspace:1024\n"
				"//!!multipleOutputInfo:11:1:\n"
				"//!!fullAddressTrans:0:\n"
				"//!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __linearReorgSplitTriangles_ps20 = &__linearReorgSplitTriangles_ps20_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __linearReorgSplitTriangles_fp30_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 18 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 17 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R1, f[TEX0].xyxx, TEX0, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R1.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R1.w(GT.x), R2.x;\n"
				"SLTR H0.x, R1.w, {0}.x;\n"
				"MULR R1.w, R1.w, {0.25}.x;\n"
				"FRCR R1.w, |R1.w|;\n"
				"MULR R1.w, R1.w, {4}.x;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R1.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MOVXC HC.x, H0.y;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"MOVR R1.xyz(GT.x), R0;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"TEX R2, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"TEX R2, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R3;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R0.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 18 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float4 __output_1 : $vout.COLOR0 : COL : 17 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX0].xyxx, TEX5, RECT;\n"
				"TEX R1, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.xyz, R1;\n"
				"MOVR R3.xyz, R0;\n"
				"TEX R4, f[TEX0].xyxx, TEX3, RECT;\n"
				"TEX R5, f[TEX0].xyxx, TEX2, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R5;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"TEX R0, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R0;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R1;\n"
				"ADDR R0.xyz, R2.xyzx, -R3.xyzx;\n"
				"ADDR R3.xyz, R2.xyzx, -R3.xyzx;\n"
				"DP3R R0.x, R3.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 18 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float4 __output_2 : $vout.COLOR0 : COL : 17 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R1, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R0.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R0.w(GT.x), R2.x;\n"
				"SLTR H0.x, R0.w, {0}.x;\n"
				"MULR R0.w, R0.w, {0.25}.x;\n"
				"FRCR R0.w, |R0.w|;\n"
				"MULR R0.w, R0.w, {4}.x;\n"
				"MOVR R2.x, R0.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R0.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.xyz, R1;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R4;\n"
				"TEX R1, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R3;\n"
				"ADDR R1.xyz, R0.xyzx, -R2.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_3 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX8, RECT;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX7, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R0.z, R0.w;\n"
				"MOVR R0.y, R1.w;\n"
				"TEX R1, f[TEX1].xyxx, TEX6, RECT;\n"
				"TEX R2, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVR R0.x, R1.w;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R1.xyz(GT.x), R0;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVR R0.xyz, R2;\n"
				"TEX R3, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX0, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"MOVR R3.xyz, R4;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R2;\n"
				"TEX R2, f[TEX0].xyxx, TEX3, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R2;\n"
				"TEX R2, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, epsilon.x;\n"
				"ADDR R0.xyz, R3.xyzx, -R1.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R3.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_4 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX14, RECT;\n"
				"TEX R1, f[TEX0].xyxx, TEX2, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.xyz, R1;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R4, f[TEX1].xyxx, TEX7, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R3.xyz(GT.x), R1;\n"
				"MOVR R0.z, R0.w;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX13, RECT;\n"
				"TEX R4.w, f[TEX1].xyxx, TEX12, RECT;\n"
				"MOVR R0.y, R1.w;\n"
				"MOVR R0.x, R4.w;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"TEX R1, f[TEX1].xyxx, TEX9, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R3.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"TEX R0, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R3.xyz(GT.x), R0;\n"
				"DP3R R0.x, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R0.xyz, R3.xyzx, -R2.xyzx;\n"
				"ADDR R3.xyz, R3.xyzx, -R2.xyzx;\n"
				"DP3R R0.x, R3.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_5 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX8, RECT;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX7, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.w, R0;\n"
				"MOVR R2.z, R2.w;\n"
				"MOVR R2.y, R1.w;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX6, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"MOVR R0.xyz, R3;\n"
				"TEX R1, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"TEX R1, f[TEX1].xyxx, TEX12, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"DP3R R0.w, R2.xyzx, R2.xyzx;\n"
				"SGTR H0.x, R0.w, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R1.xyz, R0.xyzx, -R2.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R1.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_6 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX11, RECT;\n"
				"TEX R1, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R0.z, R0.w;\n"
				"TEX R2.w, f[TEX1].xyxx, TEX10, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVR R0.y, R2.w;\n"
				"MOVR R2.xyz, R3;\n"
				"MOVR R4.xyz, R1;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R4.xyz(GT.x), R3;\n"
				"TEX R5, f[TEX1].xyxx, TEX9, RECT;\n"
				"TEX R6, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x, R5.w;\n"
				"MOVR R2.xyz(GT.x), R5;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"MOVR R0.xyz, R6;\n"
				"TEX R5, f[TEX0].xyxx, TEX2, RECT;\n"
				"TEX R7, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R5;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R7;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R4.xyz(GT.x), R6;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R1;\n"
				"TEX R1, f[TEX0].xyxx, TEX0, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"ADDR R1.xyz, R4.xyzx, -R2.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R2.xyzx;\n"
				"DP3R R0.w, R4.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.w, epsilon.x;\n"
				"ADDR R1.xyz, R0.xyzx, -R2.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R2.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R1.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"MOVR o[COLR].xyz, R2.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_7 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX8, RECT;\n"
				"TEX R1, f[TEX1].xyxx, TEX12, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R1.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R1.w(GT.x), R2.x;\n"
				"SLTR H0.x, R1.w, {0}.x;\n"
				"MULR R1.w, R1.w, {0.25}.x;\n"
				"FRCR R1.w, |R1.w|;\n"
				"MULR R1.w, R1.w, {4}.x;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R1.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"TEX R2, f[TEX0].xyxx, TEX5, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R1.xyz(GT.x), R3;\n"
				"MOVR R0.z, R0.w;\n"
				"TEX R4, f[TEX0].xyxx, TEX3, RECT;\n"
				"TEX R5.w, f[TEX1].xyxx, TEX7, RECT;\n"
				"MOVR R0.y, R5.w;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R3;\n"
				"TEX R3.w, f[TEX1].xyxx, TEX6, RECT;\n"
				"TEX R4, f[TEX1].xyxx, TEX10, RECT;\n"
				"MOVR R0.x, R3.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R4;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R0;\n"
				"TEX R0, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"DP3R R0.x, R1.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R0.xyz, R2.xyzx, -R1.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R2.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_8 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX11, RECT;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX10, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.w, R0;\n"
				"MOVR R2.z, R2.w;\n"
				"MOVR R2.y, R1.w;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX9, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVR R2.w, {0, 0, 0, 1}.w;\n"
				"MOVR R1.xyz, R3;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R0;\n"
				"TEX R0, f[TEX0].xyxx, TEX5, RECT;\n"
				"TEX R2, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"TEX R2, f[TEX1].xyxx, TEX6, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"DP3R R0.w, R1.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.w, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R0.xyzx, -R1.xyzx;\n"
				"ADDR R0.xyz, R0.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R0.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_9 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX14, RECT;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX13, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R0.z, R0.w;\n"
				"MOVR R0.y, R1.w;\n"
				"TEX R1, f[TEX1].xyxx, TEX12, RECT;\n"
				"TEX R2, f[TEX0].xyxx, TEX0, RECT;\n"
				"MOVR R0.x, R1.w;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R3;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R1;\n"
				"TEX R1, f[TEX0].xyxx, TEX3, RECT;\n"
				"TEX R5, f[TEX0].xyxx, TEX4, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R4.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R4.xyz(GT.x), R5;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R1;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R4.xyz(GT.x), R3;\n"
				"TEX R1, f[TEX0].xyxx, TEX2, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R1;\n"
				"ADDR R1.xyz, R2.xyzx, -R0.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R0.xyzx;\n"
				"DP3R R0.w, R2.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.w, epsilon.x;\n"
				"ADDR R1.xyz, R4.xyzx, -R0.xyzx;\n"
				"ADDR R4.xyz, R4.xyzx, -R0.xyzx;\n"
				"DP3R R0.w, R4.xyzx, R1.xyzx;\n"
				"SGTR H0.y, R0.w, epsilon.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"SNER H0.x, R0.x, {0}.x;\n"
				"MOVR R0.y, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.y(GT.x), {1}.x;\n"
				"SNER H0.y, R0.y, {0}.x;\n"
				"MULX H0.x, H0.y, H0.x;\n"
				"MOVR R0.z, {0}.x;\n"
				"MOVXC HC.x, R0.x;\n"
				"MOVR R0.z(GT.x), {4}.x;\n"
				"MOVXC HC.x, R0.y;\n"
				"MOVR R0.z(GT.x), {2}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.z(GT.x), {8}.x;\n"
				"MOVR o[COLR].w, R0.z;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:9:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_10 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX11, RECT;\n"
				"TEX R1, f[TEX1].xyxx, TEX13, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R1.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R1.w(GT.x), R2.x;\n"
				"SLTR H0.x, R1.w, {0}.x;\n"
				"MULR R1.w, R1.w, {0.25}.x;\n"
				"FRCR R1.w, |R1.w|;\n"
				"MULR R1.w, R1.w, {4}.x;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R1.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"TEX R2, f[TEX0].xyxx, TEX0, RECT;\n"
				"TEX R3, f[TEX1].xyxx, TEX6, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R1.xyz(GT.x), R3;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVR R0.z, R0.w;\n"
				"TEX R3, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R4.w, f[TEX1].xyxx, TEX10, RECT;\n"
				"MOVR R0.y, R4.w;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R2.xyz(GT.x), R3;\n"
				"TEX R3.w, f[TEX1].xyxx, TEX9, RECT;\n"
				"TEX R4, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVR R0.x, R3.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.xyz(GT.x), R4;\n"
				"MOVR R0.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R0;\n"
				"TEX R0, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R2.xyz(GT.x), R0;\n"
				"DP3R R0.x, R1.xyzx, R1.xyzx;\n"
				"SGTR H0.x, R0.x, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R0.xyz, R2.xyzx, -R1.xyzx;\n"
				"ADDR R2.xyz, R2.xyzx, -R1.xyzx;\n"
				"DP3R R0.x, R2.xyzx, R0.xyzx;\n"
				"SGTR H0.y, R0.x, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R1.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:10:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!FP1.0\n"
				"# NV_fragment_program generated by NVIDIA Cg compiler\n"
				"# cgc version 1.2.0001, build date Jan  5 2004  12:33:41\n"
				"# command line args: -quiet -profile fp30 -DUSERECT=1\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile fp30\n"
				"#program main\n"
				"#semantic main.__structsampler0_splittri : TEXUNIT0\n"
				"#semantic main.__structsampler1_splittri : TEXUNIT1\n"
				"#semantic main.__structsampler2_splittri : TEXUNIT2\n"
				"#semantic main.__structsampler3_splittri : TEXUNIT3\n"
				"#semantic main.__structsampler4_splittri : TEXUNIT4\n"
				"#semantic main.__structsampler5_splittri : TEXUNIT5\n"
				"#semantic main.__structsampler0_newnei : TEXUNIT6\n"
				"#semantic main.__structsampler1_newnei : TEXUNIT7\n"
				"#semantic main.__structsampler2_newnei : TEXUNIT8\n"
				"#semantic main.__structsampler3_newnei : TEXUNIT9\n"
				"#semantic main.__structsampler4_newnei : TEXUNIT10\n"
				"#semantic main.__structsampler5_newnei : TEXUNIT11\n"
				"#semantic main.__structsampler6_newnei : TEXUNIT12\n"
				"#semantic main.__structsampler7_newnei : TEXUNIT13\n"
				"#semantic main.__structsampler8_newnei : TEXUNIT14\n"
				"#semantic main._const_tri_invscalebias : C0\n"
				"#semantic main.epsilon : C1\n"
				"#semantic main.stretchX : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT __structsampler0_splittri : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var samplerRECT __structsampler1_splittri : TEXUNIT1 : texunit 1 : 1 : 1\n"
				"#var samplerRECT __structsampler2_splittri : TEXUNIT2 : texunit 2 : 2 : 1\n"
				"#var samplerRECT __structsampler3_splittri : TEXUNIT3 : texunit 3 : 3 : 1\n"
				"#var samplerRECT __structsampler4_splittri : TEXUNIT4 : texunit 4 : 4 : 1\n"
				"#var samplerRECT __structsampler5_splittri : TEXUNIT5 : texunit 5 : 5 : 1\n"
				"#var samplerRECT __structsampler0_newnei : TEXUNIT6 : texunit 6 : 7 : 1\n"
				"#var samplerRECT __structsampler1_newnei : TEXUNIT7 : texunit 7 : 8 : 1\n"
				"#var samplerRECT __structsampler2_newnei : TEXUNIT8 : texunit 8 : 9 : 1\n"
				"#var samplerRECT __structsampler3_newnei : TEXUNIT9 : texunit 9 : 10 : 1\n"
				"#var samplerRECT __structsampler4_newnei : TEXUNIT10 : texunit 10 : 11 : 1\n"
				"#var samplerRECT __structsampler5_newnei : TEXUNIT11 : texunit 11 : 12 : 1\n"
				"#var samplerRECT __structsampler6_newnei : TEXUNIT12 : texunit 12 : 13 : 1\n"
				"#var samplerRECT __structsampler7_newnei : TEXUNIT13 : texunit 13 : 14 : 1\n"
				"#var samplerRECT __structsampler8_newnei : TEXUNIT14 : texunit 14 : 15 : 1\n"
				"#var float4 _const_tri_invscalebias : C0 :  : 17 : 1\n"
				"#var float epsilon : C1 :  : 20 : 1\n"
				"#var float stretchX : C2 :  : 21 : 1\n"
				"#var float4 __workspace : C3 :  : 22 : 1\n"
				"#var float2 _tex_splittri_pos : $vin.TEXCOORD0 : TEX0 : 6 : 1\n"
				"#var float2 _tex_newnei_pos : $vin.TEXCOORD1 : TEX1 : 16 : 1\n"
				"#var float2 _tex_tri_pos : $vin.TEXCOORD2 : TEX2 : 18 : 1\n"
				"#var float4 __output_11 : $vout.COLOR0 : COL : 19 : 1\n"
				"DECLARE _const_tri_invscalebias;\n"
				"DECLARE epsilon;\n"
				"DECLARE stretchX;\n"
				"DECLARE __workspace;\n"
				"TEX R0, f[TEX1].xyxx, TEX14, RECT;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX13, RECT;\n"
				"MOVR R2.xy, f[TEX2].xyxx;\n"
				"MOVR R2.w, R2.y;\n"
				"MOVXC HC.x, stretchX.x;\n"
				"MOVR R2.w(GT.x), R2.x;\n"
				"SLTR H0.x, R2.w, {0}.x;\n"
				"MULR R2.w, R2.w, {0.25}.x;\n"
				"FRCR R2.w, |R2.w|;\n"
				"MULR R2.w, R2.w, {4}.x;\n"
				"MOVR R2.x, R2.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), -R2.w;\n"
				"ADDR R2.x, R2.x, {0.5}.x;\n"
				"FLRR R2.x, R2.x;\n"
				"SGTR H0.x, R2.x, {3.5}.x;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R2.x(GT.x), {0}.x;\n"
				"SLTR H0.x, R2.x, {0.5}.x;\n"
				"ADDX H0.y, -H0.x, {1}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SLTR H0.z, R2.x, {1.5}.x;\n"
				"SLTR H0.w, R2.x, {2.5}.x;\n"
				"MULX H0.y, H0.y, H0.z;\n"
				"ADDX H0.z, -H0.z, {1}.x;\n"
				"MULX H0.z, H0.x, H0.z;\n"
				"MULX H0.x, H0.z, H0.w;\n"
				"ADDX H0.w, -H0.w, {1}.x;\n"
				"MULX H0.w, H0.z, H0.w;\n"
				"MOVR R2.z, R0.w;\n"
				"MOVR R2.y, R1.w;\n"
				"TEX R1.w, f[TEX1].xyxx, TEX12, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX0, RECT;\n"
				"MOVR R2.x, R1.w;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.xyz(GT.x), R3;\n"
				"MOVR R1.xyz, R3;\n"
				"MOVR R2.w, {0, 0, 0, 1}.w;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"TEX R2, f[TEX0].xyxx, TEX1, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX5, RECT;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R1.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.x;\n"
				"MOVR R1.xyz(GT.x), R3;\n"
				"TEX R2, f[TEX1].xyxx, TEX9, RECT;\n"
				"TEX R3, f[TEX0].xyxx, TEX3, RECT;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R0.xyz(GT.x), R2;\n"
				"MOVXC HC.x, H0.w;\n"
				"MOVR R1.xyz(GT.x), R3;\n"
				"DP3R R0.w, R0.xyzx, R0.xyzx;\n"
				"SGTR H0.x, R0.w, {0}.x;\n"
				"ADDX H0.x, -H0.x, {1}.x;\n"
				"SNER H0.x, H0.x, {0}.x;\n"
				"ADDR R2.xyz, R1.xyzx, -R0.xyzx;\n"
				"ADDR R1.xyz, R1.xyzx, -R0.xyzx;\n"
				"DP3R R0.w, R1.xyzx, R2.xyzx;\n"
				"SGTR H0.y, R0.w, epsilon.x;\n"
				"ADDX H0.y, H0.x, H0.y;\n"
				"MINX H0.y, H0.y, {1}.x;\n"
				"MOVR o[COLR].xyz, R0.xyzx;\n"
				"MOVR R0.x, {0}.x;\n"
				"MOVXC HC.x, H0.y;\n"
				"MOVR R0.x(GT.x), {1}.x;\n"
				"MOVR o[COLR].w, R0.x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:11:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __linearReorgSplitTriangles_fp30 = &__linearReorgSplitTriangles_fp30_desc;
}


namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __linearReorgSplitTriangles_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[3], RECT;\n"
				"TEX r7, t0, texture[5], RECT;\n"
				"TEX r2, t0, texture[2], RECT;\n"
				"TEX r9, t0, texture[1], RECT;\n"
				"TEX r4, t0, texture[0], RECT;\n"
				"MOV r7.w, -c2.x;\n"
				"CMP r7.w, c2.x, r7.w, c2.x;\n"
				"MAD r6.x, t2.x, c0.x, c0.z;\n"
				"MAD r6.y, t2.y, c0.y, c0.w;\n"
				"CMP r7.w, -r7.w, r6.x, r6.y;\n"
				"MUL r7.w, r7.w, c4.x;\n"
				"FRC r7.w, r7.w;\n"
				"MAD r7.w, r7.w, c4.w, c4.y;\n"
				"FRC r0.w, r7.w;\n"
				"ADD r7.w, r7.w, -r0.w;\n"
				"ADD r0.w, -r7.w, c4.z;\n"
				"CMP r7.w, r0.w, c5.x, r7.w;\n"
				"ADD r9.w, r7.w, c5.w;\n"
				"ADD r4.w, r7.w, c5.y;\n"
				"ADD r2.w, r7.w, c5.z;\n"
				"MOV r1.xyz, r0;\n"
				"MOV r1.w, r7.x;\n"
				"MOV r8.xyz, r7;\n"
				"CMP r7.yz, r2.w, r0, r7;\n"
				"MOV r8.w, r0.x;\n"
				"CMP r0, r2.w, r8, r1;\n"
				"MOV r3.w, r2.x;\n"
				"CMP r2.yz, r4.w, r2, r7;\n"
				"MOV r3.xyz, r9;\n"
				"CMP r10, r4.w, r3, r0;\n"
				"MOV r4.w, r9.x;\n"
				"CMP r9.yz, r9.w, r9, r2;\n"
				"CMP r5, r9.w, r4, r10;\n"
				"MOV r9.x, r5.w;\n"
				"ADD r6.xyz, r5, -r9;\n"
				"DP3 r1.w, r6, r6;\n"
				"ADD r8.w, -r1.w, c1.x;\n"
				"MOV r0.w, c3.x;\n"
				"CMP r5.w, r8.w, r0.w, c5.x;\n"
				"MOV oC0, r5;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[4], RECT;\n"
				"TEX r7, t0, texture[5], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"TEX r9, t0, texture[3], RECT;\n"
				"TEX r4, t0, texture[2], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r6.x, t2.x, c0.x, c0.z;\n"
				"MAD r6.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r6.x, r6.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r2.w, r0.w;\n"
				"ADD r0.w, r0.w, -r2.w;\n"
				"ADD r2.w, -r0.w, c4.z;\n"
				"CMP r0.w, r2.w, c5.x, r0.w;\n"
				"ADD r7.w, r0.w, c5.w;\n"
				"ADD r9.w, r0.w, c5.y;\n"
				"ADD r2.w, r0.w, c5.z;\n"
				"MOV r1.w, r0.x;\n"
				"MOV r8.xyz, r7;\n"
				"MOV r8.w, r2.x;\n"
				"MOV r1.xyz, r9;\n"
				"CMP r3, r2.w, r1, r8;\n"
				"CMP r0.yz, r2.w, r0, r2;\n"
				"MOV r4.w, r9.x;\n"
				"CMP r9.yz, r9.w, r9, r0;\n"
				"CMP r10, r9.w, r4, r3;\n"
				"MOV r2.w, r7.x;\n"
				"CMP r7.yz, r7.w, r7, r9;\n"
				"CMP r5, r7.w, r2, r10;\n"
				"MOV r7.x, r5.w;\n"
				"ADD r6.xyz, r5, -r7;\n"
				"DP3 r8.w, r6, r6;\n"
				"ADD r3.w, -r8.w, c1.x;\n"
				"MOV r0.w, c3.x;\n"
				"CMP r5.w, r3.w, r0.w, c5.x;\n"
				"MOV oC0, r5;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:1:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[4], RECT;\n"
				"TEX r7, t0, texture[3], RECT;\n"
				"TEX r2, t0, texture[1], RECT;\n"
				"TEX r9, t0, texture[5], RECT;\n"
				"TEX r4, t0, texture[0], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r6.x, t2.x, c0.x, c0.z;\n"
				"MAD r6.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r6.x, r6.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r2.w, r0.w;\n"
				"ADD r0.w, r0.w, -r2.w;\n"
				"ADD r2.w, -r0.w, c4.z;\n"
				"CMP r0.w, r2.w, c5.x, r0.w;\n"
				"ADD r9.w, r0.w, c5.w;\n"
				"ADD r4.w, r0.w, c5.y;\n"
				"ADD r2.w, r0.w, c5.z;\n"
				"MOV r1.w, r0.x;\n"
				"MOV r8.xyz, r7;\n"
				"MOV r8.w, r2.x;\n"
				"MOV r1.xyz, r9;\n"
				"CMP r3, r2.w, r1, r8;\n"
				"CMP r0.xy, r2.w, r0.yzxw, r2.yzxw;\n"
				"MOV r2.w, r7.x;\n"
				"CMP r7.xy, r4.w, r7.yzxw, r0;\n"
				"CMP r10, r4.w, r2, r3;\n"
				"MOV r4.w, r9.x;\n"
				"CMP r9.xy, r9.w, r9.yzxw, r7;\n"
				"CMP r5, r9.w, r4, r10;\n"
				"MOV r9.z, r5.w;\n"
				"MOV r6.xyz, r9.zxyw;\n"
				"ADD r8.xyz, r5, -r9.zxyw;\n"
				"DP3 r1.w, r8, r8;\n"
				"ADD r0.w, -r1.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r6.w, r0.w, r1.w, c5.x;\n"
				"MOV oC0, r6;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:2:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(3, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 8, 0, 2};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t1, texture[7], RECT;\n"
				"TEX r7, t0, texture[4], RECT;\n"
				"TEX r2, t0, texture[5], RECT;\n"
				"TEX r9, t0, texture[3], RECT;\n"
				"TEX r4, t0, texture[1], RECT;\n"
				"TEX r11, t0, texture[2], RECT;\n"
				"TEX r6, t1, texture[6], RECT;\n"
				"TEX r1, t1, texture[8], RECT;\n"
				"TEX r8, t0, texture[0], RECT;\n"
				"MOV r7.w, -c2.x;\n"
				"CMP r7.w, c2.x, r7.w, c2.x;\n"
				"MAD r0.x, t2.x, c0.x, c0.z;\n"
				"MAD r0.y, t2.y, c0.y, c0.w;\n"
				"CMP r7.w, -r7.w, r0.x, r0.y;\n"
				"MUL r7.w, r7.w, c4.x;\n"
				"FRC r7.w, r7.w;\n"
				"MAD r7.w, r7.w, c4.w, c4.y;\n"
				"FRC r11.w, r7.w;\n"
				"ADD r7.w, r7.w, -r11.w;\n"
				"ADD r11.w, -r7.w, c4.z;\n"
				"CMP r7.w, r11.w, c5.x, r7.w;\n"
				"ADD r2.w, r7.w, c5.w;\n"
				"ADD r9.w, r7.w, c5.y;\n"
				"ADD r4.w, r7.w, c5.z;\n"
				"MOV r3.z, r7.x;\n"
				"MOV r3.w, r7.y;\n"
				"MOV r3.xy, r2.yzxw;\n"
				"MOV r10.xy, r9.yzxw;\n"
				"MOV r10.z, r4.x;\n"
				"MOV r10.w, r4.y;\n"
				"CMP r5, r4.w, r10, r3;\n"
				"MOV r0.xy, r11.yzxw;\n"
				"MOV r11.w, r11.x;\n"
				"MOV r0.z, r6.w;\n"
				"CMP r3, r9.w, r0, r5;\n"
				"MOV r10.z, r6.x;\n"
				"MOV r10.w, r6.y;\n"
				"MOV r10.xy, r4.yzxw;\n"
				"CMP r5, r2.w, r10, r3;\n"
				"MOV r1.y, r5.z;\n"
				"MOV r1.z, r5.w;\n"
				"CMP r8.w, r4.w, r4.z, r7.z;\n"
				"CMP r1.w, r9.w, r1.w, r8.w;\n"
				"CMP r1.x, r2.w, r6.z, r1.w;\n"
				"MOV r6.xyz, -r1.yzxw;\n"
				"MOV r7.xyz, r1.yzxw;\n"
				"MOV r8.w, r4.x;\n"
				"MOV r11.xyz, r4;\n"
				"MOV r0.xyz, r9;\n"
				"MOV r3.w, r9.x;\n"
				"MOV r0.w, r2.x;\n"
				"MOV r3.xyz, r2;\n"
				"CMP r4, r4.w, r3, r0;\n"
				"CMP r9, r9.w, r11, r4;\n"
				"CMP r2, r2.w, r8, r9;\n"
				"ADD r10.x, r6.x, r2.w;\n"
				"ADD r1.xyz, r6, r2;\n"
				"ADD r10.yz, r5.zxyw, r6;\n"
				"DP3 r1.w, r10, r10;\n"
				"ADD r1.w, -r1.w, c1.x;\n"
				"MOV r2.w, c3.x;\n"
				"CMP r5.w, r1.w, r2.w, c5.x;\n"
				"MOV r2.w, c4.w;\n"
				"CMP r1.w, r1.w, r2.w, c5.x;\n"
				"DP3 r6.w, r1, r1;\n"
				"ADD r11.w, -r6.w, c1.x;\n"
				"MOV r2.w, c3.x;\n"
				"CMP r0.w, r11.w, r2.w, c5.x;\n"
				"CMP r3.w, r11.w, c3.w, r1.w;\n"
				"MUL r4.w, r5.w, r0.w;\n"
				"CMP r7.w, -r4.w, c3.y, r3.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:3:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 0)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[5], RECT;\n"
				"TEX r7, t1, texture[12], RECT;\n"
				"TEX r2, t0, texture[3], RECT;\n"
				"TEX r9, t1, texture[9], RECT;\n"
				"TEX r4, t1, texture[7], RECT;\n"
				"TEX r11, t0, texture[2], RECT;\n"
				"TEX r6, t0, texture[1], RECT;\n"
				"TEX r1, t1, texture[13], RECT;\n"
				"TEX r8, t1, texture[14], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r7.x, t2.x, c0.x, c0.z;\n"
				"MAD r7.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r7.x, r7.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r2.w, r0.w;\n"
				"ADD r0.w, r0.w, -r2.w;\n"
				"ADD r2.w, -r0.w, c4.z;\n"
				"CMP r0.w, r2.w, c5.x, r0.w;\n"
				"ADD r11.w, r0.w, c5.w;\n"
				"ADD r4.w, r0.w, c5.y;\n"
				"ADD r9.w, r0.w, c5.z;\n"
				"MOV r0.w, r7.w;\n"
				"MOV r2.w, r9.x;\n"
				"CMP r3, r9.w, r2, r0;\n"
				"MOV r10.w, r4.x;\n"
				"MOV r10.xyz, r11;\n"
				"CMP r5, r4.w, r10, r3;\n"
				"MOV r6.w, r11.x;\n"
				"CMP r7, r11.w, r6, r5;\n"
				"MOV r8.z, r7.w;\n"
				"MOV r1.x, r1.w;\n"
				"MOV r1.y, r8.w;\n"
				"CMP r9.xy, r9.w, r9.yzxw, r1;\n"
				"CMP r4.xy, r4.w, r4.yzxw, r9;\n"
				"CMP r8.xy, r11.w, r11.yzxw, r4;\n"
				"ADD r7.xyz, r7, -r8.zxyw;\n"
				"DP3 r8.w, r7, r7;\n"
				"ADD r8.w, -r8.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r8.w, r8.w, r1.w, c5.x;\n"
				"DP3 r0.w, r8, r8;\n"
				"MOV r2.xyz, r8.zxyw;\n"
				"MOV r1.w, c5.x;\n"
				"CMP r10.w, -r0.w, r1.w, c3.x;\n"
				"ADD r5.w, r8.w, r10.w;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r2.w, -r5.w, r1.w, c5.x;\n"
				"MOV oC0, r2;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:4:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 1)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[5], RECT;\n"
				"TEX r7, t0, texture[3], RECT;\n"
				"TEX r2, t1, texture[12], RECT;\n"
				"TEX r9, t0, texture[2], RECT;\n"
				"TEX r4, t1, texture[8], RECT;\n"
				"TEX r11, t0, texture[1], RECT;\n"
				"TEX r6, t1, texture[6], RECT;\n"
				"TEX r1, t1, texture[7], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r6.x, t2.x, c0.x, c0.z;\n"
				"MAD r6.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r6.x, r6.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r7.w, r0.w;\n"
				"ADD r0.w, r0.w, -r7.w;\n"
				"ADD r7.w, -r0.w, c4.z;\n"
				"CMP r0.w, r7.w, c5.x, r0.w;\n"
				"ADD r11.w, r0.w, c5.w;\n"
				"ADD r9.w, r0.w, c5.y;\n"
				"ADD r2.w, r0.w, c5.z;\n"
				"MOV r0.w, r2.x;\n"
				"MOV r7.w, r9.x;\n"
				"CMP r8, r2.w, r7, r0;\n"
				"CMP r6.xy, r2.w, r9.yzxw, r2.yzxw;\n"
				"MOV r3.xyz, r9;\n"
				"MOV r3.w, r4.x;\n"
				"CMP r10, r9.w, r3, r8;\n"
				"CMP r1.xy, r9.w, r4.yzxw, r6;\n"
				"MOV r6.y, r4.w;\n"
				"MOV r4.xyz, r11;\n"
				"MOV r4.w, r6.w;\n"
				"CMP r9, r11.w, r4, r10;\n"
				"MOV r11.z, r9.w;\n"
				"MOV r6.x, r1.w;\n"
				"CMP r11.xy, r11.w, r6, r1;\n"
				"ADD r9.xyz, r9, -r11.zxyw;\n"
				"DP3 r11.w, r9, r9;\n"
				"ADD r11.w, -r11.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r11.w, r11.w, r1.w, c5.x;\n"
				"DP3 r2.w, r11, r11;\n"
				"MOV r0.xyz, r11.zxyw;\n"
				"MOV r1.w, c5.x;\n"
				"CMP r8.w, -r2.w, r1.w, c3.x;\n"
				"ADD r3.w, r11.w, r8.w;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r0.w, -r3.w, r1.w, c5.x;\n"
				"MOV oC0, r0;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:5:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 2)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 8, 0, 2};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t1, texture[10], RECT;\n"
				"TEX r7, t0, texture[0], RECT;\n"
				"TEX r2, t0, texture[4], RECT;\n"
				"TEX r9, t0, texture[1], RECT;\n"
				"TEX r4, t1, texture[9], RECT;\n"
				"TEX r11, t0, texture[3], RECT;\n"
				"TEX r6, t0, texture[5], RECT;\n"
				"TEX r1, t1, texture[11], RECT;\n"
				"TEX r8, t0, texture[2], RECT;\n"
				"MOV r2.w, -c2.x;\n"
				"CMP r2.w, c2.x, r2.w, c2.x;\n"
				"MAD r0.x, t2.x, c0.x, c0.z;\n"
				"MAD r0.y, t2.y, c0.y, c0.w;\n"
				"CMP r2.w, -r2.w, r0.x, r0.y;\n"
				"MUL r2.w, r2.w, c4.x;\n"
				"FRC r2.w, r2.w;\n"
				"MAD r2.w, r2.w, c4.w, c4.y;\n"
				"FRC r7.w, r2.w;\n"
				"ADD r2.w, r2.w, -r7.w;\n"
				"ADD r7.w, -r2.w, c4.z;\n"
				"CMP r2.w, r7.w, c5.x, r2.w;\n"
				"ADD r11.w, r2.w, c5.w;\n"
				"ADD r8.w, r2.w, c5.y;\n"
				"ADD r6.w, r2.w, c5.z;\n"
				"MOV r3.z, r7.x;\n"
				"MOV r3.w, r7.y;\n"
				"MOV r0.xy, r2.yzxw;\n"
				"MOV r2.w, r2.x;\n"
				"MOV r3.xy, r9.yzxw;\n"
				"MOV r0.z, r4.w;\n"
				"CMP r10, r6.w, r0, r3;\n"
				"MOV r5.z, r4.x;\n"
				"MOV r5.w, r4.y;\n"
				"MOV r5.xy, r11.yzxw;\n"
				"CMP r3, r8.w, r5, r10;\n"
				"MOV r0.xy, r6.yzxw;\n"
				"MOV r0.z, r11.x;\n"
				"MOV r0.w, r11.y;\n"
				"CMP r10, r11.w, r0, r3;\n"
				"MOV r1.y, r10.z;\n"
				"MOV r1.z, r10.w;\n"
				"CMP r1.w, r6.w, r1.w, r7.z;\n"
				"CMP r1.w, r8.w, r4.z, r1.w;\n"
				"CMP r1.x, r11.w, r11.z, r1.w;\n"
				"MOV r4.xyz, -r1.yzxw;\n"
				"MOV r7.xyz, r1.yzxw;\n"
				"MOV r5.xyz, r9;\n"
				"MOV r9.w, r9.x;\n"
				"MOV r5.w, r6.x;\n"
				"MOV r9.xyz, r6;\n"
				"MOV r3.xyz, r8;\n"
				"MOV r3.w, r11.x;\n"
				"MOV r2.xyz, r11;\n"
				"CMP r6, r6.w, r2, r9;\n"
				"CMP r8, r8.w, r3, r6;\n"
				"CMP r11, r11.w, r5, r8;\n"
				"ADD r0.x, r4.x, r11.w;\n"
				"ADD r1.xyz, r4, r11;\n"
				"ADD r0.yz, r10.zxyw, r4;\n"
				"DP3 r1.w, r0, r0;\n"
				"ADD r1.w, -r1.w, c1.x;\n"
				"MOV r0.w, c3.x;\n"
				"CMP r10.w, r1.w, r0.w, c5.x;\n"
				"MOV r0.w, c4.w;\n"
				"CMP r1.w, r1.w, r0.w, c5.x;\n"
				"DP3 r4.w, r1, r1;\n"
				"ADD r9.w, -r4.w, c1.x;\n"
				"MOV r0.w, c3.x;\n"
				"CMP r3.w, r9.w, r0.w, c5.x;\n"
				"CMP r2.w, r9.w, c3.w, r1.w;\n"
				"MUL r6.w, r10.w, r3.w;\n"
				"CMP r7.w, -r6.w, c3.y, r2.w;\n"
				"MOV oC0, r7;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:6:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 3)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t1, texture[6], RECT;\n"
				"TEX r2, t1, texture[10], RECT;\n"
				"TEX r9, t0, texture[4], RECT;\n"
				"TEX r4, t0, texture[3], RECT;\n"
				"TEX r11, t0, texture[5], RECT;\n"
				"TEX r6, t1, texture[12], RECT;\n"
				"TEX r1, t1, texture[7], RECT;\n"
				"TEX r8, t1, texture[8], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r7.x, t2.x, c0.x, c0.z;\n"
				"MAD r7.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r7.x, r7.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r4.w, r0.w;\n"
				"ADD r0.w, r0.w, -r4.w;\n"
				"ADD r4.w, -r0.w, c4.z;\n"
				"CMP r0.w, r4.w, c5.x, r0.w;\n"
				"ADD r6.w, r0.w, c5.y;\n"
				"ADD r9.w, r0.w, c5.z;\n"
				"ADD r2.w, r0.w, c5.w;\n"
				"MOV r0.w, r7.w;\n"
				"MOV r3.w, r2.x;\n"
				"MOV r3.xyz, r9;\n"
				"CMP r10, r9.w, r3, r0;\n"
				"MOV r4.w, r9.x;\n"
				"CMP r5, r6.w, r4, r10;\n"
				"MOV r11.w, r6.x;\n"
				"CMP r7, r2.w, r11, r5;\n"
				"MOV r8.z, r7.w;\n"
				"MOV r1.x, r1.w;\n"
				"MOV r1.y, r8.w;\n"
				"CMP r2.xy, r9.w, r2.yzxw, r1;\n"
				"CMP r2.xy, r6.w, r9.yzxw, r2;\n"
				"CMP r8.xy, r2.w, r6.yzxw, r2;\n"
				"ADD r7.xyz, r7, -r8.zxyw;\n"
				"DP3 r8.w, r7, r7;\n"
				"ADD r8.w, -r8.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r8.w, r8.w, r1.w, c5.x;\n"
				"DP3 r9.w, r8, r8;\n"
				"MOV r0.xyz, r8.zxyw;\n"
				"MOV r1.w, c5.x;\n"
				"CMP r10.w, -r9.w, r1.w, c3.x;\n"
				"ADD r4.w, r8.w, r10.w;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r0.w, -r4.w, r1.w, c5.x;\n"
				"MOV oC0, r0;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:7:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 4)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[1], RECT;\n"
				"TEX r7, t1, texture[6], RECT;\n"
				"TEX r2, t0, texture[4], RECT;\n"
				"TEX r9, t1, texture[11], RECT;\n"
				"TEX r4, t0, texture[3], RECT;\n"
				"TEX r11, t1, texture[9], RECT;\n"
				"TEX r6, t0, texture[5], RECT;\n"
				"TEX r1, t1, texture[10], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r11.x, t2.x, c0.x, c0.z;\n"
				"MAD r11.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r11.x, r11.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r7.w, r0.w;\n"
				"ADD r0.w, r0.w, -r7.w;\n"
				"ADD r7.w, -r0.w, c4.z;\n"
				"CMP r0.w, r7.w, c5.x, r0.w;\n"
				"ADD r2.w, r0.w, c5.w;\n"
				"ADD r6.w, r0.w, c5.y;\n"
				"ADD r7.w, r0.w, c5.z;\n"
				"MOV r0.w, r7.x;\n"
				"MOV r8.xyz, r2;\n"
				"MOV r8.w, r9.x;\n"
				"CMP r3, r7.w, r8, r0;\n"
				"CMP r1.xy, r7.w, r9.yzxw, r7.yzxw;\n"
				"MOV r11.y, r9.w;\n"
				"MOV r4.w, r11.w;\n"
				"CMP r9, r6.w, r4, r3;\n"
				"MOV r10.xyz, r6;\n"
				"MOV r10.w, r2.x;\n"
				"CMP r5, r2.w, r10, r9;\n"
				"MOV r6.z, r5.w;\n"
				"MOV r11.x, r1.w;\n"
				"CMP r7.xy, r6.w, r11, r1;\n"
				"CMP r6.xy, r2.w, r2.yzxw, r7;\n"
				"ADD r5.xyz, r5, -r6.zxyw;\n"
				"DP3 r6.w, r5, r5;\n"
				"ADD r6.w, -r6.w, c1.x;\n"
				"MOV r2.w, c3.x;\n"
				"CMP r6.w, r6.w, r2.w, c5.x;\n"
				"DP3 r0.w, r6, r6;\n"
				"MOV r8.xyz, r6.zxyw;\n"
				"MOV r2.w, c5.x;\n"
				"CMP r1.w, -r0.w, r2.w, c3.x;\n"
				"ADD r4.w, r6.w, r1.w;\n"
				"MOV r2.w, c3.x;\n"
				"CMP r8.w, -r4.w, r2.w, c5.x;\n"
				"MOV oC0, r8;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:8:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 5)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 8, 0, 2};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t1, texture[13], RECT;\n"
				"TEX r7, t0, texture[2], RECT;\n"
				"TEX r2, t0, texture[4], RECT;\n"
				"TEX r9, t0, texture[1], RECT;\n"
				"TEX r4, t1, texture[12], RECT;\n"
				"TEX r11, t0, texture[3], RECT;\n"
				"TEX r6, t0, texture[5], RECT;\n"
				"TEX r1, t1, texture[14], RECT;\n"
				"TEX r8, t0, texture[0], RECT;\n"
				"MOV r2.w, -c2.x;\n"
				"CMP r2.w, c2.x, r2.w, c2.x;\n"
				"MAD r0.x, t2.x, c0.x, c0.z;\n"
				"MAD r0.y, t2.y, c0.y, c0.w;\n"
				"CMP r2.w, -r2.w, r0.x, r0.y;\n"
				"MUL r2.w, r2.w, c4.x;\n"
				"FRC r2.w, r2.w;\n"
				"MAD r2.w, r2.w, c4.w, c4.y;\n"
				"FRC r7.w, r2.w;\n"
				"ADD r2.w, r2.w, -r7.w;\n"
				"ADD r7.w, -r2.w, c4.z;\n"
				"CMP r2.w, r7.w, c5.x, r2.w;\n"
				"ADD r11.w, r2.w, c5.w;\n"
				"ADD r9.w, r2.w, c5.y;\n"
				"ADD r6.w, r2.w, c5.z;\n"
				"MOV r3.z, r7.x;\n"
				"MOV r3.w, r7.y;\n"
				"MOV r10.xy, r2.yzxw;\n"
				"MOV r2.w, r2.x;\n"
				"MOV r3.xy, r9.yzxw;\n"
				"MOV r10.z, r4.x;\n"
				"MOV r10.w, r4.y;\n"
				"CMP r5, r6.w, r10, r3;\n"
				"MOV r3.xy, r11.yzxw;\n"
				"MOV r3.z, r6.x;\n"
				"MOV r3.w, r6.y;\n"
				"CMP r10, r9.w, r3, r5;\n"
				"MOV r0.z, r4.w;\n"
				"CMP r8.w, r6.w, r4.z, r7.z;\n"
				"MOV r0.xy, r6.yzxw;\n"
				"CMP r4, r11.w, r0, r10;\n"
				"MOV r1.y, r4.z;\n"
				"MOV r1.z, r4.w;\n"
				"CMP r8.w, r9.w, r6.z, r8.w;\n"
				"CMP r1.x, r11.w, r1.w, r8.w;\n"
				"MOV r7.xyz, -r1.yzxw;\n"
				"MOV r5.xyz, r1.yzxw;\n"
				"MOV r8.w, r6.x;\n"
				"MOV r2.xyz, r6;\n"
				"MOV r3.xyz, r9;\n"
				"MOV r10.w, r9.x;\n"
				"MOV r3.w, r11.x;\n"
				"MOV r10.xyz, r11;\n"
				"CMP r6, r6.w, r2, r10;\n"
				"CMP r9, r9.w, r3, r6;\n"
				"CMP r11, r11.w, r8, r9;\n"
				"ADD r0.x, r7.x, r11.w;\n"
				"ADD r1.xyz, r7, r11;\n"
				"ADD r0.yz, r4.zxyw, r7;\n"
				"DP3 r1.w, r0, r0;\n"
				"ADD r1.w, -r1.w, c1.x;\n"
				"MOV r0.w, c3.x;\n"
				"CMP r4.w, r1.w, r0.w, c5.x;\n"
				"DP3 r7.w, r1, r1;\n"
				"ADD r2.w, -r7.w, c1.x;\n"
				"CMP r3.w, r2.w, r0.w, c5.x;\n"
				"MOV r0.w, c4.w;\n"
				"CMP r10.w, r2.w, r0.w, c5.x;\n"
				"MUL r6.w, r4.w, r3.w;\n"
				"CMP r11.w, r1.w, c3.w, r10.w;\n"
				"CMP r5.w, -r6.w, c3.y, r11.w;\n"
				"MOV oC0, r5;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:9:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 6)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[3], RECT;\n"
				"TEX r7, t1, texture[9], RECT;\n"
				"TEX r2, t0, texture[5], RECT;\n"
				"TEX r9, t0, texture[0], RECT;\n"
				"TEX r4, t0, texture[1], RECT;\n"
				"TEX r11, t1, texture[6], RECT;\n"
				"TEX r6, t1, texture[13], RECT;\n"
				"TEX r1, t1, texture[10], RECT;\n"
				"TEX r8, t1, texture[11], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r7.x, t2.x, c0.x, c0.z;\n"
				"MAD r7.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r7.x, r7.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r2.w, r0.w;\n"
				"ADD r0.w, r0.w, -r2.w;\n"
				"ADD r2.w, -r0.w, c4.z;\n"
				"CMP r0.w, r2.w, c5.x, r0.w;\n"
				"ADD r9.w, r0.w, c5.y;\n"
				"ADD r11.w, r0.w, c5.z;\n"
				"ADD r6.w, r0.w, c5.w;\n"
				"MOV r0.w, r7.w;\n"
				"MOV r2.w, r9.x;\n"
				"CMP r3, r11.w, r2, r0;\n"
				"MOV r4.w, r11.x;\n"
				"CMP r10, r9.w, r4, r3;\n"
				"MOV r5.w, r6.x;\n"
				"MOV r5.xyz, r9;\n"
				"CMP r7, r6.w, r5, r10;\n"
				"MOV r8.z, r7.w;\n"
				"MOV r1.x, r1.w;\n"
				"MOV r1.y, r8.w;\n"
				"CMP r9.xy, r11.w, r9.yzxw, r1;\n"
				"CMP r11.xy, r9.w, r11.yzxw, r9;\n"
				"CMP r8.xy, r6.w, r6.yzxw, r11;\n"
				"ADD r7.xyz, r7, -r8.zxyw;\n"
				"DP3 r8.w, r7, r7;\n"
				"ADD r8.w, -r8.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r8.w, r8.w, r1.w, c5.x;\n"
				"DP3 r0.w, r8, r8;\n"
				"MOV r2.xyz, r8.zxyw;\n"
				"MOV r1.w, c5.x;\n"
				"CMP r4.w, -r0.w, r1.w, c3.x;\n"
				"ADD r10.w, r8.w, r4.w;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r2.w, -r10.w, r1.w, c5.x;\n"
				"MOV oC0, r2;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:10:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 7)
			)
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"PARAM c0 = program.local[0];\n"
				"PARAM c1 = program.local[1];\n"
				"PARAM c2 = program.local[2];\n"
				"PARAM c3 = {1, 0, 0, 0};\n"
				"PARAM c4 = {0.25, 0.5, 3.5, 4};\n"
				"PARAM c5 = {0, -1.5, -2.5, -0.5};\n"
				"OUTPUT oC0 = result.color;\n"
				"TEMP r0;\n"
				"TEMP r1;\n"
				"TEMP r10;\n"
				"TEMP r11;\n"
				"TEMP r2;\n"
				"TEMP r3;\n"
				"TEMP r4;\n"
				"TEMP r5;\n"
				"TEMP r6;\n"
				"TEMP r7;\n"
				"TEMP r8;\n"
				"TEMP r9;\n"
				"ATTRIB t0 = fragment.texcoord[0];\n"
				"ATTRIB t1 = fragment.texcoord[1];\n"
				"ATTRIB t2 = fragment.texcoord[2];\n"
				"TEX r0, t0, texture[3], RECT;\n"
				"TEX r7, t0, texture[5], RECT;\n"
				"TEX r2, t1, texture[12], RECT;\n"
				"TEX r9, t1, texture[9], RECT;\n"
				"TEX r4, t0, texture[1], RECT;\n"
				"TEX r11, t0, texture[0], RECT;\n"
				"TEX r6, t1, texture[14], RECT;\n"
				"TEX r1, t1, texture[13], RECT;\n"
				"MOV r0.w, -c2.x;\n"
				"CMP r0.w, c2.x, r0.w, c2.x;\n"
				"MAD r2.x, t2.x, c0.x, c0.z;\n"
				"MAD r2.y, t2.y, c0.y, c0.w;\n"
				"CMP r0.w, -r0.w, r2.x, r2.y;\n"
				"MUL r0.w, r0.w, c4.x;\n"
				"FRC r0.w, r0.w;\n"
				"MAD r0.w, r0.w, c4.w, c4.y;\n"
				"FRC r7.w, r0.w;\n"
				"ADD r0.w, r0.w, -r7.w;\n"
				"ADD r7.w, -r0.w, c4.z;\n"
				"CMP r4.w, r7.w, c5.x, r0.w;\n"
				"ADD r11.w, r4.w, c5.z;\n"
				"MOV r7.w, r2.w;\n"
				"MOV r0.w, r9.x;\n"
				"CMP r8, r11.w, r7, r0;\n"
				"ADD r9.w, r4.w, c5.y;\n"
				"ADD r4.w, r4.w, c5.w;\n"
				"MOV r3.xyz, r4;\n"
				"MOV r3.w, r11.x;\n"
				"CMP r10, r9.w, r3, r8;\n"
				"MOV r5.xyz, r11;\n"
				"MOV r5.w, r6.x;\n"
				"CMP r2, r4.w, r5, r10;\n"
				"MOV r4.z, r2.w;\n"
				"MOV r1.x, r1.w;\n"
				"MOV r1.y, r6.w;\n"
				"CMP r9.xy, r11.w, r1, r9.yzxw;\n"
				"CMP r11.xy, r9.w, r11.yzxw, r9;\n"
				"CMP r4.xy, r4.w, r6.yzxw, r11;\n"
				"ADD r2.xyz, r2, -r4.zxyw;\n"
				"DP3 r4.w, r2, r2;\n"
				"ADD r4.w, -r4.w, c1.x;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r4.w, r4.w, r1.w, c5.x;\n"
				"DP3 r7.w, r4, r4;\n"
				"MOV r0.xyz, r4.zxyw;\n"
				"MOV r1.w, c5.x;\n"
				"CMP r3.w, -r7.w, r1.w, c3.x;\n"
				"ADD r10.w, r4.w, r3.w;\n"
				"MOV r1.w, c3.x;\n"
				"CMP r0.w, -r10.w, r1.w, c5.x;\n"
				"MOV oC0, r0;\n"
				"END\n"
				" \n"
				"##!!BRCC\n"
				"##narg:6\n"
				"##s:0:splittri\n"
				"##s:0:newnei\n"
				"##oi:0:tri\n"
				"##o:0:neighbor\n"
				"##c:1:epsilon\n"
				"##c:1:stretchX\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:11:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(3, kOutputConstant_Indexof)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(1, 1)
				.sampler(1, 2)
				.sampler(1, 3)
				.sampler(1, 4)
				.sampler(1, 5)
				.sampler(2, 0)
				.sampler(2, 1)
				.sampler(2, 2)
				.sampler(2, 3)
				.sampler(2, 4)
				.sampler(2, 5)
				.sampler(2, 6)
				.sampler(2, 7)
				.sampler(2, 8)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kOutputInterpolant_Position)
				.output(4, 8)
			)
		);
	static const void* __linearReorgSplitTriangles_arb = &__linearReorgSplitTriangles_arb_desc;
}

void __linearReorgSplitTriangles_cpu_inner (const __cpustruct_SplitTri &splittri,
                                             const __cpustruct_Neighbor &newnei,
                                             __cpustruct_STri &tri,
                                             __cpustruct_Neighbor &neighbor,
                                             const __BrtFloat1  &epsilon,
                                             const __BrtFloat1  &stretchX,
                                             const __BrtFloat4 &__indexof_tri){
  __BrtFloat1  sindex = stretchX.questioncolon((__indexof_tri).swizzle1(maskX),(__indexof_tri).swizzle1(maskY));
  __BrtFloat1  unclampedwhich = __round_cpu_inner(__fmod_cpu_inner(sindex,__BrtFloat1((float)4)));
  __BrtFloat1  which = (unclampedwhich > __BrtFloat1(3.500000f)).questioncolon(__BrtFloat1((float)0),unclampedwhich);
  __BrtFloat4  ac = splittri.AC;
  __BrtFloat4  ab = splittri.AB;
  __BrtFloat4  bc = splittri.BC;
  __BrtFloat4  a = splittri.A;
  __BrtFloat4  b = splittri.B;
  __BrtFloat4  c = splittri.C;
  __BrtFloat4  BC_C = __BrtFloat4(newnei.BC.swizzle1(maskW), newnei.ACC.swizzle1(maskW), newnei.BCC.swizzle1(maskW), __BrtFloat1((float)1));
  __BrtFloat4  AC_A = __BrtFloat4(newnei.AC.swizzle1(maskW), newnei.AAB.swizzle1(maskW), newnei.AAC.swizzle1(maskW), __BrtFloat1((float)1));
  __BrtFloat4  AB_B = __BrtFloat4(newnei.AB.swizzle1(maskW), newnei.BBC.swizzle1(maskW), newnei.ABB.swizzle1(maskW), __BrtFloat1((float)1));

  if (which < __BrtFloat1(0.500000f))
  {
    tri.A = __identity_cpu_inner(a,__BrtFloat1((float)1));
    tri.B = __identity_cpu_inner(ab,__BrtFloat1((float)1));
    tri.C = __identity_cpu_inner(ac,__BrtFloat1((float)1));
    neighbor.BCC = c;
    neighbor.BC = bc;
    neighbor.BBC = b;
    neighbor.ABB = AB_B;
    neighbor.AB = newnei.AB;
    neighbor.AAB = newnei.AAB;
    neighbor.AAC = newnei.AAC;
    neighbor.AC = AC_A;
    neighbor.ACC = newnei.AC;
  }

  else
    if (which < __BrtFloat1(1.500000f))
    {
      tri.A = __identity_cpu_inner(ab,__BrtFloat1((float)1));
      tri.B = __identity_cpu_inner(b,__BrtFloat1((float)1));
      tri.C = __identity_cpu_inner(bc,__BrtFloat1((float)1));
      neighbor.BCC = BC_C;
      neighbor.BC = newnei.BC;
      neighbor.BBC = newnei.BBC;
      neighbor.ABB = newnei.ABB;
      neighbor.AB = AB_B;
      neighbor.AAB = newnei.AB;
      neighbor.AAC = a;
      neighbor.AC = ac;
      neighbor.ACC = c;
    }

    else
      if (which < __BrtFloat1(2.500000f))
      {
        tri.A = __identity_cpu_inner(ac,__BrtFloat1((float)1));
        tri.B = __identity_cpu_inner(bc,__BrtFloat1((float)1));
        tri.C = __identity_cpu_inner(c,__BrtFloat1((float)1));
        neighbor.BCC = newnei.BCC;
        neighbor.BC = BC_C;
        neighbor.BBC = newnei.BC;
        neighbor.ABB = b;
        neighbor.AB = ab;
        neighbor.AAB = a;
        neighbor.AAC = AC_A;
        neighbor.AC = newnei.AC;
        neighbor.ACC = newnei.ACC;
      }

      else
      {
        tri.A = __identity_cpu_inner(bc,__BrtFloat1((float)1));
        tri.B = __identity_cpu_inner(ac,__BrtFloat1((float)1));
        tri.C = __identity_cpu_inner(ab,__BrtFloat1((float)1));
        neighbor.BCC = newnei.AB;
        neighbor.BC = a;
        neighbor.BBC = AC_A;
        neighbor.ABB = newnei.AC;
        neighbor.AB = c;
        neighbor.AAB = BC_C;
        neighbor.AAC = newnei.BC;
        neighbor.AC = b;
        neighbor.ACC = AB_B;
      }

  __smallEnough_cpu_inner(tri,neighbor,tri,neighbor,epsilon);
}
void  __linearReorgSplitTriangles_cpu (const std::vector<void *>&args,
                                       const std::vector<const unsigned int *>&extents,
                                       const std::vector<unsigned int>&dims,
                                       unsigned int mapbegin, 
                                       unsigned int mapextent) {
  __cpustruct_SplitTri*arg0 = (__cpustruct_SplitTri*)args[0];
  __cpustruct_Neighbor*arg1 = (__cpustruct_Neighbor*)args[1];
  __cpustruct_STri*arg2 = (__cpustruct_STri*)args[2];
  __cpustruct_Neighbor*arg3 = (__cpustruct_Neighbor*)args[3];
  __BrtFloat1 *arg4 = (__BrtFloat1 *)args[4];
  __BrtFloat1 *arg5 = (__BrtFloat1 *)args[5];
  unsigned int dim=dims[2];
  unsigned int newline=extents[2][dim-1];
  unsigned int ratio0 = extents[2][dim-1]/extents[0][dim-1];
  unsigned int scale0=extents[0][dim-1]/extents[2][dim-1];
  if (scale0<1) scale0 = 1;
  unsigned int ratioiter0 = 0;
  if (ratio0) ratioiter0 = mapbegin%ratio0;
  unsigned int iter0 = getIndexOf(mapbegin,extents[0], dim, extents[2]);
  unsigned int ratio1 = extents[2][dim-1]/extents[1][dim-1];
  unsigned int scale1=extents[1][dim-1]/extents[2][dim-1];
  if (scale1<1) scale1 = 1;
  unsigned int ratioiter1 = 0;
  if (ratio1) ratioiter1 = mapbegin%ratio1;
  unsigned int iter1 = getIndexOf(mapbegin,extents[1], dim, extents[2]);
  arg2+=mapbegin;
  unsigned int ratio3 = extents[2][dim-1]/extents[3][dim-1];
  unsigned int scale3=extents[3][dim-1]/extents[2][dim-1];
  if (scale3<1) scale3 = 1;
  unsigned int ratioiter3 = 0;
  if (ratio3) ratioiter3 = mapbegin%ratio3;
  unsigned int iter3 = getIndexOf(mapbegin,extents[3], dim, extents[2]);
  ;
__BrtFloat4 indexof2 = computeIndexOf(mapbegin, extents[2], dims[2], extents[2]);
  unsigned int i=0; 
  while (i<mapextent) {
    __linearReorgSplitTriangles_cpu_inner (
      *(arg0 + iter0),
      *(arg1 + iter1),
      *arg2,
      *(arg3 + iter3),
      *arg4,
      *arg5,
      indexof2);
    i++;
    if (++ratioiter0>=ratio0){
      ratioiter0=0;
      iter0+=scale0;
    }
    if (++ratioiter1>=ratio1){
      ratioiter1=0;
      iter1+=scale1;
    }
    ++arg2;
indexof2.unsafeGetAt(0)++;
    if (++ratioiter3>=ratio3){
      ratioiter3=0;
      iter3+=scale3;
    }
    if ((mapbegin+i)%newline==0) {
      iter0=getIndexOf(i+mapbegin,extents[0],dim, extents[2]);
      iter1=getIndexOf(i+mapbegin,extents[1],dim, extents[2]);
      indexof2 = computeReferenceIndexOf(i+mapbegin, extents[2],dim);
      iter3=getIndexOf(i+mapbegin,extents[3],dim, extents[2]);
    }
  }
}

void  linearReorgSplitTriangles (::brook::stream splittri,
		::brook::stream newnei,
		::brook::stream tri,
		::brook::stream neighbor,
		const float  epsilon,
		const float  stretchX) {
  static const void *__linearReorgSplitTriangles_fp[] = {
     "fp30", __linearReorgSplitTriangles_fp30,
     "arb", __linearReorgSplitTriangles_arb,
     "ps20", __linearReorgSplitTriangles_ps20,
     "cpu", (void *) __linearReorgSplitTriangles_cpu,
     NULL, NULL };
  static __BRTKernel k(__linearReorgSplitTriangles_fp);

  k->PushStream(splittri);
  k->PushStream(newnei);
  k->PushOutput(tri);
  k->PushOutput(neighbor);
  k->PushConstant(epsilon);
  k->PushConstant(stretchX);
  k->Map();

}


#if 0

struct VertexArray {
  float3  *v;
  unsigned int  size;
  unsigned int  alloc;
};
void  initVertexArray(struct VertexArray  *v)
{
  v->v = 0;
  v->size = 0;
  v->alloc = 0;
}

void  destroyVertexArray(struct VertexArray  *v)
{
  if (v->v)
    free(v->v);
}

void  expandVertexArray(struct VertexArray  *v, unsigned int  more)
{
  v->size += more;
  while (v->size > v->alloc)
  {
    if (v->alloc == 0)
      v->alloc = 16;
    v->alloc *= 2;
    v->v = (float3 *) (realloc(v->v,v->alloc * sizeof(float3 ) ));
  }

}

void  pushBackVertexArray(struct VertexArray  *v, float3  f)
{
  if (++v->size > v->alloc)
  {
    if (v->alloc == 0)
      v->alloc = 16;
    v->alloc *= 2;
    v->v = (float3 *) (realloc(v->v,v->alloc * sizeof(float3 ) ));
  }

  v->v[v->size - 1] = f;
}

static int  toi(float  f)
{
  return (int ) (f);
}

void  subdivide(::brook::stream (*neighbors), ::brook::stream (*triangles), struct VertexArray  *output, float  epsilon, int  counter)
{
  unsigned int  streamY = toi(streamSize(*triangles).y);
  unsigned int  streamX = toi(streamSize(*triangles).x);
  unsigned char  snpSize = 0;

  subdivisiondepth++;
  {
    ::brook::stream shouldProduce(::brook::getStreamType(( float2  *)0), streamY , 0,-1);
    ::brook::stream shouldNotProduce(::brook::getStreamType(( float2  *)0), streamY , 0,-1);

    produceTriP(*triangles,shouldProduce,shouldNotProduce);
    assert((int ) (streamX) == toi(streamSize(shouldProduce).x));
    {
      int  wosizex = 3 * toi(streamSize(shouldNotProduce).x);
      int  wosizey = toi(streamSize(shouldNotProduce).y);
      ::brook::stream outputTri(::brook::getStreamType(( float3  *)0), wosizey , wosizex,-1);

      if (wosizex && wosizey)
        writeFinalTriangles(*triangles,shouldNotProduce,outputTri);
      streamY = toi(streamSize(shouldProduce).y);
      if (streamY && streamX)
      {
        float  stretchX = (streamY * 4 > 2048) ? (0.000000f) : (1.000000f);
        ::brook::stream sharedNeighbors(::brook::getStreamType(( Neighbor  *)0), streamY , streamX,-1);
        ::brook::stream sharedTriangles(::brook::getStreamType(( SplitTri  *)0), streamY , streamX,-1);
        ::brook::stream newNeighbors(::brook::getStreamType(( Neighbor  *)0), (stretchX) ? (streamY) : (streamY * 4) , (stretchX) ? (streamX * 4) : (streamX),-1);
        ::brook::stream newTriangles(::brook::getStreamType(( STri  *)0), (stretchX) ? (streamY) : (streamY * 4) , (stretchX) ? (streamX * 4) : (streamX),-1);

        computeNeighbors(*triangles,*neighbors,shouldProduce,sharedNeighbors);
        splitTriangles(*triangles,*neighbors,shouldProduce,sharedTriangles);
        linearReorgSplitTriangles(sharedTriangles,sharedNeighbors,newTriangles,newNeighbors,epsilon,stretchX);
        streamSwap(*triangles,newTriangles);
        streamSwap(*neighbors,newNeighbors);
        if (debugLoop)
        {
          STri  *tri;
          Neighbor  *neigh;
          Neighbor  *checknei;
          unsigned int  totalsize;

          totalsize = (unsigned int ) (streamSize(*triangles).x) * (unsigned int ) (streamSize(*triangles).y);
          tri = (STri *) (malloc(sizeof(STri )  * totalsize));
          neigh = (Neighbor *) (malloc(sizeof(Neighbor )  * totalsize));
          checknei = (Neighbor *) (malloc(sizeof(Neighbor )  * totalsize));
          streamWrite(*neighbors,neigh);
          streamWrite(*triangles,tri);
          recomputeNeighbors(tri,checknei,totalsize);
          checkNeighbors(tri,neigh,checknei,totalsize);
          free(tri);
          free(neigh);
          free(checknei);
        }

      }

      if (streamSize(shouldNotProduce).y)
      {
        snpSize = 1;
        if (!low_texture_ram && streamSize(shouldProduce).y && streamSize(shouldProduce).x && counter < counterMax)
        {
          subdivide(neighbors,triangles,output,epsilon,counter + 1);
        }

        wosizey = output->size;
        expandVertexArray(output,(unsigned int ) (streamSize(outputTri).x * streamSize(outputTri).y));
        streamWrite(outputTri,output->v + wosizey);
      }

    }

    if (counter >= counterMax)
    {
      ::brook::stream outputTri(::brook::getStreamType(( float3  *)0), toi(streamSize(*triangles).y) , toi(streamSize(*triangles).x * 3),-1);
      int  sizey = output->size;

      copyFinalTriangles(*triangles,outputTri);
      expandVertexArray(output,3 * toi(streamSize(*triangles).y) * toi(streamSize(*triangles).x));
      streamWrite(outputTri,output->v + sizey);
    }

  }

  if ((low_texture_ram || snpSize == 0) && streamY && streamX && counter < counterMax)
  {
    subdivide(neighbors,triangles,output,epsilon,counter + 1);
  }

}

extern unsigned int  loadModelData(const char  *filename, STri  **tris, Neighbor  **nei);
STri  *createTriangles(unsigned int  howMany)
{
  STri  *ret;

  ret = (STri *) (malloc(sizeof(STri )  * howMany));
  memset(ret,0,sizeof(STri )  * howMany);
  return ret;
}

Neighbor  *createNeighbors(STri  *tri, unsigned int  howMany)
{
  Neighbor  *ret;

  ret = (Neighbor *) (malloc(sizeof(Neighbor )  * howMany));
  memset(ret,0,sizeof(Neighbor )  * howMany);
  return ret;
}

void  bestHeiWid(unsigned int  totalSize, unsigned int  *hei, unsigned int  *wid)
{
  int  slop = totalSize * 2;
  int  maxy = 0;
  int  best = 11;
  unsigned int  i;

  for (i = 0; i < 12; ++i)
  {
    int  x = 1 << i;
    int  y = totalSize / x + ((totalSize % x == 0) ? (0) : (1));
    int  tslop;

    if (x > 2048 || y > 2048)
      continue;
    tslop = x * y - totalSize;
    if (tslop < 0)
      continue;
    if (tslop < slop && y > maxy || y > maxy && tslop < 2 * y / 3)
    {
      *hei = y;
      *wid = x;
      maxy = y;
      slop = tslop;
      best = i;
    }

  }

}

unsigned int  bestHeight(unsigned int  totalSize)
{
  unsigned int  hei = 0;
  unsigned int  wid = 0;

  bestHeiWid(totalSize,&hei,&wid);
  return hei;
}

unsigned int  bestWidth(unsigned int  totalSize)
{
  unsigned int  hei = 0;
  unsigned int  wid = 0;

  bestHeiWid(totalSize,&hei,&wid);
  return wid;
}

extern void  computeFunctionCallPattern(float  epsilon, int  argc, char  **argv, int  numTri, STri  *triangles, Neighbor  *neigh);
unsigned int  loadModelData(char  *file, STri  **triangles, Neighbor  **neighbors);
int  subdivision(int  argc, char  **argv)
{
  unsigned int  i = 0;
  unsigned int  vcount = 0;
  float  epsilon = 0.000100f;
  STri  *triangledata = 0;
  Neighbor  *neighbordata = 0;
  unsigned int  numTriangles;

  neighboreps = epsilon / 1024.000000f;
  for (i = 0; i < (unsigned int ) (argc); ++i)
  {
    char  match = 0;
    int  j;

    if (strcmp(argv[i],"-debug") == 0)
    {
      match = 1;
      debugLoop = 1;
    }

    if (strncmp(argv[i],"-epsilon",8) == 0)
    {
      epsilon = (float ) (atof(argv[i] + 8));
      match = 1;
    }

    if (strncmp(argv[i],"-counter",8) == 0)
    {
      counterMax = (int ) (atoi(argv[i] + 8));
      match = 1;
    }

    if (strncmp(argv[i],"-eps",4) == 0)
    {
      epsilon = (float ) (atof(argv[i] + 4));
      match = 1;
    }

    if (match)
    {
      for (j = i + 1; j < argc; ++j)
        argv[j - 1] = argv[j];
      argc--;
      i--;
    }

  }

  epsilon *= epsilon;
  numTriangles = loadModelData((argc > 1) ? (argv[1]) : ("dragon.ply"),&triangledata,&neighbordata);
  {
    ::brook::stream neighbors(::brook::getStreamType(( Neighbor  *)0), bestHeight(numTriangles) , bestWidth(numTriangles),-1);
    ::brook::stream triangles(::brook::getStreamType(( STri  *)0), bestHeight(numTriangles) , bestWidth(numTriangles),-1);
    struct VertexArray  v;

    streamRead(triangles,triangledata);
    streamRead(neighbors,neighbordata);
    initVertexArray(&v);
    smallEnough(triangles,neighbors,triangles,neighbors,epsilon);
    if (0)
    {
      for (i = 0; i < numTriangles; i++)
      {
        int  j;

        fprintf(stderr,"#\n");
        for (j = 0; j < 9; j++)
        {
          float4  *temp;

          temp = (float4 *) (&neighbordata[i]) + j;
          fprintf(stderr,"%f, %f, %f, %f\n",temp->x,temp->y,temp->z,temp->w);
        }

      }

    }

    if (1)
      subdivide(&neighbors,&triangles,&v,epsilon,0);
    else
    {
      ::brook::stream outputTri(::brook::getStreamType(( float3  *)0), toi(streamSize(triangles).y) , toi(streamSize(triangles).x * 3),-1);
      int  sizey = v.size;

      copyFinalTriangles(triangles,outputTri);
      expandVertexArray(&v,3 * toi(streamSize(triangles).y) * toi(streamSize(triangles).x));
      streamWrite(outputTri,v.v + sizey);
    }

    printf("%d\n",v.size);
    for (i = 0; i < v.size; i++)
    {
      printf("%3.3f, %3.3f, %3.3f\n",v.v[i].x,v.v[i].y,v.v[i].z);
    }

    vcount = numTriangles;
    for (i = 0; i < (unsigned int ) (subdivisiondepth); ++i)
    {
      vcount *= 4;
    }

    fprintf(stderr,"Num Rounds %d Adaptive Num Triangles %d Num Triangles %d\n",subdivisiondepth,v.size / 3,vcount);
    return 0;
  }

}

#endif


