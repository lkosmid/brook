
/**This kernel tests if the data provided is above the cutoff of zero
 * If it is, it returns the single bit passed into the index (ex 1,2,4,...,128)
 */
kernel float test(float vol<>,float index<>){
  return (vol>.5)?index:0;
}

/** This kernel is for the experimental dataset and evaluates
 *  the neighbor values, and gets the lookup index for the triangle dataset
 *  Only pushes a result if the index is not 0 or 255 (empty cases)
 **/
kernel void processSlice (float curgather[][],
                          float nextslice[][],
                          vout [1]float4 vertex<>,
                          iter float2 center<>,
                          iter float2 up<>,
                          iter float2 forward<>,
                          iter float2 upforward<>,
                          float2 slice) {
  float a=
    test(curgather[center],1.0f)+
    test(curgather[up],2.0f)+
    test(curgather[upforward],4.0f)+
    test(curgather[forward],8.0f)+
    test(nextslice[center],16.0f)+
    test(nextslice[up],32.0f)+
    test(nextslice[upforward],64.0f)+
    test(nextslice[forward],128.0);
  if (a>0.5f&&a<(2.0f+4.0f+8.0f+16.0f+32.0f+64.0f+128.0f+0.5f)) {
    vertex=float4(center.x,center.y,slice.x,a);
    push(vertex);
  }
}

/** This kernel is for the synthetic sphere dataset and evaluates
 *  the neighbor values, and gets the lookup index for the triangle dataset
 *  It pushes a negative index in the event that all or none of the neighbors
 *  are dense enough */
kernel void processSliceNoCompact (float curgather[][],
                                   float nextslice[][],
                                   out float4 vertex<>,
                                   iter float2 center<>,
                                   iter float2 up<>,
                                   iter float2 forward<>,
                                   iter float2 upforward<>,
                                   float2 slice) {
  float a=
    test(curgather[center],1.0f)+
    test(curgather[up],2.0f)+
    test(curgather[upforward],4.0f)+
    test(curgather[forward],8.0f)+
    test(nextslice[center],16.0f)+
    test(nextslice[up],32.0f)+
    test(nextslice[upforward],64.0f)+
    test(nextslice[forward],128.0);
  if (a>0.5f&&a<(2.0f+4.0f+8.0f+16.0f+32.0f+64.0f+128.0f+0.5f)) {
    vertex=float4(center.x,center.y,slice.x,a);
  }else {
    vertex=float4(-1,-1,-1,-1);
  }
  
}
                           
/** This kernel outputs exactly 5 triangles for each input
 *  lookup value. It assumes the sentinel is immutable with respect to 
 *  addition (i.e. inf behaves this way)
 *  Given that up to five triangles are produced for each volumetric datapoint
 *  exactly five triangles are outputted reguardless.
 *  The vertex is determined based on the index mod 3... the output triangles
 *  are stretched to 3x the input so that each of the 3 requisite vertices
 *  are produced per output.
 */
kernel void processTrianglesNoCompact(out float3 trianglesA<>, 
                                      out float3 trianglesB<>, 
                                      out float3 trianglesC<>,
                                      out float3 trianglesD<>, 
                                      out float3 trianglesE<>, 
                                      float4 vertices1<>,
                                      float3 volumeTriangles[][]) {
  float4 whichVolumeTriangle={round(fmod((indexof trianglesA).x,3)),vertices1.w,0,0};
  float3 vertices=vertices1.xyz;
  if (!(whichVolumeTriangle.y<256&&whichVolumeTriangle.y>=0))

    whichVolumeTriangle.y=0;

  if (whichVolumeTriangle.x+.5>3) whichVolumeTriangle.x=0;
  trianglesA=vertices.xyz+volumeTriangles[whichVolumeTriangle];
  whichVolumeTriangle.x+=3;
  trianglesB=vertices.xyz+volumeTriangles[whichVolumeTriangle];
  whichVolumeTriangle.x+=3;
  trianglesC=vertices.xyz+volumeTriangles[whichVolumeTriangle];
  whichVolumeTriangle.x+=3;  
  trianglesD=vertices.xyz+volumeTriangles[whichVolumeTriangle];  
  whichVolumeTriangle.x+=3;  
  trianglesE=vertices.xyz+volumeTriangles[whichVolumeTriangle];  
}

/** This kernel outputs exactly 5 triangles for each input
 *  lookup value. It assumes the sentinel is not between -.75 and .75
 *  Given that up to five triangles are produced for each volumetric datapoint
 *  The output stream is stretched to 4x the input stream size, and either 0 or
 *  3 vertices are produced for the given volumeTriangle lookup.
 */

kernel void processTriangles(vout[3] float3 triangles<>, 
                             float4 vertices<>,
                             float3 volumeTriangles[][],
                             iter float2 streamsize<>) {

  float4 whichVolumeTriangle={fmod(streamsize.x,4.0f)*3.0f+3.0f,vertices.w,0,0};
  float3 firstTrianglePos;
  if (whichVolumeTriangle.x+.5>15.0f) whichVolumeTriangle.x=3.0f;
  if (!(whichVolumeTriangle.y<256&&whichVolumeTriangle.y>=0))
    whichVolumeTriangle.y=0;
  firstTrianglePos=volumeTriangles[whichVolumeTriangle];
  if (abs(firstTrianglePos.x-.5)<.75) {
     triangles=vertices.xyz+firstTrianglePos;
     push(triangles);
     whichVolumeTriangle.x+=1;
     triangles=vertices.xyz+volumeTriangles[whichVolumeTriangle];
     push(triangles);
     whichVolumeTriangle.x+=1;
     triangles=vertices.xyz+volumeTriangles[whichVolumeTriangle];
     push(triangles);
   }  
}
/**
 * Since every one of the outputted volumeTriangle lookup indices has at least 
 * one triangle, the first triangle is a guaranteed hit and need not be 
 * conditionally produced. 
 * Hence the triangle is looked up, and produced. The respective vertex is
 * computed depending on the fmod with 3
 */
kernel void processFirstTriangles(out float3 triangles<>, 
                                  float4 vertices<>,
                                  float3 volumeTriangles[][]) {

    float4 whichVolumeTriangle={round(fmod((indexof triangles).x,3.0f)),vertices.w,0,0};
   if (whichVolumeTriangle.x+.5>3.0f) whichVolumeTriangle.x=0.0f;
   if (!(whichVolumeTriangle.y<256&&whichVolumeTriangle.y>=0))
      whichVolumeTriangle.y=0;
   triangles=vertices.xyz;
     //   if (whichVolumeTriangle.y<256&&whichVolumeTriangle.y>=0)
   triangles+=volumeTriangles[whichVolumeTriangle];
}

