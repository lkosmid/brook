kernel void pushHalf (iter float4 i<>, vout [1]float4 output<>) {
   float tmp = fmod(i.x,2.0f);
   output=0;

   if (tmp>.5&&tmp<1){
      push(output);
   }
}
kernel void copy4 (float4 input<>,out float4 output<>) {
   output=input;
}
kernel void Aggregate4(float4 input[][],float inp<>,out float outp<>) {
   float2 zero2=0;
   outp=inp+input[zero2].x;
}
kernel void Aggregate34(float3 input3[][],float4 input[][],float inp<>,out float outp<>) {
   float2 zero2=0;
   outp=inp+input[zero2].x+input3[zero2].x;
}
kernel void Aggregate3(float3 input[][],float inp<>,out float outp<>) {
   float2 zero2=0;
   outp=inp+input[zero2].x;
}
kernel void Aggregate2(float2 input[][],float inp<>,out float outp<>) {
   float2 zero2=0;
   outp=inp+input[zero2].x;
}
kernel void Aggregate1(float input[][],float inp<>,out float outp<>) {
   float2 zero2=0;
   outp=inp+input[zero2].x;
}
static float4 * float4malloc(unsigned int numfloat4) {
   float4 * tmp;
   tmp = (float4*)malloc(numfloat4*sizeof(float4));
   return tmp;
}
int raw_vout (int argc, char ** argv) {
   int wid = argc>1?atoi (argv[1]):2048;
   int hei = argc>2?atoi (argv[2]):wid;
   float4 *dat = float4malloc(wid*hei);
   float4 stream <hei,wid>;
   
   

   return 0;
}
