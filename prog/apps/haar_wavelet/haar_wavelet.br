/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file haar_wavelet.br
  \brief Brook implementation of a haar wavelet.

  According to wikipedia at:
  http://en.wikipedia.org/wiki/Haar_wavelet
  A haar wavelet is the first known and simplest wavelet proposed. The
  wavelet divides a given function into different frequency components.
  The method of calculating the resulting waves is done by:
  A[2N] + A[2N + 1] / sqrt(2) and A[2N] - A[2N + 1] / sqrt(2)
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

/**
  Return value for the progam.
  */
static int retval = 0;


/**
 *
 * \brief            A simple copy kernel
 *
 * \param input        Input stream
 * \param output    Output stream
 *
*/
kernel void copy(float input<>, out float output<>)
{
    output = input;    
}

/**
 * \brief    Streaming 1D Haar Wavelet Transform 
*/
kernel void haar_wavelet(float vec[], out float o_wave_0<>, out float o_wave_1<>, float isqrt2)
{
    float idx1 = 2.0f * (indexof (o_wave_0).x);
    float idx2 = idx1 + 1.0f;
    o_wave_0 = (vec[idx1] + vec[idx2]) * isqrt2;
    o_wave_1 = (vec[idx1] - vec[idx2]) * isqrt2;
}

/**
 * \brief    1D Haar Wavelet Transform implementation on CPU
 *            from http://www.cs.ucf.edu/~mali/haar/ 
*/
void haar_wavelet_cpu(float* input, int n, float sqrt2)
{
    int i = 0;
    int w = n;
    float *temp = (float*)malloc(sizeof *temp * n);
    for (i = 0; i < n; ++i)
    {
        temp[i] = 0.0f;
    }
    while (w > 1)
    {
        w >>= 1;
        for (i = 0; i < w; ++i)
        {
            temp[i] = (input[i << 1] + input[(i << 1) + 1]) / sqrt2;
            temp[i + w] = (input[i << 1] - input[(i << 1) + 1]) / sqrt2;
        }
        for (i = 0; i < (w * 2); ++i)
        {
            input[i] = temp[i];
        }
    }
    free(temp);
}

int main(int argc, char** argv)
{
    float* io[2] = {NULL}; // 0 = input, 1 = output
    unsigned int i;
    unsigned int Height;
    unsigned int Width;
    unsigned int Length;
    float sqrt2 = sqrt(2.0f);
    struct infoRec cmd;

    /////////////////////////////////////////////////////////////////////////
    // Setup the timers 
    // 0 = GPU Total Time
    // 1 = CPU Total Time
    /////////////////////////////////////////////////////////////////////////
    Setup(0);
    Setup(1);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Height = cmd.Height;
    Width = cmd.Width;
    Length = Height * Width;

       /////////////////////////////////////////////////////////////////////////
    // Allocate memory
       /////////////////////////////////////////////////////////////////////////
    for (i = 0; i < 2; ++i)
    {
        if (!(io[i] = allocate_mat_f(1, Length)))
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
            goto cleanup;
        }
    }

    fill_mat_f(io[0], 1, Length, 1, RANDOM);

    /////////////////////////////////////////////////////////////////////////
    // Print input data
    /////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Vector: ", "%lf ", io[0], 1, Length);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Vector: ", "%3.2lf ", io[0], 1, Width);
    }

    /////////////////////////////////////////////////////////////////////////
    // Brook code block
    /////////////////////////////////////////////////////////////////////////
    {
        float stream0<Length>;
        float stream1<Length>;
        float avgStream<Length>;
        float diffStream<Length>;
        // Record GPU Total time
        Start(0);
        
        for (i = 0; i < cmd.Iterations; ++i)
        {
            int inp = 0;
            int w = Length;

            // Write to stream
            streamRead(stream0, io[0]);

            // Run the brook program 
            while (w > 1)
            {
                w >>= 1;
                if (!inp)
                {
                    copy(stream0, stream1);
                    haar_wavelet(stream0, avgStream.domain(0, w), diffStream.domain(0,w), 1.0f / sqrt2);

                    copy(avgStream.domain(0,w) , stream1.domain(0,w));
                    copy(diffStream.domain(0,w), stream1.domain(w,(w<<1)));
                }
                else
                {
                    copy(stream1, stream0);
                    haar_wavelet(stream1, avgStream.domain(0, w), diffStream.domain(0, w), 1.0f / sqrt2);

                    copy(avgStream.domain(0,w) , stream0.domain(0,w));
                    copy(diffStream.domain(0,w), stream0.domain(w,(w<<1)));
                }
                inp = 1 - inp;
    
            }

            // Write data back from stream 
            if(!inp)
            {
                streamWrite(stream0, io[1]);
            }
            else
            {
                streamWrite(stream1, io[1]);
            }
        }

        Stop(0);
    }

       /////////////////////////////////////////////////////////////////////////
    // Print results if requested
    /////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Output vector: ", "%lf ", io[1], 1, Length);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output vector: ", "%3.2lf ", io[1], 1, Width);
    }

    /////////////////////////////////////////////////////////////////////////
    // Print timing information if requested 
    /////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
        double time = GetElapsedTime(0);
        printf(    "%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
                "GPU Total Time");
        printf( "%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
                cmd.Iterations, time);
        printf("\n\n");
    }

    /////////////////////////////////////////////////////////////////////////
    // Verify against CPU implementation if requested 
    /////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float* cpu = NULL;
        if (cpu = allocate_mat_f(1, Length))
        {
            printf("-e Verify correct output.\n");
            printf("Computing Haar Wavelet Transform on CPU ... ");

            copy_mat_f(io[0], cpu, 0, 0, 1, Length, Length);
            haar_wavelet_cpu(cpu, Length, sqrt2);

            printf("Done\n");

            res += compare_mat_f(io[1], cpu, Height, Width);
            if (!cmd.Quiet)
            {
                print_mat_f("CPU Vector: ", "%lf ", cpu, 1, Length);
            }
            if (res)
            {
                printf("%s: Failed!\n\n", argv[0]);
                retval = -1;
            }
            else
            {
                printf("%s: Passed!\n\n", argv[0]);
                retval = 0;
            }
            free(cpu);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

    /////////////////////////////////////////////////////////////////////////
    // Compare performance with CPU if requested
    /////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
        unsigned int i = 0;
        float* cpu = NULL;
        double cpu_time = 0.0;
        double gpu_time = 0.0;

        if (cpu = allocate_mat_f(1, Length))
        {
            printf("-p Compare performance with CPU.\n");

            // Record CPU Total time
            Start(1);
            for( i = 0; i < cmd.Iterations; i ++)
            {
                copy_mat_f(io[0], cpu, 0, 0, 1, Length, Length);
                haar_wavelet_cpu(cpu, Length, sqrt2);
            }
            Stop(1);

            // Print CPU timing and speedup
            cpu_time = GetElapsedTime(1);
            gpu_time = GetElapsedTime(0);
            printf(    "%-8s%-8s%-16s%-16s%-16s%-16s\n","Width","Height","Iterations",
                    "CPU Total Time","GPU Total Time","Speedup");
            printf(    "%-8d%-8d%-16d%-16lf%-16lf%-16lf", cmd.Width, cmd.Height, 
                    cmd.Iterations, cpu_time, gpu_time, cpu_time/gpu_time);
            printf("\n\n");
            free(cpu);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

    /////////////////////////////////////////////////////////////////////////
    // Clean up
       /////////////////////////////////////////////////////////////////////////
cleanup:
    if (io[0])
    {
        free(io[0]);
    }
    if (io[1])
    {
        free(io[1]);
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

    return(retval); 
}
