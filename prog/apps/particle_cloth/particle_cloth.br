// particle_cloth.br
// Tests use of structures for input parameters.

#include <stdio.h>

typedef struct Particle_t {
  float3 position;
  float3 velocity;
} Particle;

typedef struct Spring_t {
  float firstParticleIndex;
  float secondParticleIndex;
  float restLength;
  float springConstant;
} Spring;

kernel void stepParticles( Particle p<>, float deltaT, float3 force<>, out Particle result<> )
{
  result.position = p.position + deltaT*p.velocity;
  result.velocity = p.velocity + deltaT*force;
}

kernel void calculateSpringForces( Spring s<>, Particle particles[], out float3 force<> )
{
  Particle p1 = particles[s.firstParticleIndex];
  Particle p2 = particles[s.secondParticleIndex];

  float3 relativePosition = p1.position - p2.position;
  float3 relativeVelocity = p1.velocity - p2.velocity;
  
  float length = sqrt( dot( relativePosition, relativePosition ) );
  
  float3 springAxis = relativePosition / length;

  float perturbation = length - s.restLength;
  float strength = s.springConstant * perturbation;

  float velocityInSpring = dot( springAxis, relativeVelocity );

  strength += 0.25 * velocityInSpring;

  force = strength * springAxis;
}

reduce void sum( float3 input<>, reduce float3 output<> ) {
  output += input;
}

void iterate()
{
  Particle particles< 2 >;
  Spring springs< 2 >;
  float3 springForces< 2 >;
  float3 particleForces< 2 >;
  int i, j;
  float3 p;
  Particle particles_data[2];
  Spring springs_data[2];
  float3 force_data[2];

  // initialize
  particles_data[0].position = float3(0,0,0);
  particles_data[0].velocity = float3(0,0,0);
  particles_data[1].position = float3(1,0,0);
  particles_data[1].velocity = float3(0,0,0);
  
  springs_data[0].firstParticleIndex = (float)0;
  springs_data[0].secondParticleIndex = (float)0;
  springs_data[0].restLength = (float)0;
  springs_data[0].springConstant = (float)0;
  springs_data[1].firstParticleIndex = (float)0;
  springs_data[1].secondParticleIndex = (float)1;
  springs_data[1].restLength = (float)1.5f;
  springs_data[1].springConstant = (float)0.1f;

  streamRead( particles, particles_data );
  streamRead( springs, springs_data );

  for( i = 0; i < 10000; i++ )
  {
    if( i % 100 == 0 )
    {
    streamWrite( particles, particles_data );
    printf("positions: ");
    for( j = 0; j < 2; j++ )
    {
      p = particles_data[j].position;
      printf( "{%6.3f %6.3f %6.3f} ", p.x, p.y, p.z );
    }
    printf( "\n" );
    }
    
    calculateSpringForces( springs, particles, springForces );
    sum( springForces, particleForces );
/*
    streamWrite( particleForces, force_data );
    printf("forces: ");
    for( j = 0; j < 2; j++ )
    {
      p = force_data[j];
      printf( "{%6.3f %6.3f %6.3f} ", p.x, p.y, p.z );
    }
    printf( "\n" );
*/

    stepParticles( particles, 0.1f, particleForces, particles );

  }
}

int main()
{
  iterate();
}