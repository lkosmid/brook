#include <stdio.h>
#include <stdlib.h>

/**   ABB__BBC 
      /\  /\
   AB/__\/__\BC
    /\  B\  /\
AAB/__\/__\/__\BCC
   \  A\  /C  /
    \/__\/__\/
   AAC  AC  ACC
**/
typedef struct Tri_t{
   float4 A; // the last value of A indicates whether the edge AB is small
   float4 B; // enough to stop subdividing.  B.w also indicates if BC is small
   float4 C; // enough. C.w indicates if AC is small enough to stop subdividing
} Tri;

//When a triangle is split, the new triangle really only has six unique new
//values.  These are copied into the final 12 new triangle slots.
typedef struct SplitTri_t {
  float4 A;
  float4 AB;
  float4 B;
  float4 BC;
  float4 C;
  float4 AC;
}SplitTri;
//Stores the neighbors of a given triangle The w component indicates if
//the line length is short enough for the triangle to be produced.
//this could be altered to any per-edge qualifier
// for the intermediate split neighbors the unused 'w' components act as holders
// for the recomputed neighbor list when a triangle is split
typedef struct Neighbor_t {
  float4 AB;// w = AB->B.x
  float4 BBC;// w = AB->B.y
  float4 ABB;// w = AB->B.z
  float4 BC;// w = BC->C.x
  float4 ACC;// w = BC->C.y
  float4 BCC;// w = BC->C.z
  float4 AC;// w = AC->A.x
  float4 AAB;// w = AC->A.y
  float4 AAC;// w = AC->A.z
}Neighbor;

unsigned char debugLoop=0;
int counterMax = 2;
extern float neighboreps;
int low_texture_ram=0;
void recomputeNeighbors(Tri*, Neighbor *, unsigned int);
void checkNeighbors(Tri * tri, Neighbor * in, Neighbor * out, unsigned int);


//returns a 2 if only b1, 4 if only b2 and 8 if both
//this acts as sort of a bitwise holder class that should work with 24 bitfloat
kernel float triCombine(float b1<>, float b2<>) {
   return (b1&&b2)?8:(b1?2:(b2?4:0));
}

//if the model is missing a neighbor then all 3 components will be zero
//i.e. if a model has 4 or 5 neighbors only
kernel float isNeighbor(float4 neigh) {
   return dot(neigh.xyz,neigh.xyz)>0;
}
kernel float isNotNeighbor(float4 neigh) {
  return !(dot(neigh.xyz,neigh.xyz)>0);
}
//The function that recomputes whether the given edges are large enough
//to warrant a split. This could and probably should be done in "image space"
kernel void smallEnough(Tri t<>, Neighbor u<>, 
                        out Tri v<>, 
                        out Neighbor n<>, 
                        float epsilon) {
  v.A.xyz = t.A.xyz;
  v.A.w = (dot(t.A.xyz-t.B.xyz,t.A.xyz-t.B.xyz)/max(t.A.z,t.B.z)>epsilon)?1.0:0.0;
  v.B.xyz = t.B.xyz;
  v.B.w = (dot(t.B.xyz-t.C.xyz,t.B.xyz-t.C.xyz)/max(t.B.z,t.C.z)>epsilon)?1.0:0.0;
  v.C.xyz = t.C.xyz;
  v.C.w = (dot(t.A.xyz-t.C.xyz,t.A.xyz-t.C.xyz)/max(t.A.z,t.C.z)>epsilon)?1.0:0.0;
  n.AB.xyz = u.AB.xyz;
  //for the neighbors that two vertices share, there are two relevant lenghts,
  // both of which must be saved in the neighbor .w
  n.AB.w = triCombine((dot(t.A.xyz-u.AB.xyz,t.A.xyz-u.AB.xyz)/max(t.A.z,u.AB.z)>epsilon)?1.0:0.0,
                      (dot(t.B.xyz-u.AB.xyz,t.B.xyz-u.AB.xyz)/max(t.B.z,u.AB.z)>epsilon)?1.0:0.0);
  n.BC.xyz=u.BC.xyz;
  n.BC.w = triCombine((dot(t.B.xyz-u.BC.xyz,t.B.xyz-u.BC.xyz)/max(t.B.z,u.BC.z)>epsilon)?1.0:0.0,
                      (dot(t.C.xyz-u.BC.xyz,t.C.xyz-u.BC.xyz)/max(t.C.z,u.BC.z)>epsilon)?1.0:0.0);
  n.AC.xyz=u.AC.xyz;
  n.AC.w = triCombine((dot(t.C.xyz-u.AC.xyz,t.C.xyz-u.AC.xyz)/max(t.C.z,u.AC.z)>epsilon)?1.0:0.0,
                      (dot(t.A.xyz-u.AC.xyz,t.A.xyz-u.AC.xyz)/max(t.A.z,u.AC.z)>epsilon)?1.0:0.0);
  n.AAC.xyz=u.AAC.xyz;
  n.AAC.w = (isNotNeighbor(u.AAC)|| //if missing neighbor, should not stop split
             dot(t.A.xyz-u.AAC.xyz,t.A.xyz-u.AAC.xyz)/max(t.A.z,u.AAC.z)>epsilon)?1.0:0;
  n.AAB.xyz=u.AAB.xyz;
  n.AAB.w = (isNotNeighbor(u.AAB)|| //future split should not stop upon missing neigh
             dot(t.A.xyz-u.AAB.xyz,t.A.xyz-u.AAB.xyz)/max(t.A.z,u.AAB.z)>epsilon)?1.0:0;
  n.ABB.xyz=u.ABB.xyz;
  n.ABB.w = (isNotNeighbor(u.ABB)|| //if missing neighbor, should not stop split
             dot(t.B.xyz-u.ABB.xyz,t.B.xyz-u.ABB.xyz)/max(t.B.z,u.ABB.z)>epsilon)?1.0:0;
  n.BBC.xyz=u.BBC.xyz;
  n.BBC.w = (isNotNeighbor(u.BBC)|| //if missing neighbor, should not stop split
             dot(t.B.xyz-u.BBC.xyz,t.B.xyz-u.BBC.xyz)/max(t.B.z,u.BBC.z)>epsilon)?1.0:0;
  n.BCC.xyz=u.BCC.xyz;
  n.BCC.w = (isNotNeighbor(u.BCC)|| //if missing neighbor, should not stop split
             dot(t.C.xyz-u.BCC.xyz,t.C.xyz-u.BCC.xyz)/max(t.C.z,u.BCC.z)>epsilon)?1.0:0;
  n.ACC.xyz=u.ACC.xyz;
  n.ACC.w = (isNotNeighbor(u.ACC)|| //if missing neighbor, should not stop split
             dot(t.C.xyz-u.ACC.xyz,t.C.xyz-u.ACC.xyz)/max(t.C.z,u.ACC.z)>epsilon)?1.0:0;
}
kernel void produceTriP(Tri t<>, vout [1]float2 shouldProduce<>, vout[1] float2 shouldNotProduce<>){
   if (t.A.w!=0.0f
       ||t.B.w!=0.0f
       ||t.C.w!=0.0f) { // if either of the 3 vertices are still mobile, continue to split
     shouldProduce = (indexof t).xy;
     push(shouldProduce);
   }else { //all the vertices are pinned by edges (either neighbor or triangle) that are too short
     shouldNotProduce = (indexof t).xy;
     push(shouldNotProduce);
   }
}

kernel void computeNeighbors(Tri tgather[][], 
                             Neighbor ugather[][], 
                             float2 i<>, 
                             out Neighbor v<>) {
  float2 zero2=0;
  float2 ind = (i>=0&&i<8192)?i:zero2;
  Neighbor u = ugather[ind];
  float eAAB=isNeighbor(u.AAB);
  float eAAC=isNeighbor(u.AAC);
  float eABB=isNeighbor(u.ABB);
  float eBBC=isNeighbor(u.BBC);
  float eBCC=isNeighbor(u.BCC);
  float eACC=isNeighbor(u.ACC);
  Tri t = tgather[ind];
  float3 AB_B, AC_A, BC_C;
  float3 zero3=0;
  AB_B=lerp(t.B.xyz,u.AB.xyz,.5);
  if(1)if(u.AB.w==4||u.AB.w==8)
     AB_B=lerp(AB_B,
               lerp(t.A.xyz,eABB?u.ABB.xyz:eBBC?u.BBC.xyz:u.BC.xyz,.5),
               .25);
  AC_A=lerp(t.A.xyz,u.AC.xyz,.5);
  if(1)if(u.AC.w==4||u.AC.w==8)
     AC_A=lerp(AC_A,
               lerp(t.C.xyz,eAAC?u.AAC.xyz:eAAB?u.AAB.xyz:u.AB.xyz,.5),
               .25);
  BC_C=lerp(t.C.xyz,u.BC.xyz,.5);
  if(1)if(u.BC.w==4||u.AC.w==8)
     BC_C=lerp(BC_C,
               lerp(t.B.xyz,eBCC?u.BCC.xyz:eACC?u.ACC.xyz:u.AC.xyz,.5),
               .25);
  v.AB.xyz = lerp(t.A.xyz,u.AB.xyz,.5);
  if(1)if(u.AB.w==2||u.AB.w==8)
     v.AB.xyz = lerp(v.AB.xyz,
                     lerp(t.B.xyz,eAAB?u.AAB.xyz:eAAC?u.AAC.xyz:u.AC.xyz,.5),
                     .25);
  v.AB.w = AB_B.x;
  v.BBC.xyz = eBBC?lerp(t.B.xyz,u.BBC.xyz,.5):zero3;
  if(1)if(eBBC&&u.BBC.w)
     v.BBC.xyz = lerp(v.BBC.xyz,
                      lerp(eABB?u.ABB.xyz:u.AB.xyz,u.BC.xyz,.5),
                      .25);
  v.BBC.w = AB_B.y;
  v.ABB.xyz = eABB?lerp(t.B.xyz,u.ABB.xyz,.5):zero3;
  if(1)if(eABB&&u.ABB.w)
     v.ABB.xyz = lerp(v.ABB.xyz,
                      lerp(u.AB.xyz,eBBC?u.BBC.xyz:u.BC.xyz,.5),
                      .25);
  v.ABB.w = AB_B.z;
  v.AC.xyz = lerp(t.C.xyz,u.AC.xyz,.5);
  if(1)if(u.AC.w==2||u.AC.w==8)
     v.AC.xyz = lerp(v.AC.xyz,
                     lerp(t.A.xyz,eACC?u.ACC.xyz:eBCC?u.BCC.xyz:u.BC.xyz,.5),
                     .25);
  v.AC.w = AC_A.x;
  v.AAB.xyz = eAAB?lerp(t.A.xyz,u.AAB.xyz,.5):zero3;
  if(1)if(eAAB&&u.AAB.w)
     v.AAB.xyz = lerp(v.AAB.xyz,
                      lerp(eAAC?u.AAC.xyz:u.AC.xyz,u.AB.xyz,.5),
                      .25);
  v.AAB.w = AC_A.y;
  v.AAC.xyz = eAAC?lerp(t.A.xyz,u.AAC.xyz,.5):zero3;
  if(1)if(eAAC&&u.AAC.w)
     v.AAC.xyz = lerp(v.AAC.xyz,
                      lerp(eAAB?u.AAB.xyz:u.AB.xyz,u.AC.xyz,.5),
                      .25);
  v.AAC.w = AC_A.z;
  v.BC.xyz = lerp(t.B.xyz,u.BC.xyz,.5);
  if(1)if(u.BC.w==2||u.BC.w==8)
     v.BC.xyz = lerp(v.BC.xyz,
                     lerp(t.C.xyz,eBBC?u.BBC.xyz:eABB?u.ABB.xyz:u.AB.xyz,.5),
                     .25);
  v.BC.w = BC_C.x;
  v.ACC.xyz = eACC?lerp(t.C.xyz,u.ACC.xyz,.5):zero3;
  if(1)if(eACC&&u.ACC.w)
     v.ACC.xyz = lerp(v.ACC.xyz,
                      lerp(u.AC.xyz,eBCC?u.BCC.xyz:u.AB.xyz,.5),
                      .25);
  v.ACC.w = BC_C.y;
  v.BCC.xyz = eBCC?lerp(t.C.xyz,u.BCC.xyz,.5):zero3;
  if(1)if(eBCC&&u.BCC.w)
     v.BCC.xyz = lerp(v.BCC.xyz,
                      lerp(u.BC.xyz,eACC?u.ACC.xyz:u.AC.xyz,.5),
                      .25);
  v.BCC.w = BC_C.z;  
}

//Splay the triangles into a vertex list of float3's.
//these are the final triangles
kernel void copyFinalTriangles (Tri tri<>,
                                 out float3 triList<>) {
  float whichVertex=round(fmod((indexof triList).x,3));
  triList = tri.A.xyz;
  if (whichVertex>.5&&whichVertex<1.5)
    triList=tri.B.xyz;
  else if (whichVertex>=1.5&&whichVertex<2.5)
    triList=tri.C.xyz;
}
//Same as copy final triangles but with a dependent texture lookup
kernel void writeFinalTriangles (Tri triangles[][],
                                 float2 indices<>,
                                 out float3 triList<>) {
  float2 zero2=0;
  float2 ind = (indices>=0&&indices<8192)?indices:zero2;
  copyFinalTriangles(triangles[ind],triList);
}
//since we don't have proper float4 constructors, we need to manufacture one
kernel float4 addN(float3 inxyz, float inw) {
   float4 x = float4(inxyz.x,
                     inxyz.y,
                     inxyz.z,
                     inw);
   return x;
} 
//nothing happens
kernel float4 identity(float4 a, float b){return a;}
//you fail to obtain anything
kernel float3 ident3(float3 a, float b) {return a;}

//this function takes as input an index that tells which triangle must be split
//the output is 6 new vertices that make up the 4 new triangles and 12 neighbors 
// (stored in 9 float4s)
kernel void splitTriangles (Tri triangles[][], 
                            Neighbor neighbors[][],
                            float2 i<>,
                            out SplitTri splittri<>) {
  float2 zero2=0;
  float2 index = (i>=0&&i<2048)?i:zero2;
  Tri tri=triangles[index];
  Neighbor oldneighbors=neighbors[index];
  float eAAB=isNeighbor(oldneighbors.AAB);
  float eAAC=isNeighbor(oldneighbors.AAC);
  float eABB=isNeighbor(oldneighbors.ABB);
  float eBBC=isNeighbor(oldneighbors.BBC);
  float eBCC=isNeighbor(oldneighbors.BCC);
  float eACC=isNeighbor(oldneighbors.ACC);
  float3 fiveandhalf=5.5;
  float3 fourandhalf=4.5;
  float3 weights={.625,.579533905371,0.515625};
  float3 ABCneighbors = {4.0f+eAAC+eAAB,4.0f+eBBC+eABB,4.0f+eBCC+eACC};
  float3 abcn =ABCneighbors>fiveandhalf?weights.xxx:(ABCneighbors>fourandhalf?weights.yyy:weights.zzz);
  //float an = .375+(.375+sqr(.25*cos(2*3.1415926536/Aneighbors)));
  //float bn = //.375+(.375+sqr(.25*cos(2*3.1415926536/Bneighbors)));
  //float cn = //.375+(.375+sqr(.25*cos(2*3.1415926536/Cneighbors)));
  float an = abcn.x;
  float bn = abcn.y;
  float cn = abcn.z;
  float3 abcnon = (1-abcn)/ABCneighbors;
  float anon = abcnon.x;
  float bnon = abcnon.y;
  float cnon = abcnon.z;
  splittri.AC = lerp (tri.A,tri.C,.5);
  if(1)if(tri.C.w)
    splittri.AC = addN(lerp(splittri.AC.xyz,
                            lerp (tri.B.xyz,oldneighbors.AC.xyz,.5),
                            .25),
                       1);
  splittri.AB = lerp (tri.A,tri.B,.5);
  if(1)if(tri.A.w)
    splittri.AB = addN(lerp(splittri.AB.xyz,
                                lerp(tri.C.xyz,oldneighbors.AB.xyz,.5),
                                .25),
                           1);
  splittri.BC = lerp (tri.B,tri.C,.5);
  if(1)if(tri.B.w)
    splittri.BC = addN(lerp(splittri.BC.xyz,
                                lerp(tri.A.xyz,oldneighbors.BC.xyz,.5),
                                .25),
                           1);
  splittri.A = tri.A;
  if(1)if(tri.A.w&&
      tri.C.w&&
      (oldneighbors.AC.w==4||oldneighbors.AC.w==8)&&
      (oldneighbors.AB.w==2||oldneighbors.AB.w==8)&&
      oldneighbors.AAB.w&&
      oldneighbors.AAC.w)       
     splittri.A.xyz = tri.A.xyz*an
       +anon*(oldneighbors.AB.xyz
              +oldneighbors.AC.xyz
              +oldneighbors.AAB.xyz
              +oldneighbors.AAC.xyz
              +tri.B.xyz
              +tri.C.xyz);

  splittri.B = tri.B;
  if(1)if(tri.A.w&&
      tri.B.w&&
      (oldneighbors.BC.w==2||oldneighbors.BC.w==8)&&
      (oldneighbors.AB.w==4||oldneighbors.AB.w==8)&&
      oldneighbors.ABB.w&&
      oldneighbors.BBC.w)        
    splittri.B.xyz= tri.B.xyz*bn
      +bnon*(oldneighbors.AB.xyz
             +oldneighbors.BC.xyz
             +oldneighbors.ABB.xyz
             +oldneighbors.BBC.xyz
             +tri.A.xyz
             +tri.C.xyz);

  splittri.C = tri.C;
  if(1)if(tri.C.w&&
      tri.B.w&&
      (oldneighbors.BC.w==4||oldneighbors.BC.w==8)&&
      (oldneighbors.AC.w==2||oldneighbors.AC.w==8)&&
      oldneighbors.ACC.w&&
      oldneighbors.BCC.w)       
     splittri.C.xyz = tri.C.xyz*cn
       +cnon*(oldneighbors.AC.xyz
              +oldneighbors.BC.xyz
              +oldneighbors.ACC.xyz
              +oldneighbors.BCC.xyz
              +tri.A.xyz
              +tri.B.xyz);
}

void __printf_cpu_inner(float f) {
  printf("%.2f ",f);
}
void __printnew_cpu_inner() {
  printf ("\n");
}

//moves the 6 split values into 4 individual triangles (with a result of 12 vertices)
//moves the 12 split neighbors into 4 individual neighbor lists
//uses fmod with x or y to determine which direction should matter wrt fmod.
kernel void linearReorgSplitTrianglesX (SplitTri splittri<>,
                                       Neighbor newnei<>,
                                       out Tri tri<>,
                                       out Neighbor neighbor<>,
                                       float epsilon) {
  float sindex = (indexof tri).x;
  float unclampedwhich = fmod(sindex,4);
  float which = unclampedwhich>3.5?0:unclampedwhich;
  float4 ac = splittri.AC;
  float4 ab = splittri.AB;
  float4 bc = splittri.BC;
  float4 a = splittri.A;
  float4 b = splittri.B;
  float4 c = splittri.C;
  float4 BC_C= {newnei.BC.w,
                newnei.ACC.w,
                newnei.BCC.w,1};
  float4 AC_A = {newnei.AC.w,
                 newnei.AAB.w,
                 newnei.AAC.w,1};
  float4 AB_B = {newnei.AB.w,
                 newnei.BBC.w,
                 newnei.ABB.w,1};
 
  if (which<.5) {
    tri.A=identity(a,1);
    tri.B=identity(ab,1);
    tri.C=identity(ac,1);

    neighbor.BCC = c;
    neighbor.BC = bc;
    neighbor.BBC= b;
    neighbor.ABB= AB_B;
    neighbor.AB = newnei.AB;
    neighbor.AAB =  newnei.AAB;
    neighbor.AAC =  newnei.AAC;
    neighbor.AC = AC_A;
    neighbor.ACC = newnei.AC;
  }else if (which <1.5) {
    tri.A= identity(ab,1);
    tri.B=identity(b,1);
    tri.C=identity(bc,1);

    neighbor.BCC = BC_C;
    neighbor.BC = newnei.BC;//b0rken
    neighbor.BBC=newnei.BBC;
    neighbor.ABB=newnei.ABB;
    neighbor.AB = AB_B;
    neighbor.AAB = newnei.AB;
    neighbor.AAC = a;
    neighbor.AC = ac;
    neighbor.ACC = c;
  }else if (which<2.5) {
    
    tri.A=identity(ac,1);
    tri.B=identity(bc,1);
    tri.C=identity(c,1);

    neighbor.BCC=newnei.BCC;
    neighbor.BC=BC_C;
    neighbor.BBC = newnei.BC;//b0rken!?
    neighbor.ABB = b;
    neighbor.AB = ab;
    neighbor.AAB = a;
    neighbor.AAC = AC_A;
    neighbor.AC = newnei.AC;
    neighbor.ACC = newnei.ACC;
  }else {
    tri.A=identity(bc,1);
    tri.B=identity(ac,1);
    tri.C=identity(ab,1);

    neighbor.BCC = newnei.AB;
    neighbor.BC = a;
    neighbor.BBC= AC_A;
    neighbor.ABB= newnei.AC;
    neighbor.AB = c;
    neighbor.AAB = BC_C;
    neighbor.AAC = newnei.BC;//b0rken
    neighbor.AC = b;
    neighbor.ACC = AB_B;
  }
  smallEnough(tri,neighbor,tri,neighbor,epsilon);
}
kernel void linearReorgSplitTrianglesY (SplitTri splittri<>,
                                       Neighbor newnei<>,
                                       out Tri tri<>,
                                       out Neighbor neighbor<>,
                                       float epsilon) {
  float sindex = (indexof tri).y;
  float unclampedwhich = fmod(sindex,4);
  float which = unclampedwhich>3.5?0:unclampedwhich;
  float4 ac = splittri.AC;
  float4 ab = splittri.AB;
  float4 bc = splittri.BC;
  float4 a = splittri.A;
  float4 b = splittri.B;
  float4 c = splittri.C;
  float4 BC_C= {newnei.BC.w,
                newnei.ACC.w,
                newnei.BCC.w,1};
  float4 AC_A = {newnei.AC.w,
                 newnei.AAB.w,
                 newnei.AAC.w,1};
  float4 AB_B = {newnei.AB.w,
                 newnei.BBC.w,
                 newnei.ABB.w,1};
 
  if (which<.5) {
    tri.A=identity(a,1);
    tri.B=identity(ab,1);
    tri.C=identity(ac,1);

    neighbor.BCC = c;
    neighbor.BC = bc;
    neighbor.BBC= b;
    neighbor.ABB= AB_B;
    neighbor.AB = newnei.AB;
    neighbor.AAB =  newnei.AAB;
    neighbor.AAC =  newnei.AAC;
    neighbor.AC = AC_A;
    neighbor.ACC = newnei.AC;
  }else if (which <1.5) {
    tri.A= identity(ab,1);
    tri.B=identity(b,1);
    tri.C=identity(bc,1);

    neighbor.BCC = BC_C;
    neighbor.BC = newnei.BC;//b0rken
    neighbor.BBC=newnei.BBC;
    neighbor.ABB=newnei.ABB;
    neighbor.AB = AB_B;
    neighbor.AAB = newnei.AB;
    neighbor.AAC = a;
    neighbor.AC = ac;
    neighbor.ACC = c;
  }else if (which<2.5) {
    
    tri.A=identity(ac,1);
    tri.B=identity(bc,1);
    tri.C=identity(c,1);

    neighbor.BCC=newnei.BCC;
    neighbor.BC=BC_C;
    neighbor.BBC = newnei.BC;//b0rken!?
    neighbor.ABB = b;
    neighbor.AB = ab;
    neighbor.AAB = a;
    neighbor.AAC = AC_A;
    neighbor.AC = newnei.AC;
    neighbor.ACC = newnei.ACC;
  }else {
    tri.A=identity(bc,1);
    tri.B=identity(ac,1);
    tri.C=identity(ab,1);

    neighbor.BCC = newnei.AB;
    neighbor.BC = a;
    neighbor.BBC= AC_A;
    neighbor.ABB= newnei.AC;
    neighbor.AB = c;
    neighbor.AAB = BC_C;
    neighbor.AAC = newnei.BC;//b0rken
    neighbor.AC = b;
    neighbor.ACC = AB_B;
  }
  smallEnough(tri,neighbor,tri,neighbor,epsilon);
}

//simple growable array, similar to std::vector (I hate C parsers)
struct VertexArray{
  float3 * v;
  unsigned int size;
  unsigned int alloc;
};
void initVertexArray(struct VertexArray *v) {
  v->v=0;v->size=0;v->alloc=0;
}
void destroyVertexArray(struct VertexArray *v) {
  if (v->v) free(v->v);
}
void expandVertexArray(struct VertexArray * v,
                       unsigned int more) {
  v->size+=more;
  while(v->size>v->alloc) {
    if (v->alloc==0)
      v->alloc=16;
    v->alloc*=2;
    v->v = (float3*)realloc(v->v,v->alloc*sizeof(float3));
  }
}                   
void pushBackVertexArray(struct VertexArray * v,
                         float3 f) {
  if (++v->size>v->alloc) {
    if (v->alloc==0)
      v->alloc=16;
    v->alloc*=2;
    v->v = (float3*)realloc(v->v,v->alloc*sizeof(float3));
  }
  v->v[v->size-1]=f;
}                   
static int toi(float f) {return (int)f;}


//the main controller function...takes in neighbors and triangles
//Note smallEnough must have been run on the input for this to work
//small enough is run from main or from within linearReorgSplitTriangles
void subdivide (Neighbor (*neighbors)<>,
                Tri (*triangles)<>,
                struct VertexArray *output,
                float epsilon,
                int counter) {
  unsigned int streamY=toi(streamSize(*triangles).y);
  unsigned int streamX=toi(streamSize(*triangles).x);
  unsigned char snpSize=0;
  {
    float2 shouldProduce<streamY,0>;
    float2 shouldNotProduce<streamY,0>;
    //see whether triangles should be split
    produceTriP(*triangles,shouldProduce,shouldNotProduce);
    assert((int)streamX==toi(streamSize(shouldProduce).x));
    {
      int wosizex=3*toi(streamSize(shouldNotProduce).x);
      int wosizey=toi(streamSize(shouldNotProduce).y);
      float3 outputTri<wosizey,wosizex>;
      if (wosizex&&wosizey)
        writeFinalTriangles(*triangles,shouldNotProduce,outputTri);      

      streamY=toi(streamSize(shouldProduce).y);
      //if some should be split and produced then go here
      if (streamY&&streamX) {
        float stretchX = streamY*4>2048?0.0f:1.0f;      
        //allocate shared neighbor structs that hold the extra generated floats
        Neighbor sharedNeighbors<streamY,streamX>;
        SplitTri sharedTriangles <streamY,streamX>;
        //these new neighbor structs are 4x as big as the old ones
        //input is thus stretched through them based on the fmod
        Neighbor newNeighbors<(stretchX?streamY:streamY*4),
          (stretchX?streamX*4:streamX)>;
        Tri newTriangles<(stretchX?streamY:streamY*4),
          (stretchX?streamX*4:streamX)>;
        //computes the 12 shared neighbor values
        computeNeighbors(*triangles,*neighbors,shouldProduce,sharedNeighbors);
        //computes the 6 new triangle vertex values
        splitTriangles(*triangles,*neighbors,shouldProduce,sharedTriangles);
        // combines the 12 neighbors and 6 vertices to produce 4 individual 
        // sets of triangles
        // with the new triangles getting stretched in the x or y direction depending
        // on stretchX
        if (stretchX) {
           linearReorgSplitTrianglesX(sharedTriangles,
                                     sharedNeighbors,
                                     newTriangles,
                                     newNeighbors,
                                     epsilon);
        } else {
           linearReorgSplitTrianglesY(sharedTriangles,
                                     sharedNeighbors,
                                     newTriangles,
                                     newNeighbors,
                                     epsilon);
        }
        streamSwap(*triangles,newTriangles);
        streamSwap(*neighbors,newNeighbors);
        if (debugLoop) {
          Tri * tri;
          Neighbor * neigh;
          Neighbor * checknei;
          unsigned int totalsize;
          totalsize = ((unsigned int)streamSize(*triangles).x)*(unsigned int)streamSize(*triangles).y;
          tri = (Tri*)malloc (sizeof(Tri)*totalsize);
          neigh = (Neighbor*)malloc (sizeof(Neighbor)*totalsize);
          checknei = (Neighbor*)malloc (sizeof(Neighbor)*totalsize);
          streamWrite(*neighbors,neigh);
          streamWrite(*triangles,tri);
          recomputeNeighbors(tri,checknei,totalsize);
          checkNeighbors(tri,neigh,checknei,totalsize);
          free (tri);
          free (neigh);
          free(checknei);
        }
      }
      // if we have some triangles that are set to be produced
      if (streamSize(shouldNotProduce).y){
        snpSize=1;
        // write them out to a vertex array
        if ((!low_texture_ram)&&
            streamSize(shouldProduce).y&&
            streamSize(shouldProduce).x&&
            counter<counterMax) {
          //if we can afford the ram, we recursively call this function
          // to evaluate other triangles
          subdivide(neighbors,triangles,output,epsilon,counter+1);
        } 
        //now we writeback from the card to local memory since we dont have
        // render to vertex array yet
        wosizey = output->size;
        expandVertexArray(output,(unsigned int)(streamSize(outputTri).x*
                                                streamSize(outputTri).y));
        streamWrite(outputTri,output->v+wosizey);   
      }
    }
    if (counter>=counterMax) {
      float3 outputTri<toi(streamSize(*triangles).y),
                       toi(streamSize(*triangles).x*3)>;
      int sizey = output->size;
      copyFinalTriangles(*triangles,outputTri);
      expandVertexArray(output,
                        3*toi(streamSize(*triangles).y)*toi(streamSize(*triangles).x));
      streamWrite(outputTri,output->v+sizey);
    }
    
  }
  // if we really dont have that kind of ram we will already have written out
  // vertices out to host ram, thus preserving memory. Only recurse if we have 
  // size in shouldSplit arrays :-)
  if ((low_texture_ram||snpSize==0)&&streamY&&streamX&&counter<counterMax) {
     subdivide(neighbors,triangles,output,epsilon,counter+1);
  } 
  // prevents all writing at the end
}

extern unsigned int  loadModelData(const char * filename, 
                                   Tri **tris, 
                                   Neighbor **nei);

Tri *  createTriangles (unsigned int howMany) {
  Tri * ret;  
  ret=(Tri*)malloc(sizeof(Tri)*howMany);
  memset(ret,0,sizeof(Tri)*howMany);
  return ret;
}
Neighbor *  createNeighbors (Tri * tri, unsigned int howMany) {
  Neighbor * ret;  
  ret=(Neighbor*)malloc(sizeof(Neighbor)*howMany);
  memset(ret,0,sizeof(Neighbor)*howMany);
  return ret;
}
void bestHeiWid(unsigned int totalSize,
                unsigned int *hei,
                unsigned int *wid) {
   int slop=totalSize*2;
   int maxy = 0;
   int best = 11;
   unsigned int i;
   for (i=0;i<12;++i) {
      int x= (1<<i);
      int y = totalSize/x+(totalSize%x==0?0:1);
      int tslop;
      if (x>2048||y>2048)
         continue;
      tslop = x*y - totalSize;
      if (tslop<0)
         continue;
      if ((tslop<slop&&y>maxy)||
          (y>maxy&&tslop<2*y/3)) {
         *hei=y;
         *wid=x;
         maxy = y;
         slop = tslop;
         best = i;
      }
   }
}
unsigned int bestHeight(unsigned int totalSize){
   unsigned int hei=0,wid=0;
   bestHeiWid(totalSize,&hei,&wid);
   return hei;
}
unsigned int bestWidth(unsigned int totalSize){
   unsigned int hei=0,wid=0;
   bestHeiWid(totalSize,&hei,&wid);
   return wid;
}
extern void computeFunctionCallPattern(float epsilon,
                                       int argc, char ** argv, int numTri,Tri*triangles,Neighbor *neigh);
unsigned int loadModelData(char* file,Tri **triangles,Neighbor **neighbors);
int main (int argc, char**argv) {
  unsigned int i = 0;
  float epsilon=.0001;
  Tri *triangledata = 0;
  Neighbor *neighbordata = 0;
  unsigned int numTriangles;
  neighboreps=epsilon/1024.0f;
  for (i=0;i<(unsigned int)argc;++i) {
    char match=0;
    int j;
    if (strcmp(argv[i],"-debug")==0) {
      match=1;
      debugLoop=1;
    }
    if (strncmp(argv[i],"-epsilon",8)==0) {
      epsilon = (float)atof(argv[i]+8);
      match=1;
    }
    if (strncmp(argv[i],"-counter",8)==0) {
      counterMax = (int)atoi(argv[i]+8);
      match=1;
    }
    if (strncmp(argv[i],"-eps",4)==0) {
      epsilon = (float)atof(argv[i]+4);
      match=1;
    }
    if (match) {
      for (j=i+1;j<argc;++j) argv[j-1]=argv[j];
      argc--;
      i--;
    }
  }
  epsilon*=epsilon;
  numTriangles = 
    loadModelData(argc>1?argv[1]:"dragon.ply",&triangledata,&neighbordata);
  {
  Neighbor neighbors<bestHeight(numTriangles),bestWidth(numTriangles)>;
  Tri triangles<bestHeight(numTriangles),bestWidth(numTriangles)>;
  struct VertexArray v;
  streamRead(triangles,triangledata);
  streamRead(neighbors,neighbordata);
  initVertexArray(&v);
  
  // initialize neighbors and triangles
  smallEnough(triangles,neighbors,triangles,neighbors,epsilon);
  if ( 0 ) {
       for(i=0; i<numTriangles; i++){
	    int j;
	    fprintf(stderr, "#\n");
	    for(j=0; j<9; j++){
		 float4 *temp;
		 temp = ((float4 *)(&neighbordata[i]))+j;
	    fprintf(stderr, "%f, %f, %f, %f\n", temp->x, temp->y, temp->z, temp->w);
	    }
       }
  }
  if ( 1 )
       subdivide(&neighbors,&triangles,&v,epsilon,0); 
  else
  {
       float3 outputTri<toi(streamSize(triangles).y),
	    toi(streamSize(triangles).x*3)>;
       int sizey = v.size;
       copyFinalTriangles(triangles,outputTri);
       expandVertexArray(&v,
			 3*toi(streamSize(triangles).y)*toi(streamSize(triangles).x));
       streamWrite(outputTri,v.v+sizey);
  }
  printf("%d\n", v.size);
  for(i=0; i<v.size; i++){
    printf("%3.3f, %3.3f, %3.3f\n", v.v[i].x, v.v[i].y, v.v[i].z);
  }
  return 0;
  }
}



