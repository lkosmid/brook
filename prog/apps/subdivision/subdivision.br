#include <stdio.h>
#include <stdlib.h>
kernel float3 eval (float2 param<>, float4 data[][]) {
  float3 ret = {param.x,param.y,1.0};
  return ret;
}
kernel void shouldDivide (float4 triangles<>,
                          float4 trianglesGather[][],
                          float4 data[][], 
                          iter float2 Aindex<>,
                          iter float2 Bindex<>,
                          iter float2 Cindex<>,
                          iter float2 Pindex<>,
                          float width,
                          float widthminusone,
                          vout[1] float4 division<>) {
  float half=.5;
  float4 A=triangles;
  float4 B=trianglesGather[Bindex];  
  float4 C = trianglesGather[Pindex];
  float2 a={abs(A.w),abs(B.w)};
  float2 b=C.xy;
  float2 c=C.zw;
  C = trianglesGather[Cindex];
  {
    float3 AB = lerp (A.xyz,B.xyz,half.xxx);
    float3 AC = lerp (A.xyz,C.xyz,half.xxx);
    float3 BC = lerp (B.xyz,C.xyz,half.xxx);
    float3 ab = eval (lerp(a,b,half.xx),data);
    float3 ac = eval (lerp(a,b,half.xx),data);
    float3 bc = eval (lerp(a,b,half.xx),data);
    
  }
  
}

int main (int argc, char ** argv) {
   int i;
   char use_vout_amplify=1;
   for (i=0;i<argc;++i) {
     char match=0;
     int j;
     if (strcmp(argv[i],"-noamplify")==0) {
       match=1;
       use_vout_amplify=0;
     }
     if (match) {
       for (j=i+1;j<argc;++j) argv[j-1]=argv[j];
       argc--;
       i--;
     }
   }

   return 0;   
 }


