/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file image_filter.br
  \brief Applies a 3x3 mask across the image



 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/**
*
* \brief		Kernel applies a 3x3 filter to an image
*	
* \param img	Stream containing the input image
* \param mask	The 3x3 filtering mask
* \param o_img	The output stream with the filtered image
*
*/
kernel void image_filter( float img[][],  float mask[3][3], out float o_img<> ) 
{    
    // Output position
    float2 instance = indexof(o_img).xy;
    float j = instance.x;
    float i = instance.y;

    // These are the offsets so no looping is needed

    o_img  = img[i][j] * mask[0][0];
    o_img += img[i][j+1] * mask[0][1];
    o_img += img[i][j+2] * mask[0][2];

    o_img += img[i+1][j] * mask[1][0];
    o_img += img[i+1][j+1] * mask[1][1];
    o_img += img[i+1][j+2] * mask[1][2];

    o_img += img[i+2][j] * mask[2][0];
    o_img += img[i+2][j+1] * mask[2][1];
    o_img += img[i+2][j+2] * mask[2][2];
}

/**
*
* \brief		Applies a 3x3 filter to an image
*	
* \param input		Array containing the input image
* \param mask		The 3x3 filtering mask
* \param output		Array containing the filtered image
* \param Width		Width of the image
* \param Height		Height of the image
*
*/
void image_filter_cpu(float* input, float mask[3][3], float* output, unsigned int Width, unsigned int Height)
{
    unsigned int i, j;
    unsigned int insize = Width + 2;
    for(i = 0; i < Height; i++){
        for(j = 0; j < Width; j++){
            int ii, jj;
            float tmp = 0.0f;
            int a;
            ii = i + 1;
            jj = j + 1;
            for (a = -1; a <= 1; ++a)
            {
                int b;
                for (b = -1; b <= 1; ++b)
                {
                    tmp += input[(ii + a) * insize + (jj + b)] * mask[a + 1][b + 1];
                }
            }
            output[i * Width + j] = tmp;
        }
    } 
}

int main(int argc, char** argv)
{
    float mask[3][3];
    unsigned int inhsize;
    unsigned int inwsize;
    unsigned int i;
    unsigned int Height;
    unsigned int Width;
    float* input  = NULL;
    float* output = NULL;
    struct infoRec cmd;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	// 1 = CPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0);
    Setup(1);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Height = cmd.Height;
    Width = cmd.Width;
    inhsize = Height + 2;
    inwsize = Width + 2;

   	/////////////////////////////////////////////////////////////////////////
    // Allocate memory
   	/////////////////////////////////////////////////////////////////////////
    input = allocate_mat_f(inhsize, inwsize);
    output = allocate_mat_f(Height, Width);
    if (!input || !output)
    {
        fprintf(stderr, "Error: Memory Allocation.\n");
        retval = -1;
        goto cleanup;
    }

    fill_mat_f((float*)mask, 3, 3, 1, RANDOM);
    fill_mat_f((float*)input, inhsize, inwsize, 1, RANDOM);

	/////////////////////////////////////////////////////////////////////////
	// Print input data
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Image: ", "%3.2lf ", (float*)input, inhsize, inwsize); 
        print_mat_f("Image Mask: ", "%3.2lf ", (float*)mask, 3, 3);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Image: ", "%3.2lf ", (float*)input, 1, inwsize);
        print_mat_f("Image Mask: ", "%3.2lf ", (float*)mask, 3, 3);
    }

	/////////////////////////////////////////////////////////////////////////
	// Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
    float mask_stream<3, 3>;
    float img<inhsize, inwsize>;
    float oimg<Height, Width>;

	// Record GPU Total time
	Start(0);
    for (i = 0; i < cmd.Iterations; ++i)
    {
		// Put write to stream 
		streamRead(img, input);
		streamRead(mask_stream, mask);

		// Run the brook program 
		image_filter(img, mask_stream, oimg);

		// Write data back from stream 
		streamWrite(oimg, output);
    }

    Stop(0);
    }

   	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Output Image: ", "%3.2lf ", (float*)output, Height, Width);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output Image: ", "%3.2lf ", (float*)output, 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time");
		printf( "%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float *cpu = NULL;
        if (!(cpu = allocate_mat_f(Height, Width)))
        {
            fprintf(stderr, "Error: Memory Failure.\n");
            retval = -1;
        }

		else
		{
			printf("-e Verify correct output.\n");
			printf("Applying Image Filter on CPU ... ");

			image_filter_cpu((float*)input, mask, (float*)cpu, Height, Width);
			res += compare_mat_f((float*)cpu, (float*)output, Height, Width);

			printf("Done\n");
                        
                        if (cmd.Verbose)
                             print_mat_f("CPU Image: ", "%3.2lf ", (float*)cpu, Height, Width); 

			if (res)
			{
				printf("%s: Failed!\n\n", argv[0]);
				retval = -1;
			}
			else
			{
				printf("%s: Passed!\n\n", argv[0]);
				retval = 0;
			}
			free(cpu);
		}
    }

	/////////////////////////////////////////////////////////////////////////
	// Compare performance with CPU if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
		unsigned int i = 0;
		double cpu_time = 0.0;
		double gpu_time = 0.0;
        float *cpu = NULL;

        if (!(cpu = allocate_mat_f(Height, Width)))
        {
            fprintf(stderr, "Error: Memory Failure.\n");
            retval = -1;
        }

		else
		{
			printf("-p Compare performance with CPU.\n");

			// Record CPU Total time
			Start(1);
			for( i = 0; i < cmd.Iterations; i ++)
			{
				image_filter_cpu((float*)input, mask, (float*)cpu, Height, Width);
			}
			Stop(1);

			// Print CPU timing and speedup
			cpu_time = GetElapsedTime(1);
			gpu_time = GetElapsedTime(0);
			printf(	"%-8s%-8s%-16s%-16s%-16s%-16s\n","Width","Height","Iterations",
					"CPU Total Time","GPU Total Time","Speedup");
			printf(	"%-8d%-8d%-16d%-16lf%-16lf%-16lf", cmd.Width, cmd.Height, 
					cmd.Iterations, cpu_time, gpu_time, cpu_time/gpu_time);
			printf("\n\n");
			free(cpu);
		}
	}

	/////////////////////////////////////////////////////////////////////////
	// Clean up
   	/////////////////////////////////////////////////////////////////////////
cleanup:
    if (input)
    {
        free(input);
    }
    if (output)
    {
        free(output);
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

	return retval;
}
