/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file BinomialOptionGPU.br
  \brief Implements Binomial Option Pricing for European Option Pricing.
 ****************************************************************************/

/** 
* @brief Computes values at expiration date:
*        Compute values at expiration date:
*        Call option value at period end is v(t) = s(t) - x
*        If s(t) is greater than x, or zero otherwise...
*        The computation is similar for put options...
* 
* @param numSteps4 	total number of time steps
* @param j 		index multiplier 
* @param s 		stock price 
* @param x 		option strike price
* @param vsdt 		volatality * sqrt( dt )
* @param A<> 		the output stream
* 
* @return 
*/
kernel void 
gpu_constructTree(float4 numSteps4, float j, float s, float x, 
		  float vsdt, out float4 A<>)
{
    float4 price4;
    float4 j4 = float4(j, j + 1.0f, j + 2.0f, j + 3.0f);
    float4 s4 = float4(s, s, s, s);
    float4 x4 = float4(x, x, x, x);
    float4 vsdt4 = float4(vsdt, vsdt, vsdt, vsdt);
    
    float4 two4 = float4(2.0f, 2.0f, 2.0f, 2.0f);
    float4 zero4 = float4(0.0f, 0.0f, 0.0f, 0.0f);

    price4.xyzw = s4.xyzw * exp(vsdt4.xyzw * (two4.xyzw * j4.xyzw - numSteps4.xyzw));
    A.xyzw = max(price4.xyzw - x4.xyzw, zero4.xyzw);
}

/** 
* @brief 		 performs the backward traversal for the leaf nodes of the binomial tree.
* 
* @param lastElement	 the (n + 1)th element of the binomial tree. 		
* @param puByr 		 constant multiplier for the reduction. 
* @param pdByr 		 constant multiplier for the reduction, computed earlier. 
* @param A 		 the 4 leaf nodes of the tree which will undergo reduction.
* @param B<> 		 the output stream
* 
* @return 
*/
kernel void 
gpu_backwardTraverseFirst(float lastElement, float puByr, float pdByr, float4 A, out float4 B<>)
{
    float4 temp4;
    temp4.x = pdByr * A.x + puByr * A.y;
    temp4.y = pdByr * A.y + puByr * A.z;
    temp4.z = pdByr * A.z + puByr * A.w;
    temp4.w = pdByr * A.w + puByr * lastElement;
    B = temp4;
}

/** 
* @brief       		performs the backward traversal for the leaf nodes of the tree of 4 time steps.
* 
* @param puByr      	constant multiplier for the reduction. 
* @param pdByr  	constant multiplier for the reduction, computed earlier. 
* @param A 		the 4 leaf nodes of the tree which will undergo reduction.
* @param A1<>   	the output stream
* 
* @return 
*/
kernel void
gpu_backwardTraverse4(float puByr, float pdByr, float4 A, out float4 A1<>)
{
    float4 temp4;
    
    // Traversing 4 - 1 level of the binomial tree...
    temp4.x = pdByr * A.x + puByr * A.y;
    temp4.y = pdByr * A.y + puByr * A.z;
    temp4.z = pdByr * A.z + puByr * A.w;
    temp4.w = 0.0f;

    // Traversing 4 - 2 level of the binomial tree...
    temp4.x = pdByr * temp4.x + puByr * temp4.y;
    temp4.y = pdByr * temp4.y + puByr * temp4.z;
    temp4.z = 0.0f;
    
    // Traversing 4 - 3 level of the binomial tree...
    temp4.x = pdByr * temp4.x + puByr * temp4.y;
    temp4.y = 0.0f;
    A1 = temp4;
}

/** 
* @brief       		 performs the backward traversal for the leaf nodes of tree of 8 time steps.
* 
* @param puByr      	 constant multiplier for the reduction. 
* @param pdByr   	 constant multiplier for the reduction, computed earlier. 
* @param A  		 the first 4 leaf nodes of the tree which will undergo reduction.
* @param B 		 the last 4 leaf nodes of the tree which will undergo reduction.
* @param A1<>  		 the output stream
* 
* @return 
*/
kernel void 
gpu_backwardTraverse8(float puByr, float pdByr, float4 A, float4 B, out float4 A1<>)
{
    float4 temp41;
    float4 temp42;

    // Traversing 8 - 1 level of the binomial tree...
    temp41.x = pdByr * A.x + puByr * A.y;
    temp41.y = pdByr * A.y + puByr * A.z;
    temp41.z = pdByr * A.z + puByr * A.w;
    temp41.w = pdByr * A.w + puByr * B.x;
    temp42.x = pdByr * B.x + puByr * B.y;
    temp42.y = pdByr * B.y + puByr * B.z;
    temp42.z = pdByr * B.z + puByr * B.w;
    
    // Traversing 8 - 2 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    
    // Traversing 8 - 3 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    
    // Traversing 8 - 4 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    
    // Traversing 8 - 5 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = 0.0f;

    // Traversing 8 - 6 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = 0.0f;

    // Traversing 8 - 7 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = 0.0f;
    A1 = temp41;
}

/** 
* @brief		performs the backward traversal for the leaf nodes of the tree of 12 time steps. 
* 
* @param puByr		constant multiplier for the reduction.  
* @param pdByr		constant multiplier for the reduction, computed earlier.  
* @param A		the first 4 leaf nodes of the tree which will undergo reduction.		 
* @param B		the second 4 leaf nodes of the tree which will undergo reduction. 
* @param C		the last 4 leaf nodes of the tree which will undergo reduction. 
* @param D<>		the output stream 
* 
* @return 
*/
kernel void 
gpu_backwardTraverse12(float puByr, float pdByr, float4 A, float4 B, float4 C, out float4 D<>)
{
    float4 temp41;
    float4 temp42;
    float4 temp43;
    
    // Traversing 12 - 1 level of the binomial tree...
    temp41.x = pdByr * A.x + puByr * A.y;
    temp41.y = pdByr * A.y + puByr * A.z;
    temp41.z = pdByr * A.z + puByr * A.w;
    temp41.w = pdByr * A.w + puByr * B.x;
    temp42.x = pdByr * B.x + puByr * B.y;
    temp42.y = pdByr * B.y + puByr * B.z;
    temp42.z = pdByr * B.z + puByr * B.w;
    temp42.w = pdByr * B.w + puByr * C.x;
    temp43.x = pdByr * C.x + puByr * C.y;
    temp43.y = pdByr * C.y + puByr * C.z;
    temp43.z = pdByr * C.z + puByr * C.w;
        
    // Traversing 12 - 2 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    temp42.z = pdByr * temp42.z + puByr * temp42.w;
    temp42.w = pdByr * temp42.w + puByr * temp43.x;
    temp43.x = pdByr * temp43.x + puByr * temp43.y;
    temp43.y = pdByr * temp43.y + puByr * temp43.z;
    
    // Traversing 12 - 3 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    temp42.z = pdByr * temp42.z + puByr * temp42.w;
    temp42.w = pdByr * temp42.w + puByr * temp43.x;
    temp43.x = pdByr * temp43.x + puByr * temp43.y;
    
    // Traversing 12 - 4 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    temp42.z = pdByr * temp42.z + puByr * temp42.w;
    temp42.w = pdByr * temp42.w + puByr * temp43.x;
    
    // Traversing 12 - 5 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    temp42.z = pdByr * temp42.z + puByr * temp42.w;
    
    // Traversing 12 - 6 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;
    temp42.y = pdByr * temp42.y + puByr * temp42.z;
    
    // Traversing 12 - 7 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    temp42.x = pdByr * temp42.x + puByr * temp42.y;

    // Traversing 12 - 8 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = pdByr * temp41.w + puByr * temp42.x;
    
    // Traversing 12 - 9 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = pdByr * temp41.z + puByr * temp41.w;
    temp41.w = 0.0f;

    // Traversing 12 - 10 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = pdByr * temp41.y + puByr * temp41.z;
    temp41.z = 0.0f;

    // Traversing 12 - 11 level of the binomial tree...
    temp41.x = pdByr * temp41.x + puByr * temp41.y;
    temp41.y = 0.0f;
    D = temp41;
}

/** 
* @brief			implements binomial option pricing for 4 time steps. 
* 
* @param N 			total number of samples. 
* @param numSteps               risk free interest rate. 
* @param riskFactor             volatility factor.
* @param volatility             stock price for N samples.
* @param stockPrice<>           option strike price for N samples.
* @param optionStrike<>         option years for N samples.
* @param optionYears<>          the gpu calculate option result (output)
* @param resultGPU<>            output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A1<>                   output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A2<>                   output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A3<>                   output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A4<> 			output stream, used as temporary variable for calculation (invoking sub kernels).
* 
* @return 
*/
kernel void 
mainGPU4(float N, float numSteps, float riskFactor, float volatility, 
	 float4 stockPrice<>, float4 optionStrike<>, float4 optionYears<>, 
	 out float4 resultGPU<>, out float4 A1<>, out float4 A2<>, 
	 out float4 A3<>, out float4 A4<>)
{
    float4 N4 = float4(N, N, N, N);
    float4 numSteps4 = float4(numSteps, numSteps, numSteps, numSteps);
    float4 risk4 = float4(riskFactor, riskFactor, riskFactor, riskFactor);
    float4 vol4 = float4(volatility, volatility, volatility, volatility);
    
    float4 one4 = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float4 zero4 = float4(0.0f, 0.0f, 0.0f, 0.0f);

    float4 dt4 = optionYears *(one4 / N4);
    float4 vsdt4 = vol4 * sqrt(dt4);
    float4 rdt4 = risk4 * dt4;
    float4 r4 = exp(rdt4);
    float4 rInv4 = one4 / r4;

    float4 u4 = exp(vsdt4);
    float4 d4 = one4 / u4;
    float4 pu4 = (r4 - d4)/(u4 - d4);
    float4 pd4 = one4 - pu4;
    float4 puByr4 = pu4 * rInv4;
    float4 pdByr4 = pd4 * rInv4;
    float4 price4 = stockPrice * exp(vsdt4 * numSteps4);
    float4 tempPrice4 = max(price4 - optionStrike, zero4);
    float4 temp4;
    
    float j;
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A1);
      
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(tempPrice4.x, puByr4.x, pdByr4.x, A1, A1);
    gpu_backwardTraverse4(puByr4.x, pdByr4.x, A1, A1);
    
    //Store the results in resultGPU stream.
    resultGPU.x = A1.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A2);
      
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(tempPrice4.y, puByr4.y, pdByr4.y, A2, A2);
    gpu_backwardTraverse4(puByr4.y, pdByr4.y, A2, A2);
    
    //Store the results in resultGPU stream.
    resultGPU.y = A2.x;

    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A3);
      
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(tempPrice4.z, puByr4.z, pdByr4.z, A3, A3);
    gpu_backwardTraverse4(puByr4.z, pdByr4.z, A3, A3);
    
    //Store the results in resultGPU stream.
    resultGPU.z = A3.x;

    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A4);
      
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(tempPrice4.w, puByr4.w, pdByr4.w, A4, A4);
    gpu_backwardTraverse4(puByr4.w, pdByr4.w, A4, A4);
    
    //Store the results in resultGPU stream.
    resultGPU.w = A4.x;
}

/** 
* @brief                  implements binomial option pricing for 8 time steps.
*
* @param N                total number of samples. 
* @param riskFactor       risk free interest rate. 
* @param volatility       volatility factor.
* @param stockPrice       stock price for N samples.
* @param optionStrike     option strike price for N samples.
* @param optionYears      option years for N samples.
* @param resultGPU        the gpu calculate option result (output)
* @param A1               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A3               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A4               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A5               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A6               output stream, used as temporary variable for calculation (invoking sub kernels).
*
*@ return
*/
kernel void 
mainGPU8(float N, float numSteps, float riskFactor, float volatility, float4 stockPrice<>, float4 optionStrike<>,
                    float4 optionYears<>, out float4 resultGPU<>, out float4 A1<>, out float4 A2<>, out float4 A3<>,
                    out float4 A4<>, out float4 A5<>, out float4 A6<>)
{
    float4 N4 = float4(N, N, N, N);
    float4 numSteps4 = float4(numSteps, numSteps, numSteps, numSteps);
    float4 risk4 = float4(riskFactor, riskFactor, riskFactor, riskFactor);
    float4 vol4 = float4(volatility, volatility, volatility, volatility);
    
    float4 one4 = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float4 zero4 = float4(0.0f, 0.0f, 0.0f, 0.0f);

    float4 dt4 = optionYears *(one4 / N4);
    float4 vsdt4 = vol4 * sqrt(dt4);
    float4 rdt4 = risk4 * dt4;
    float4 r4 = exp(rdt4);
    float4 rInv4 = one4 / r4;

    float4 u4 = exp(vsdt4);
    float4 d4 = one4 / u4;
    float4 pu4 = (r4 - d4)/(u4 - d4);
    float4 pd4 = one4 - pu4;
    float4 puByr4 = pu4 * rInv4;
    float4 pdByr4 = pd4 * rInv4;
    float4 price4 = stockPrice * exp(vsdt4 * numSteps4);
    float4 tempPrice4 = max(price4 - optionStrike, zero4);
    float4 temp4;
    
    float j;

    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A1);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A2);  
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A2.x, puByr4.x, pdByr4.x, A1, A1);
    gpu_backwardTraverseFirst(tempPrice4.x, puByr4.x, pdByr4.x, A2, A2);
    gpu_backwardTraverse8(puByr4.x, pdByr4.x, A1, A2, A1);
    //Store the results in resultGPU stream.
    resultGPU.x = A1.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A3);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A4);  
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A4.x, puByr4.y, pdByr4.y, A3, A3);
    gpu_backwardTraverseFirst(tempPrice4.y, puByr4.y, pdByr4.y, A4, A4);
    gpu_backwardTraverse8(puByr4.y, pdByr4.y, A3, A4, A3);
    
    //Store the results in resultGPU stream.
    resultGPU.y = A3.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A5);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A6);  
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A6.x, puByr4.z, pdByr4.z, A5, A5);
    gpu_backwardTraverseFirst(tempPrice4.z, puByr4.z, pdByr4.z, A6, A6);
    gpu_backwardTraverse8(puByr4.z, pdByr4.z, A5, A6, A5);
    
    //Store the results in resultGPU stream.
    resultGPU.z = A5.x;

    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A1);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A2);  
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A2.x, puByr4.w, pdByr4.w, A1, A1);
    gpu_backwardTraverseFirst(tempPrice4.w, puByr4.w, pdByr4.w, A2, A2);
    gpu_backwardTraverse8(puByr4.w, pdByr4.w, A1, A2, A1);
    
    //Store the results in resultGPU stream.
    resultGPU.w = A1.x;
}

/**
* @brief                  implements binomial option pricing for 12 time steps.
 
* @param N                total number of samples. 
* @param riskFactor       risk free interest rate. 
* @param volatility       volatility factor.
* @param stockPrice       stock price for N samples.
* @param optionStrike     option strike price for N samples.
* @param optionYears      option years for N samples.
* @param resultGPU        the gpu calculate option result (output)
* @param A1               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A3               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A4               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A5               output stream, used as temporary variable for calculation (invoking sub kernels).
* @param A6               output stream, used as temporary variable for calculation (invoking sub kernels).
*/
kernel void 
mainGPU12(float N, float numSteps, float riskFactor, float volatility, float4 stockPrice<>, float4 optionStrike<>,
                    float4 optionYears<>, out float4 resultGPU<>, out float4 A1<>, out float4 A2<>, out float4 A3<>,
                    out float4 A4<>, out float4 A5<>, out float4 A6<>)
{
    float4 N4 = float4(N, N, N, N);
    float4 numSteps4 = float4(numSteps, numSteps, numSteps, numSteps);
    float4 risk4 = float4(riskFactor, riskFactor, riskFactor, riskFactor);
    float4 vol4 = float4(volatility, volatility, volatility, volatility);
    
    float4 one4 = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float4 zero4 = float4(0.0f, 0.0f, 0.0f, 0.0f);

    float4 dt4 = optionYears *(one4 / N4);
    float4 vsdt4 = vol4 * sqrt(dt4);
    float4 rdt4 = risk4 * dt4;
    float4 r4 = exp(rdt4);
    float4 rInv4 = one4 / r4;

    float4 u4 = exp(vsdt4);
    float4 d4 = one4 / u4;
    float4 pu4 = (r4 - d4)/(u4 - d4);
    float4 pd4 = one4 - pu4;
    float4 puByr4 = pu4 * rInv4;
    float4 pdByr4 = pd4 * rInv4;
    float4 price4 = stockPrice * exp(vsdt4 * numSteps4);
    float4 tempPrice4 = max(price4 - optionStrike, zero4);
    float4 temp4;
    
    float j;

    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A1);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A2);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.x, optionStrike.x, vsdt4.x, A3);
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A2.x, puByr4.x, pdByr4.x, A1, A1);
    gpu_backwardTraverseFirst(A3.x, puByr4.x, pdByr4.x, A2, A2);
    gpu_backwardTraverseFirst(tempPrice4.x, puByr4.x, pdByr4.x, A3, A3);
    gpu_backwardTraverse12(puByr4.x, pdByr4.x, A1, A2, A3, A1);
    
    //Store the results in resultGPU stream.
    resultGPU.x = A1.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A4);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A5);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.y, optionStrike.y, vsdt4.y, A6);
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A5.x, puByr4.y, pdByr4.y, A4, A4);
    gpu_backwardTraverseFirst(A6.x, puByr4.y, pdByr4.y, A5, A5);
    gpu_backwardTraverseFirst(tempPrice4.y, puByr4.y, pdByr4.y, A6, A6);
    gpu_backwardTraverse12(puByr4.y, pdByr4.y, A4, A5, A6, A4);
    
    //Store the results in resultGPU stream.
    resultGPU.y = A4.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A1);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A2);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.z, optionStrike.z, vsdt4.z, A3);
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A2.x, puByr4.z, pdByr4.z, A1, A1);
    gpu_backwardTraverseFirst(A3.x, puByr4.z, pdByr4.z, A2, A2);
    gpu_backwardTraverseFirst(tempPrice4.z, puByr4.z, pdByr4.z, A3, A3);
    gpu_backwardTraverse12(puByr4.z, pdByr4.z, A1, A2, A3, A1);
    
    //Store the results in resultGPU stream.
    resultGPU.z = A1.x;
    
    //Construct Binomial Option Tree for the first sample.  
    j = 0.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A4);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A5);
    j = j + 4.0f;
    gpu_constructTree(numSteps4, j, stockPrice.w, optionStrike.w, vsdt4.w, A6);
    
    //Perform a backward traversal and reduction on the Binomial Option Tree.
    gpu_backwardTraverseFirst(A5.x, puByr4.w, pdByr4.w, A4, A4);
    gpu_backwardTraverseFirst(A6.x, puByr4.w, pdByr4.w, A5, A5);
    gpu_backwardTraverseFirst(tempPrice4.w, puByr4.w, pdByr4.w, A6, A6);
    gpu_backwardTraverse12(puByr4.w, pdByr4.w, A4, A5, A6, A4);
    
    //Store the results in resultGPU stream.
    resultGPU.w = A4.x;
}
/**
* @brief                  implements gpu kernel handler for 4 time steps.
 
* @param stockPrice       stock price for N samples.
* @param optionStrike     option strike price for N samples.
* @param optionYears      option years for N samples.
* @param resultGPU        the gpu calculate option result (output)
* @param riskFactor       risk free interest rate. 
* @param volatility       volatility factor.
* @param N                total number of samples.
* @param numSteps         total number of time steps which is 4. 
*/
void
mainGPUHandller4(float *stockPrice, float *optionStrike, float *optionYears, float *resultGPU,const float riskFactor,
                     const float volatility, const unsigned int n, const unsigned int numSteps)
{
    unsigned int temp = n / 4;
    unsigned int temp2 = (unsigned int)sqrt((float)temp);
    
    unsigned int dim = temp2;
    
    float4 s4<dim, dim>;
    float4 x4<dim, dim>;
    float4 t4<dim, dim>;
    
    // Stream responsible for storing the results of GPU computation...
    float4 result<dim, dim>;
    
    // Streams needed for temporary computations inside kernel...
    float4 A1<dim, dim>;
    float4 A2<dim, dim>;
    float4 A3<dim, dim>;
    float4 A4<dim, dim>;
    
    // Read stockPrice, optionStrike, and optionYears into vectorized streams...
    streamRead(s4, stockPrice);
    streamRead(x4, optionStrike);
    streamRead(t4, optionYears);
    
    // Call the GPU kernel for time steps = 4...
    mainGPU4((float)n, (float)numSteps, riskFactor, volatility, s4, x4, t4, result, A1, A2, A3, A4);
    
    // Copy the results...
    streamWrite(result, resultGPU);
}

/**
* @brief                  implements gpu kernel handler for 8 time steps.

* @param stockPrice       stock price for N samples.
* @param optionStrike     option strike price for N samples.
* @param optionYears      option years for N samples.
* @param resultGPU        the gpu calculate option result (output)
* @param riskFactor       risk free interest rate. 
* @param volatility       volatility factor.
* @param N                total number of samples.
* @param numSteps         total number of time steps which is 4. 
*
* @return
*/
void
mainGPUHandller8(float *stockPrice, float *optionStrike, float *optionYears, float *resultGPU,const float riskFactor,
                     const float volatility, const unsigned int n, const unsigned int numSteps)
{
    unsigned int temp1 = n / 4;
    unsigned int temp2 = (unsigned int)sqrt((float)temp1);

    unsigned int dim = temp2;
    
    
    float4 s4<dim, dim>;
    float4 x4<dim, dim>;
    float4 t4<dim, dim>;
    
    // Stream responsible for storing the results of GPU computation...
    float4 result<dim, dim>;
    
    // Streams needed for temporary computations inside kernel...
    float4 A1<dim, dim>;
    float4 A2<dim, dim>;
    float4 A3<dim, dim>;
    float4 A4<dim, dim>;
    float4 A5<dim, dim>;
    float4 A6<dim, dim>;
    
    // Read stockPrice, optionStrike, and optionYears into vectorized streams...
    streamRead(s4, stockPrice);
    streamRead(x4, optionStrike);
    streamRead(t4, optionYears);
    
    // Call the GPU kernel for time steps = 8...
    mainGPU8((float)n, (float)numSteps, riskFactor, volatility, s4, x4, t4, result, A1, A2, A3, A4, A5, A6);
    
    // Copy the results...
    streamWrite(result, resultGPU);
}

/**
brief                  	  implements gpu kernel handler for 12 time steps.
 
* @param stockPrice       stock price for N samples.
* @param optionStrike     option strike price for N samples.
* @param optionYears      option years for N samples.
* @param resultGPU        the gpu calculate option result (output)
* @param riskFactor       risk free interest rate. 
* @param volatility       volatility factor.
* @param N                total number of samples.
* @param numSteps         total number of time steps which is 4. 
*/
void 
mainGPUHandller12(float *stockPrice, float *optionStrike, float *optionYears, float *resultGPU,const float riskFactor,
                     const float volatility, const unsigned int n, const unsigned int numSteps)
{
    unsigned int temp1 = n / 4;
    unsigned int temp2 = (unsigned int)sqrt((float)temp1);

    unsigned int dim = temp2;
    
    float4 s4<dim, dim>;
    float4 x4<dim, dim>;
    float4 t4<dim, dim>;
    
    // Stream responsible for storing the results of GPU computation...
    float4 result<dim, dim>;
    
    // Streams needed for temporary computations inside kernel...
    float4 A1<dim, dim>;
    float4 A2<dim, dim>;
    float4 A3<dim, dim>;
    float4 A4<dim, dim>;
    float4 A5<dim, dim>;
    float4 A6<dim, dim>;

    // Read stockPrice, optionStrike, and optionYears into vectorized streams...
    streamRead(s4, stockPrice);
    streamRead(x4, optionStrike);
    streamRead(t4, optionYears);

    // Call the GPU kernel for time steps = 12...
    mainGPU12((float)n, (float)numSteps, riskFactor, volatility, s4, x4, t4, result, A1, A2, A3, A4, A5, A6);
    
    // Copy the results...
    streamWrite(result, resultGPU);
}
