/*
 * Copyright (C) 2003 Sandia Corporation
 * Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
 * license for use of this work by or on behalf of the U.S. Government.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that this Notice and any statement
 * of authorship are reproduced on all copies.
 *
 * $Id$
 */

/* Some of the programs needed for performing the FFT of real functions.
 * Does a trick where it performs the FFT of two rows at a time, using one
 * as the imaginary and the other as the real. */
/* For more information, see the following paper:
 * Moreland, K. and Angel, E.  "The FFT on a GPU," in Proceedings of
 * SIGGRAPH/Eurographics Workshop on Graphics Hardware 2003, (July
 * 2003). */



#ifndef FFT_DIM
#error Need to define FFT_DIM to either x or y
#endif


kernel void complex_mult(float4 ar<>, float4 ai<>,
                         float4 br<>, float4 bi<>,
                         out float4 resultr<>, out float4 resulti<>)
{
    resultr = ar*br - ai*bi;
    resulti = ar*bi + ai*br;
}

/* Real stored in x, imaginary stored in y. */
kernel void W(float N, float k, out float2 result<>)
{
    float angle = -2*3.1415926536*k/N;
    result.x = cos(angle);
    result.y = sin(angle);
}


/* direction is set to 1 for the forward FFT, -1 for the reverse FFT.
 * Scaling is not done for the reverse FFT (it is instead done during
 * tangling).
kernel void FFTFrag(iter float4 input <>,// input coords
	       float2 ArraySize,
	       float PartitionSize,
	       float NumPartitions,
	       float Direction,
	       float4 InputSamples<>,
	       out float4 output<>)
{
    float isImag = round(fmod(input.y,2))==1;
    float2 real_index = isImag?opposingIndex:(indexof outputcolor).xy;
    float2 imag_index = isImag?(indexof outputcolor).xy:opposingIndex;
    float fft_index;    
    float k = floor(input.realIndex.FFT_DIM / NumPartitions);
  // This modifier will perform a mod ArraySize. 
    float modifier;
    modifier = (float)(real_index.FFT_DIM >= ArraySize.FFT_DIM/2);
    modifier *= ArraySize.FFT_DIM;

    fft_index = real_index.FFT_DIM + k*NumPartitions - modifier;

    real_index.FFT_DIM = imag_index.FFT_DIM = fft_index;
    {
      float4 Gr = InputSamples[real_index];
      float4 Gi = InputSamples[imag_index];

      real_index.FFT_DIM += NumPartitions;
      imag_index.FFT_DIM += NumPartitions;
      {
        float4 Hr = f4texRECT(InputSamples, real_index);
        float4 Hi = f4texRECT(InputSamples, imag_index);

        float2 WNk = W(PartitionSize, k);

        float4 WHr, WHi;
        complex_mult(WNk.xxxx, Direction*WNk.yyyy, Hr, Hi, WHr, WHi);
        if (!isImag) {
          output.value = Gr + WHr;
        }else {
          output.value = Gi + WHi;
        }
      }
    }
}
*/

kernel void FFTFragX(iter float4 input <>,// input coords
	       float2 ArraySize,
	       float PartitionSize,
	       float NumPartitions,
	       float Direction,
	       float4 InputSamples<>,
	       out float4 output<>)
{
    float isImag = round(fmod(input.y,2))==1;
    float2 real_index = isImag?opposingIndex:(indexof outputcolor).xy;
    float2 imag_index = isImag?(indexof outputcolor).xy:opposingIndex;
    float fft_index;    
    float k = floor(input.realIndex.x / NumPartitions);
  /* This modifier will perform a mod ArraySize. */
    float modifier;
    modifier = (float)(real_index.x >= ArraySize.x/2);
    modifier *= ArraySize.x;

    fft_index = real_index.x + k*NumPartitions - modifier;

    real_index.x = imag_index.x = fft_index;
    {
      float4 Gr = InputSamples[real_index];
      float4 Gi = InputSamples[imag_index];

      real_index.x += NumPartitions;
      imag_index.x += NumPartitions;
      {
        float4 Hr = f4texRECT(InputSamples, real_index);
        float4 Hi = f4texRECT(InputSamples, imag_index);

        float2 WNk = W(PartitionSize, k);

        float4 WHr, WHi;
        complex_mult(WNk.xxxx, Direction*WNk.yyyy, Hr, Hi, WHr, WHi);
        if (!isImag) {
          output.value = Gr + WHr;
        }else {
          output.value = Gi + WHi;
        }
      }
    }
}


kernel void FFTFragY(iter float4 input <>,// input coords
	       float2 ArraySize,
	       float PartitionSize,
	       float NumPartitions,
	       float Direction,
	       float4 InputSamples<>,
	       out float4 output<>)
{
    float isImag = round(fmod(input.y,2))==1;
    float2 real_index = isImag?opposingIndex:(indexof outputcolor).xy;
    float2 imag_index = isImag?(indexof outputcolor).xy:opposingIndex;
    float fft_index;    
    float k = floor(input.realIndex.y / NumPartitions);
  /* This modifier will perform a mod ArraySize. */
    float modifier;
    modifier = (float)(real_index.y >= ArraySize.y/2);
    modifier *= ArraySize.y;

    fft_index = real_index.y + k*NumPartitions - modifier;

    real_index.y = imag_index.y = fft_index;
    {
      float4 Gr = InputSamples[real_index];
      float4 Gi = InputSamples[imag_index];

      real_index.y += NumPartitions;
      imag_index.y += NumPartitions;
      {
        float4 Hr = f4texRECT(InputSamples, real_index);
        float4 Hi = f4texRECT(InputSamples, imag_index);

        float2 WNk = W(PartitionSize, k);

        float4 WHr, WHi;
        complex_mult(WNk.xxxx, Direction*WNk.yyyy, Hr, Hi, WHr, WHi);
        if (!isImag) {
          output.value = Gr + WHr;
        }else {
          output.value = Gi + WHi;
        }
      }
    }
}
