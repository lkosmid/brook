#include <stdio.h>
#include "wfft.h"



int debug_fft=0;
int split_bit_reverse=0;
int do_untangle=0;

/*
static void __printf_cpu_inner (float a, float b, float c, float d) {
  printf ("%f %f == %f %f\n",a,b,c,d);
}
static void __print_cpu_inner (float a, float b, float c, float d) {
  printf ("%f %f -> %f %f\n",a,b,c,d);
}
*/

kernel float2 mult_complex1(float2 a <>, float2 b <>)
{
  float2 negpos = {-1,1};
  return a.xx*b.xy+negpos*a.yy*b.yx;
    //  c.x = a.x*b.x - a.y*b.y;
    //  c.y = a.x*b.y + a.y*b.x;
}

kernel float4 mult_complex2(float4 a <>, float2 b <>)
{
  float4 negpos={-1,1,-1,1};
  return a.xxzz*b.xyxy +negpos*a.yyww*b.yxyx;
  //  c.xz = a.xz*b.xx - a.yw*b.yy;
  //  c.yw = a.xz*b.yy + a.yw*b.xx;

}
kernel float2 conjugate (float2 input) {
  float2 ret;
  ret.x=input.x;
  ret.y=-input.y;
  return ret;
}
kernel float4 conjugate2 (float4 input) {
  float4 ret;
  ret.xz=input.xz;
  ret.yw=-input.yw;
  return ret;
}

#define DOTIMES 1
kernel float4 DoDFTHorizontalInner (float2 r<>, 
                                  float2 t<>, 
                                  float2 W <>) {
  float4 ret;
  float2 tw=mult_complex1(t,W);
  ret.xy = r+tw;
  ret.zw = r-tw;
  return ret;
}

kernel void
DFTX (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=DoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W);
} 

kernel void
DFTXi (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>,float scale) {
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=conjugate2(DoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W))*scale;
} 
kernel void
iDFTX (float4 csr<>, 
      float4 csi<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
  float4 sr = conjugate2(csr);
  float4 si = conjugate2(csi);
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=DoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W);
} 

kernel float4 rDoDFTHorizontalInner (float2 r<>, 
                                  float2 t<>, 
                                  float2 W <>) {
  float4 ret;
  ret.xy = r+t ;
  ret.zw = mult_complex1 ((r-t), W);
  return ret;
}

kernel void
rDFTX (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=rDoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W);
} 


kernel void
rDFTXi (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>,float scale) {
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=conjugate2(rDoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W))*scale;
} 

kernel void
irDFTX (float4 csr<>, 
      float4 csi<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
  float4 sr = conjugate2(csr);
  float4 si = conjugate2(csi);
  float2 temp= round(fmod(s_index.x,2))==1;
  float4 r,t;
  r = sr; t = si;
  s_prime=rDoDFTHorizontalInner (temp.xx?r.zw:r.xy,temp.xx?t.zw:t.xy,W);
} 


kernel void
DFTY (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
   float4 r =  sr; 
   float4 t = si;
   float4 tw= mult_complex2(t,W);
   s_prime=r+((round(fmod(s_index.y,2))!=1)?tw:-tw);
} 
kernel void
rDFTY (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
   float4 r =  sr; 
   float4 t = si;
   s_prime=mult_complex2(r-t,W);
  
   if (round(fmod(s_index.y,2))!=1) {
       //overwrite s_prime
       s_prime=r+t;
   }
} 
kernel void
iDFTY (float4 csr<>, 
      float4 csi<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
   float4 r = conjugate2(csr); 
   float4 t = conjugate2(csi);
   float4 tw= mult_complex2(t,W);
   s_prime=r+((round(fmod(s_index.y,2))!=1)?tw:-tw);
} 
kernel void
irDFTY (float4 csr<>, 
      float4 csi<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>) {
   float4 r =  conjugate2(csr); 
   float4 t = conjugate2(csi);
   s_prime=mult_complex2(r-t,W);
  
   if (round(fmod(s_index.y,2))!=1) {
       //overwrite s_prime
       s_prime=r+t;
   }
} 

kernel void
DFTYi (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>, float scale) {
   float4 r = sr; 
   float4 t = si;
   float4 tw= mult_complex2(t,W);
   s_prime=conjugate2(r+((round(fmod(s_index.y,2))!=1)?tw:-tw))*scale;
} 
kernel void
rDFTYi (float4 sr<>, 
      float4 si<>,
      float2 W<>,
      out float4 s_prime<>, 
      iter float2 s_index<>,float scale) {
   float4 r = sr; 
   float4 t = si;
   s_prime=mult_complex2(r-t,W);
  
   if (round(fmod(s_index.y,2))!=1) {
       //overwrite s_prime
       s_prime=r+t;
   }
   s_prime = conjugate2(s_prime)*scale;
} 

kernel void optBitReverseY (out float4 s_out<>,
			 float4 indicesXo2YXp1o2Xm2[],
			 float4 s[][]) {
   
   float4 indexY = indicesXo2YXp1o2Xm2[(indexof s_out).y];
   float2 outindex = {(indexof s_out).x,indexY.y};
   s_out = s[outindex];
}
kernel void bitReverseXo2 (out float4 s_out<>,
			   float4 indicesXo2YXp1o2Xm2[],
			   float4 s[][], float halfM, float halfMpp) {
   float2 s_out_index=indexof s_out.xy;
   float4 indexX = indicesXo2YXp1o2Xm2[(indexof s_out).x];
   float2 outindex = {indexX.x,(indexof s_out).y};
   float4 s_temp = s[outindex];
   float dubya=(s_out_index.x<=halfMpp)?1:0;
   s_out.xy = (dubya.xx&&s_out_index.xx>=.5)?s_temp.zw:s_temp.xy;
   outindex.x = indexX.z;//get the index + 1 (adds half the stream)
   s_temp = s[outindex];
   s_out.zw = (dubya.xx&&round(s_out_index.xx)!=halfM)?s_temp.zw:s_temp.xy;
}
kernel void bitReverseXo2Y (out float4 s_out<>,
                          float4 indicesXo2YXp1o2Xm2[], 
                          float4 s[][], float halfM, float halfMpp) {
   float2 s_out_index=indexof s_out.xy;
   float4 indexX = indicesXo2YXp1o2Xm2[s_out_index.x];
   float4 indexY = indicesXo2YXp1o2Xm2[s_out_index.y];
   float2 outindex = {indexX.x,indexY.y};
   float4 s_temp = s[outindex];
   float dubya=(s_out_index.x<=halfMpp)?1:0;
   s_out.xy = (dubya.xx&&s_out_index.xx>=.5)?s_temp.zw:s_temp.xy;
   outindex.x = indexX.z;//get the index + 1 (adds half the stream)
   s_temp = s[outindex];
   s_out.zw = (dubya.xx&&round(s_out_index.xx)!=halfM)?s_temp.zw:s_temp.xy;
}

// Utilities and the BitReverse() procedure
// To compute 2**x
static int TwoPowerX(int nNumber) {
  // Achieve the multiplication by left-shifting 
  return (1<<nNumber);
}


// Procedure to reverse the bits. 
// Example: 
// INPUTS:  nNumberToReverse = 110; nNumberOfBits = 3;
// OUTPUT:  nReversedNumber  = 011
// CAUTION: Make sure that you pass atleast the minimum number of bits to represent the 
//          number. For reversing 6 you need atleast 3 bits, if only 2 bits is passed then
//          we get junk results.

static int BitReverse(int nNumberToReverse, int nNumberOfBits) {
  int nBitIndex;
  int nReversedNumber = 0;
  for (nBitIndex = nNumberOfBits-1; nBitIndex >= 0; --nBitIndex) {
    if ((1 == nNumberToReverse >> nBitIndex)) {         
      nReversedNumber  += TwoPowerX(nNumberOfBits-1-nBitIndex);    
      nNumberToReverse -= TwoPowerX(nBitIndex);                      
    }
  }
  return(nReversedNumber);
}

float4 * bitReversedIndices (int logN, int logM) {
  int i,N = (1<< logN),M = (1<<logM);
  int maxNM = N>(M/2)?N:(M/2);
  float4 * s_array;
  s_array = (float4*)calloc(maxNM,sizeof(float4));
  for (i=0;i<maxNM;++i) {
    s_array[i].x=(float)(i==0?0:BitReverse(M-(i*2),logM)/2);
    s_array[i].y=(float)(i==0?0:BitReverse(N-i,logN));//BitReverse(i==0?0:N-i,logN));
    s_array[i].z=(float)(BitReverse(M-(i*2+1),logM)/2);//(BitReverse(M-(i*2+1),logM)/2);
    s_array[i].w=(float)BitReverse(i,logN);//for real values
    
  }
  return s_array;
}

/*
kernel void UntangleFrag(float4 input[][], out float4 output<>, float2 NNo2) {
    float4 H1 = input[indexof(output)];
    float2 outputindex = {(indexof output).x,NNo2.x-(indexof output).y};
    float4 HN = input[outputindex];
    float4 F,G;
    float4 HPLUS = .5*(H1+HN);
    float4 HMINUS = .5*(H1-HN);
    F.xz = HPLUS.xz;
    F.yw = HMINUS.yw; 
    G.xz = -HMINUS.xz;
    G.yw = HPLUS.yw;
    if ((indexof output).y>NNo2.y)
        output = G;
    else
        output = F;
}

kernel void DoubleFrag(float4 input[][], out float4 output<>, float2 NNo2,
	iter float2 where<>) {
    float4 H1 = input[where];
    float2 outputindex = {where.x,where.y+NNo2.y};
    float4 HN = input[outputindex];
    float4 F,G;
    float4 HPLUS = .5*(H1+HN);
    float4 HMINUS = .5*(H1-HN);
    F.xz = HPLUS.xz;
    F.yw = HMINUS.yw; 
    G.xz = -HMINUS.xz;
    G.yw = HPLUS.yw;
    if ((indexof output).y>NNo2.y)
        output = G;
    else
        output = F;
}
*/
#define FFT_HORIZONTAL 0
#define FFT_VERTICAL 1
#define FFT_2D 2
float tof(int i) {return (float)i;}
void FftwTransform2d(float2 *data, unsigned long N, unsigned long M,
                     int isign, char cast);


void generatePlan(float4 bitreversal<>,
                  int logN,
                  int logM) {
   float4 * rawindices=bitReversedIndices(logN,logM);
   streamRead(bitreversal,rawindices);
   free(rawindices);
}
void computeFFT2d(float4 (*input)<>,
                  float4 (*output)<>,
                  int logN,
                  int logM,
                  int N,
                  int M,
                  float4 indicesXo2YXp1o2Xm2<>, int do_backwards, int inv) {
  /* OBSOLETE ITERATORS that needed odd -.3 bias
   iter float2 iter1 <N,(M/2)> =iter(float2(-.3,0),float2(tof(M/4)-.3,tof(N)));
   iter float2 iter2 <N,(M/2)> =iter(float2(tof(M/4)-.3,0),float2(tof(M/2)-.3,tof(N)));
   iter float2 iter3 <N,(M/2)> =iter(float2(0,-.3),float2(tof(M/2),tof(N/2)-.3));
   iter float2 iter4 <N,(M/2)> =iter(float2(0,tof(N/2)-.3),float2(tof(M/2),tof(N)-.3));
  */
   iter float2 s_iter <N,(M/2)> =iter(float2(0,0),float2(tof(M/2),tof(N)));
   int nPass,nBits,nPassCounter;
   
   if (debug_fft) {
      printf("FFT *Input:\n");
      streamPrint(*input);
   }
   if (1==N*M) streamSwap(*output,*input);
   else {
         nPass=nBits=logN;
         for(nPassCounter=0;nPassCounter<nPass;++nPassCounter) {
           int invert=inv&&nPassCounter==0;
           do_backwards
                 ?(invert?irDFTY:rDFTY)(input->domain(int2(0,0),int2(M/2,N/2)),input->domain(int2(0,N/2),int2(M/2,N)),getW(nPassCounter,logN,0,do_backwards!=0),*output,s_iter)
                 :(invert?iDFTY:DFTY)(input->domain(int2(0,0),int2(M/2,N/2)),input->domain(int2(0,N/2),int2(M/2,N)),getW(nPassCounter,logN,0,do_backwards!=0),*output,s_iter);
            if (debug_fft==2) {
               printf ("\nY STAGE %d\n",nPassCounter);
               streamPrint(*output);
            }

            streamSwap(*input,*output);
         }
	 if (split_bit_reverse) {
	   optBitReverseY(*output,indicesXo2YXp1o2Xm2,*input);      
           streamSwap(*input,*output);
	 }
         nPass=nBits=logM;
         for (nPassCounter=0;nPassCounter<nPass;++nPassCounter) {
           int invert=inv&&nPassCounter==nPass-1;
           invert
                 ?(do_backwards?rDFTXi:DFTXi)(input->domain(int2(0,0),int2(M/4,N)),input->domain(int2(M/4,0),int2(M/2,N)),getW(nPassCounter,logM,1,do_backwards!=0),*output,s_iter,(float)((double)1./(M*N)))
                 :(do_backwards?rDFTX:DFTX)(input->domain(int2(0,0),int2(M/4,N)),input->domain(int2(M/4,0),int2(M/2,N)),getW(nPassCounter,logM,1,do_backwards!=0),*output,s_iter);
            if (debug_fft==2) {
               printf ("\nX STAGE %d\n",nPassCounter);
               streamPrint(*output);
            }
            streamSwap(*input,*output);
         }
	 if (split_bit_reverse) {
	   bitReverseXo2(*output,indicesXo2YXp1o2Xm2,*input,(float)(M/4),(float)(M/4)+0.51f);
	 }
   }
   if (!split_bit_reverse) {//now do it separately
     bitReverseXo2Y(*output,indicesXo2YXp1o2Xm2,*input,(float)(M/4),(float)(M/4)+0.51f);      
     if (debug_fft==2) {
       printf ("\nBit Reversal\n");
       streamPrint(*output);
     }            
   }

}
