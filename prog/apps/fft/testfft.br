#include <stdio.h>
#include <stdlib.h>
#include <gpufft.hpp>
#include "main.h"
#include "ppm.h"
static int debug_this=0;
static int do_backwards=0;
 kernel void setZero(float4 indata<>, 
                    out float4 outdata<>, 
                    iter float2 normalized<>,
                    iter float2 negtopos<>,
                    float2 clampsize,
                    float scale,
                    float blurfactor,
                    float one) {
  // float4 i=indexof(indata);
  // float4 zero = {0.0,0.0,0.0,0.0};
  //	float zeroit= (abs(negtopos.x)>.95||abs(negtopos.y)>.95)&&(i.x>0&&i.y>0);
  //outdata = zeroit.xxxx?zero:indata/scale;
  outdata=indata*(exp (-blurfactor*(2-one*dot(negtopos,negtopos))))/scale;
  
}
kernel void setOne(float4 indata<>, 
                    out float4 outdata<>, 
                    iter float2 normalized<>,
                    iter float2 negtopos<>,
                    float2 clampsize,
                    float scale) {
  // float4 i=indexof(indata);
  // float4 zero = {0.0,0.0,0.0,0.0};
  //	float zeroit= (abs(negtopos.x)>.95||abs(negtopos.y)>.95)&&(i.x>0&&i.y>0);
  //outdata = zeroit.xxxx?zero:indata/scale;
  outdata=indata*exp (-dot(negtopos,negtopos))*scale;
}

void blur (float4 freqSpace<>,
           int N, int M) {
           iter float2 negtopos <N,(M/2)> = iter (float2(-1,-1),float2(1,1));
           iter float2 normalized <N,(M/2)> = iter (float2(0,0),float2(1,1));
           float2 clampsize;
           clampsize.x = (float)(M/4);
           clampsize.y = (float)(N/2);
           setZero(freqSpace,freqSpace,normalized,negtopos,clampsize,1.0/*(float)(M*N)*/,7.2,1);
}
void edgeDetect (float4 freqSpace<>,
           int N, int M) {
           iter float2 negtopos <N,(M/2)> = iter (float2(-1,-1),float2(1,1));
           iter float2 normalized <N,(M/2)> = iter (float2(0,0),float2(1,1));
           float2 clampsize;
           clampsize.x = (float)(M/4);
           clampsize.y = (float)(N/2);
           setOne(freqSpace,freqSpace,normalized,negtopos,clampsize,(float)(M*N));
}
kernel void scale2d (float4 input<>, out float4 output<>, float scale) {
  output=input/scale;
}
void allocatePlan(float4 (*plan)<>,
                  int logN,
                  int logM) {
  int bigger = logN>logM?logN:logM;
  int size = (1<<bigger);
  float4 tmp<size>;
  *plan=tmp;
  generatePlan(tmp,logN,logM);
}
void blur2d(float2 *input,
            float2 *output,
            int logN,
            int logM,
            int N,
            int M, 
            char edgedetect){
   float4 s<N,(M/2)>;
   float4 s_out<N,(M/2)>;
   float4 bitreversal<(M/2>N?M/2:N)>;
   streamRead(s,input);   
   generatePlan(bitreversal,logN,logM);
   computeFFT2d(&s,&s_out,logN,logM,N,M,bitreversal,do_backwards,0);
   if (debug_this) {
        printf("\nStream Output\n");
        streamPrint(s_out);
   }
   {//perform the blur
     if (edgedetect==0)
         blur(s_out,N,M);
     else if (edgedetect==2) 
       ;//scale2d(s_out,s_out,(float)(N*M));
     else
         edgeDetect(s_out,N,M);
     streamSwap(s,s_out);
   }
   computeFFT2d(&s,&s_out,logN,logM,N,M,bitreversal,do_backwards,1);
   if (output)
      streamWrite(s_out,output); 
   if (debug_this) {
        printf("\nStream Output\n");
        streamPrint(s_out);
   }
   


}


void doOptFFT(int logN, int logM, float2 * data, char edgedetect) {
   int N = (1<<logN);
   int M = (1<<logM);
   start = GetTimeMillis();
   blur2d(data,data,logM,logN,M,N,edgedetect); 

   stop = GetTimeMillis();
   //FftwTransform2d(data,N,M,1,1);
}

float clamp (float x) {
	return x>1?1:x<0?0:x;
}
unsigned char float2char(float x) {
	return (char)(clamp(x)*255);
}
int maino (int argc, char **argv) {
  int N=atoi(argv[1]);
  int M=atoi(argv[2]);
  int numdat=N*M;
  float4 *data = (float4*)malloc(sizeof(float4)*numdat);
  int i,logm,logn;
  float4 s<N,(M/2)>;
  float4 s_out<N,(M/2)>;
  float4 bitreversal<(M/2>N?M/2:N)>;
  srand(1024);
  for (i=0;i<numdat;i++) {
    data[i].x=(float)(rand()%10);
    data[i].y=(float)(rand()%10);
    data[i].z=(float)(rand()%10);
    data[i].w=(float)(rand()%10);
  }
  /*
  printf("input: ");
  for (i=0;i<numdat;++i) {
    printf ("(%.2f, %.2f)",data[i].x,data[i].y);
    }*/
  for (i=1,logn=0;i<N;i*=2,++logn);
  for (i=1,logm=0;i<M;i*=2,++logm);
  streamRead(s,data);   
  printf ("\nInput\n");
  streamPrint(s);
  generatePlan(bitreversal,logn,logm);
  computeFFT2d(&s,&s_out,logn,logm,N,M,bitreversal,do_backwards,1);
  printf ("\nOutput\n");
  streamPrint(s_out);
  /*
  printf ("\n outpt: ");
  for (i=0;i<numdat;++i) {
    printf ("%.2f %.2f] ",data[i].x,data[i].y);
    }
  free(data);
  */
  return 0;
}

int isNumber(char * num) {
  while (*num) {
    if (!(*num>='0'&&*num<='9')) {
      return 0;
    }
    num++;
  }
  return 1;
}
int main (int argc, char ** argv) {
	unsigned char *imgdata;
	unsigned int width, height, len;
        int USAGE=0;
	int channels=3;
        int channelcount=0;
	unsigned int logn, logm;
	unsigned int i;
	float2 *data;
        int oldargc=argc;
        char doEdge=0;
        char doNothing=0;
        char *argv_bak[]={argv[0],"franklin.ppm","out.ppm"};
        if (argc==3) {
          if (isNumber(argv[1])&&isNumber(argv[2])) {
            return maino(argc,argv);
          }
        }
        for (i=0;i<(unsigned int)argc;++i) {
            char match=0;
            int j;
            if (strcmp(argv[i],"-edge")==0) {
                doEdge=1;
                match=1;
            }
            if (strcmp(argv[i],"-nothing")==0) {
                doNothing=1;
                match=1;
            }
            if (strcmp(argv[i],"-reverse")==0) {
                do_backwards=1;
                match=1;
            }
            if (strcmp(argv[i],"-backwards")==0) {
                do_backwards=1;
                match=1;
            }
            if (match) {
                for (j=i+1;j<argc;++j) argv[j-1]=argv[j];
                argc--;
                i--;
            }
        }
        if (argc>1) {
          if (!strcmp(argv[1],"-h")||!strcmp(argv[1],"--help")||!strcmp(argv[1],"-V")||!strcmp(argv[1],"-v")||!strcmp(argv[1],"--verbose")) {
            int i=2;
            for (;i<argc;++i) {
              argv[i-1]=argv[i];
            }
            argc--;
            USAGE=1;
          }
        }
	if (argc<3) {
          if (USAGE) {
            fprintf(stderr,"Usage: %s <input_file> <output_file> [do edge det]\nDefaulting to fft franklin.ppm out.ppm\n",
                 argc>=1?argv[0]:"qfft");
          }
          argv=argv_bak;
          argc=3;
		//turn 1; // 1 is argument error
	}
	if (0==readPPM(argv[1],&imgdata,&width,&height)) {
		return 2; // 2 is read error
	}

	len=width*height;
	data = (float2 *) malloc (sizeof(float2)*len);
        for (channelcount=0;channelcount<channels;++channelcount) {
           for (i=0;i<len;i++) {
              data[i].x = ((float)imgdata[i*channels+channelcount])/255;
              data[i].y = 0;
           }
           for (i=1, logn=0; i<height; i*=2, ++logn) {}
           for (i=1, logm=0; i<width; i*=2, ++logm) {}
           doOptFFT(logm,logn,data, doEdge?1:(doNothing?2:0)); 
        
           for (i=0;i<len;i++) {
              imgdata[i*channels+channelcount] 
                 = float2char(((data[i].x)));//  /width)/height));
           }
        }
	free(data);
        if (USAGE)
          fprintf (stderr,"writing... %s\n",argv[2]);
	if (!writePPM(argv[2],imgdata,width,height)) {
          if (oldargc<3&&diff (argv[2],"fft.ppm")) {
            printf ("%s differs from fft.ppm\n",argv[2]);
          }else if (oldargc<3){
            printf ("pass");
          }
          free(imgdata);
	}else {
          free(imgdata);
          return 3;
        }
	return 0;
}
