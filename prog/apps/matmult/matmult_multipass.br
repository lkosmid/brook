/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file simple_matmult.br
  \brief A simple matrix matrix multiplication example for any size matrix

  This basic matrix matrix multiplication algorithm uses gather operations
  to read the corresponding data points and mad's them to an accumulated
  value.

 ****************************************************************************/
#include "common.h"
#include "Timer.h"
static int retval = 0;

/**
 * \brief	C = A * B
		Simple Matrix multiplication

 * \param	Width The value for which the loop runs over the matrices
 * \param	A Input matrix A(MxK)
 * \param	B Input matrix B(KxN)
 * \param	result Output matrix(MxN)
*/
kernel void sgemm(float a[][], float b[][], float interm[][], float tile, float tile_size, out float c<> ) {
        float sum=0.0;
        int i;
        float2 index=indexof(c).xy;
        float2 index_a, index_b;
        const float maxiterations=16.0;

        for(i=0.0; i< maxiterations; i+=1.0)
        {
           if(i >= tile_size)
              break;

           index_a=float2(i+tile_size*tile, index.y);
           index_b=float2(index.x, i+ tile_size*tile);
	   sum += a[index_a] * b[index_b];
        }
        c=sum+interm[index.xy];
}

kernel void sgemm_transposed(float a[][], float b[][], float interm[][], float tile, float tile_size, out float c<> ) {
        float sum=0.0;
        int i;
        float2 index=indexof(c).xy;
        float2 index_a;
        const float maxiterations=16.0;

        for(i=0.0; i< maxiterations; i+=1.0)
        {
           if(i >= tile_size)
              break;

           index_a=float2(i+tile_size*tile, index.y);
	   sum += a[index_a] * b[index_a];
        }
        c=sum+interm[index.xy];
}

/**
 * \brief	C = A * B
		Simple Matrix multiplication on the CPU

 * \param	a	Input matrix (m x k)
 * \param	b	Input matrix (k x n)
 * \param	c	Output matrix (m x n)
 * \param	m	Rows in a
 * \param	k	Rows in b
 * \param	n	Columns in b
*/
void 
matmultCPU(float* a, float* b, float* c, int m, int k, int n)
{
    int y;
    for (y = 0; y < m; y++)
    {
        int x;
        for (x = 0; x < n; x++)
        {
            float temp = 0;
            int z;
            for (z = 0; z < k; z++)
            {
                temp += a[y * k + z] * b[z * n + x];
            }

            c[y * n + x] = temp;
        }
    }
}

void 
matmultCPU_transposed(float* a, float* b, float* c, int m, int k, int n)
{
    int y;
    for (y = 0; y < m; y++)
    {
        int x;
        for (x = 0; x < n; x++)
        {
            float temp = 0;
            int z;
            for (z = 0; z < k; z++)
            {
                temp += a[y * k + z] * b[y * n + z];
            }

            c[y * n + x] = temp;
        }
    }
}

int main(int argc, char** argv)
{
    struct infoRec cmd;
    float* inputA;
    float* inputB;
    float* output;
    unsigned int Width;
    unsigned int Height;
    unsigned int i;
    unsigned int tile_size;
    unsigned char transposed=0;

    /////////////////////////////////////////////////////////////////////////
    // Setup the timers 
    // 0 = GPU Total Time
    // 1 = CPU Total Time
    /////////////////////////////////////////////////////////////////////////
    Setup(0); 
    Setup(1);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Height = cmd.Width;
    Width = cmd.Width;
    tile_size = cmd.Height;
    if(tile_size > 16)
    {
       tile_size = tile_size/16;
       transposed=1;
       printf("Tile Size > 16, so the multiplication will be transposed\n");
       printf("Tile Size=%d\n", tile_size);
      
       if(tile_size > 16)
       {
          printf("Tile Size cannot be bigger than 16\n");
          exit(-1);
       }
    }

    /////////////////////////////////////////////////////////////////////////
    // Allocate memory 
    /////////////////////////////////////////////////////////////////////////
    inputA = allocate_mat_f(Height, Width);
    inputB = allocate_mat_f(Width, Height);
    output = allocate_mat_f(Height, Height);
    if (!inputA || !inputB || !output)
    {
        fprintf(stderr, "Error: Memory Allocation.\n");
        retval = -1;
        goto cleanup;
    }

    fill_mat_f(inputA, Height, Width, 1, RANDOM);
    fill_mat_f(inputB, Width, Height, 1, RANDOM);

	/////////////////////////////////////////////////////////////////////////
	// Print input data 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Matrix A: ", "%lf ", inputA, Height, Width);
        print_mat_f("Input Matrix B: ", "%lf ", inputB, Width, Height);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Matrix A: ", "%lf ", inputA, 1, Width);
        print_mat_f("Input Matrix B: ", "%lf ", inputB, 1, Height);
    }

	/////////////////////////////////////////////////////////////////////////
    // Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
        float A<Height, Width>;
        float B<Width, Height>;
        float C<Height, Height>;
        float interm<Height, Height>;
        unsigned int tile;
        unsigned int Total_Tiles= Width/tile_size;
	float index2x< Height, Width>;
	float index2y< Height, Width>;


        // Record GPU Total time
        Start(0);
        if(!transposed)
        for (i = 0; i < cmd.Iterations; ++i)
	{
		// Write to stream 
		streamRead(A, inputA);
		streamRead(B, inputB);

                for(tile=0; tile< Total_Tiles; tile++)
                {
                   if( ( (int)tile % 2) == 1 )
                      sgemm( A, B, interm, (float) tile, (float) tile_size, C );
                   else
                      sgemm( A, B, C, (float) tile, (float) tile_size, interm );
                }

		// Write data back from stream 
                streamWrite((tile%2)? interm: C,output);
	}
        else
        {
        for (i = 0; i < cmd.Iterations; ++i)
	{
		// Write to stream 
		streamRead(A, inputA);
		streamRead(B, inputB);

                for(tile=0; tile< Total_Tiles; tile++)
                {
                   if( ( (int)tile % 2) == 1 )
                      sgemm_transposed( A, B, interm, (float) tile, (float) tile_size, C );
                   else
                      sgemm_transposed( A, B, C, (float) tile, (float) tile_size, interm );
                }

		// Write data back from stream 
                streamWrite((tile%2)? interm: C,output);
	}
        }
        Stop(0);
    }

   /////////////////////////////////////////////////////////////////////////
   // Print results if requested
   /////////////////////////////////////////////////////////////////////////
   if (cmd.Verbose)
    {
        print_mat_f("Output Matrix: ", "%lf ", (float*)output, Height, Height);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output Matrix: ", "%lf ", (float*)output, 1, Height);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
        double gflop = (double)(2.0 * Width * Height * Height * cmd.Iterations)/(double)(1024 * 1024 * 1024);
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s%-16s%-16s%-16s\n","Width","Height","Tile Size", "Transposed", "Iterations",
				"GPU Total Time", "Gflops");
		printf( "%-8d%-8d%-16d%-16s%-16d%-16lf%-16lf", Width, Height, tile_size, (transposed)?"yes" : "no",
				cmd.Iterations, time, gflop/time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float *CPU;
        if (CPU = (float*)malloc(sizeof *CPU * Height * Height))
        {
			printf("-e Verify correct output.\n");
			printf("Performing Matrix Multiplication on CPU ... ");

            if(!transposed)
                matmultCPU((float*)inputA, (float*)inputB, (float*)CPU, Height, Width, Height);
            else
                matmultCPU_transposed((float*)inputA, (float*)inputB, (float*)CPU, Height, Width, Height);
			
			printf("Done\n");
            if(cmd.Verbose)
                print_mat_f("CPU output: ","%lf ",CPU,Height,Width);

            res += compare_mat_f((float*)CPU, (float*)output, Height, Height);
            if (res)
            {
                printf("%s: Failed!\n\n", argv[0]);
                retval = -1;
            }
            else
            {
                printf("%s: Passed!\n\n", argv[0]);
                retval = 0;
            }
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Compare performance with CPU if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
        unsigned int i;
		double cpu_time = 0.0;
		double gpu_time = 0.0;
        double gflop = (double)(2.0 * Width * Height * Height * cmd.Iterations)/(double)(1024 * 1024 * 1024);
        float *CPU;

        if (CPU = (float*)malloc(sizeof *CPU * Height * Height))
        {
			printf("-p Compare performance with CPU.\n");
			
			// Record CPU Total time
			Start(1);
			for(i = 0; i < cmd.Iterations; i ++)
			{
				matmultCPU((float*)inputA, (float*)inputB, (float*)CPU, Height, Width, Height);
			}
			Stop(1);

			// Print CPU timing and speedup
			cpu_time = GetElapsedTime(1);
			gpu_time = GetElapsedTime(0);
			printf(	"%-8s%-8s%-16s%-16s%-16s%-16s%-16s%-16s%-16s\n","Width","Height","Tile Size","Transposed","Iterations",
					"CPU Total Time","GPU Total Time","Gflops","Speedup");
			printf(	"%-8d%-8d%-16d%-16s%-16d%-16lf%-16lf%-16lf%-16lf", Width, Height, tile_size,(transposed)?"yes":"no",
					cmd.Iterations, cpu_time, gpu_time, gflop/gpu_time, cpu_time/gpu_time);
			printf("\n\n");
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:
    if (inputA)
    {
        free(inputA);
    }
    if (inputB)
    {
        free(inputB);
    }
    if (output)
    {
        free(output);
    }

	if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

    return retval;
}
