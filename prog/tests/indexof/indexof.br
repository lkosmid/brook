// indexof.br
//
// Tests the built-in operator 'indexof.' It confirms the invariant that
// when a stream is passed as both a stream argument and a gather argument
// to a kernel, fetching from the gather argument with the index of the
// stream argument should produce the same value as the stream argument.

#include <stdio.h>

extern void printf();
extern void streamRead();
extern void streamWrite();

kernel void
bar(float d_prime<>, float d[10][10], out float e<>, float4 indexofe)
{
  /* this test should make a matrix of 1 and a diagonal of 0's*/
  e = ((d_prime == d[indexof(d_prime)]) &&
       (d_prime == d[indexof(d_prime).xy]) &&
       (d_prime == d[indexof d_prime.xy]) &&
       !(d_prime == d[1?(indexofe).yx:indexofe.zz]));
}


kernel void
foo(float mydprime<>, float d[10][10],out float e<>)
{
   bar(mydprime,d,e,indexof(e));
}

kernel void
test(float a<>, out float b<>)
{
   b = (indexof(a)).x;
}


int main(void)
{
  float data_d[10][10], data_e[10][10];
  float d<10, 10>, e<10, 10>;
  int i,j;

  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      data_d[i][j] = ((float) i) / 100.0f;
    }
  }

  streamRead(d, data_d);
  test(d,e);
  streamWrite(e, data_e);

  printf("Here are the results from the simple indexof test:\n");
  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      printf ("%3.2f  ", data_e[i][j]);
    }
    printf ("\n");
  }
  printf ("\n");

  foo(d,d,e);
  streamWrite(e, data_e);

  printf("Here are the results from the advanced indexof test:\n");
  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      printf ("%3.2f  ", data_e[i][j]);
    }
    printf ("\n");
  }
  return 0;
}
