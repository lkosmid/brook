#include <stdio.h>
#include "streamholder.h"
void CountValuesfloat(struct StreamHolder list_stream,
                       struct StreamHolder output_stream,
                       int WIDTH, 
                       int LENGTH, 
                       int sign);

kernel void foo (float a<>, float b<>, float4 c,
		 float d[10][10], vout []float e<>) {
  e = a+b;
  push(e);
  if (round(fmod( (indexof a).x,2))!=1) {
    e = 2;
    push (e);
  }
  if (round(fmod((indexof a).y,3))!=1) {
     e=3;
     push (e);
     e=-3;
     push (e);
  }
}
int main (int argc, char * argv[]) {
  int WID=(argc>1?atoi(argv[1]):10);
  int LEN=(argc>2?atoi(argv[2]):(argc>1?atoi(argv[1]):10));
  float a<WID, LEN>;
  float b<WID, LEN>;
  float d<WID, LEN>;
  float e<WID, LEN>;
  float nil<40,10>;
  float test <40,10>;
  float *data_a;
  float *data_b;
  float4 c = float4(1.0f, 0.0f, 3.2f, 5.0f);
  float *data_d;
  float *data_nil;
  float *data_out;
  int i,j;
  data_a=(float*)malloc(WID*LEN*sizeof(float));
  data_b=(float*)malloc(WID*LEN*sizeof(float));
  data_d=(float*)malloc(WID*LEN*sizeof(float));
  data_out=(float*)malloc(10*40*sizeof(float));
  data_nil=(float*)malloc(10*40*sizeof(float));
  memset(data_nil,0,10*40*sizeof(float));
  for (i=0; i<WID; i++)
    for (j=0; j<LEN; j++) {
      data_a[i*LEN+j] = ((float) i);
      data_b[i*LEN+j] = ((float)j)/10;
      data_d[i*LEN+j] = 0;
    }
  
  streamRead(a, data_a);
  streamRead(b, data_b);
  streamRead(d, data_d);

  foo(a,b,c,d,e);
  //foo(a,b,c,d_broken,e);

  streamPrint(e);
  return 0;
  for (i=0;i<40;++i) {
     for (j=0;j<10;++j) {
       int k;
        data_nil[i*10+j]=1.0;
        streamRead(nil,data_nil);
        CountValuesfloat(&nil,&test,40,10,-1);
        streamWrite(test,data_out);
        data_nil[i*10+j]=0.0;

        for (k=0;k<10*40;++k) {
          if (k<i*10+j) {
            if (data_out[k]!=0) {
              printf ("Test %d %d not zero at %d %d\n",i,j,k/10,k%10);
              break;            
            }
          }else{
            if (data_out[k]!=1) {
              printf ("Test %d %d not one at %d %d\n",i,j,k/10,k%10);
              break;
              
            }
          }
                      
        }
     }
  }
  return 0;
}
