// read_write.br
// A minimal regression test to confirm that
// data written to a stream with streamRead
// can be retrieved with streamWrite.

#include <stdio.h>
typedef struct traverser_t {
  float4 index;//.xy is index into the aTree  .zw is index into bTree
  float3 Translation; 
  float3 Rotationx;
  float3 Rotationy;
  float3 Rotationz;
}Traverser;

int main() {
	int i, j;
	float a< 256 >;
	float b< 16, 16 >;
	float input_a[256];
	float output_a[256];
	float input_b[32][8];
	float output_b[32][8];
        Traverser hacktrav[1];	
        Traverser baseTraverser;
        Traverser trav<1,1>;
        baseTraverser.index=float4(2,0,2,0);
        baseTraverser.Translation=float3(-0.13644515,  0.112712905,  -0.0222729594);
        baseTraverser.Rotationx=float3(-0.170251727,  0.966706932,  -0.191028923);
        baseTraverser.Rotationy=float3(0.966706932, 0.201434806,  0.15780279);
        baseTraverser.Rotationz=float3(-0.191028923,  0.15780279,  0.968816876);
        streamRead(trav,&baseTraverser);
        streamWrite(trav,hacktrav);
        printf ("index %.2f %.2f %.2f %.2f\nTranslation %.2f %.2f %.2f\nRotationx %.2f %.2f %.2f\nRotationy %.2f %.2f %.2f\nRotationz %.2f %.2f %.2f\n",hacktrav[0].index.x,hacktrav[0].index.y,hacktrav[0].index.z,hacktrav[0].index.w,hacktrav[0].Translation.x,hacktrav[0].Translation.y,hacktrav[0].Translation.z,hacktrav[0].Rotationx.x,hacktrav[0].Rotationx.y,hacktrav[0].Rotationx.z,hacktrav[0].Rotationy.x,hacktrav[0].Rotationy.y,hacktrav[0].Rotationy.z,hacktrav[0].Rotationz.x,hacktrav[0].Rotationz.y,hacktrav[0].Rotationz.z);
	// 1 dimensional stream
	for( i = 0; i < 256; i++ )
		input_a[i] = (float)(i);
	
	streamRead( a, input_a );
	streamWrite( a, output_a );
	
	for( i = 0; i < 32; i++ )
	{
		for( j = 0; j < 8; j++ )
			printf("%3.2f ", output_a[8*i+j]);
		printf("\n");
	}
	
	// 2 dimensional stream
	for( i = 0; i < 32; i++ )
		for( j = 0; j < 8; j++ )
			input_b[i][j] = (float)(8*i+j);
	
	streamRead( b, input_b );
	streamWrite( b, output_b );
	
	for( i = 0; i < 32; i++ )
	{
		for( j = 0; j < 8; j++ )
			printf("%3.2f ", output_b[i][j]);
		printf("\n");
	}
	
	return 0;
}
