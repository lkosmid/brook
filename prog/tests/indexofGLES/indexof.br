// indexof.br
//
// Tests the built-in operator 'indexof.' It confirms the invariant that
// when a stream is passed as both a stream argument and a gather argument
// to a kernel, fetching from the gather argument with the index of the
// stream argument should produce the same value as the stream argument.

#include <stdio.h>

/* this test should make a matrix of 1 and a diagonal of 0's*/
kernel void
bar1(float d_prime<>, float d[][], out float e<>, float4 indexofe, float x, float y)
{
  float4 indx= indexof(d_prime);
  indx= floor(float4(x*indx.x, y*indx.y, 1, 1));
  e = d[indx];
}

kernel void
bar2(float d_prime<>, float d[][], out float e<>, float4 indexofe)
{
  e = d[floor(10*indexof(d_prime).xy)];
}

kernel void
bar3(float d_prime<>, float d[][], out float e<>, float4 indexofe)
{
  e = d[floor(10*indexof(d_prime).xy)];
}

kernel void
bar4(float d_prime<>, float d[][], out float e<>, float4 indexofe)
{
  e = d[1?(indexofe).xy:indexofe.zz];
}

kernel void
foo1(float d_prime<>, float d[][],out float e<>, float x, float y)
{
   bar1(d_prime,d,e,floor(10*indexof(e)), x, y);
}

kernel void
foo2(float d_prime<>, float d[][],out float e<>)
{
   bar2(d_prime,d,e,floor(10*indexof(e)));
}

kernel void
foo3(float d_prime<>, float d[][],out float e<>)
{
   bar3(d_prime,d,e,floor(10*indexof(e)));
}

kernel void
foo4(float d_prime<>, float d[][],out float e<>)
{
   bar4(d_prime,d,e,floor(10*indexof(e)));
}

kernel void
test(float a<>, out float b<>)
{
   b = indexof(a).x;
}


int main(void)
{
  float data_d[10][10];
  float d<10, 10>;
  float c<10,10>;
  float ex<10, 10>;
  float ey<10, 10>;
  float ez<10, 10>;
  float ew<10, 10>;
  float data_ex[10][10];
  float data_ey[10][10];
  float data_ez[10][10];
  float data_ew[10][10];
  float data_c[10][10];
  int i,j;

  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      data_d[i][j] = ((float) i*10+j);
    }
  }

  streamRead(d, data_d);
  test(d,c);
  streamWrite(c, data_c);

  printf("Here are the results from the simple indexof test:\n");
  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      //here is a catch when GLES is used:
      //if the result of indexof should be used on the CPU should be converted to non-normalised
      //TODO: add a stream function to do this conversion? Should be easy, since the stream already knows the dimension
      printf ("%3.2f  ", floor(10.0*data_c[i][j]));
    }
    printf ("\n");
  }
  printf ("\n");

  foo1(d,d,ex, 10, 10);
  foo2(d,d,ey);
  foo3(d,d,ez);
  foo4(d,d,ew);
  streamWrite(ex, data_ex);
  streamWrite(ey, data_ey);
  streamWrite(ez, data_ez);
  streamWrite(ew, data_ew);

  printf("Here are the results from the advanced indexof test:\n");
  for (i=0; i<10; i++) {
    for (j=0; j<10; j++) {
      if (!(j%2))
        printf ("\n");

      printf ("%3.2f %3.2f %3.2f %3.2f\t", 
              data_ex[i][j], data_ey[i][j],
              data_ez[i][j], data_ew[i][j]);
    }
  }
  printf("\n");

  return 0;
}
