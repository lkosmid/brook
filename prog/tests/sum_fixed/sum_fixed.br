// sum.br
// The absolute minimal test. It tests
// using a kernel to sum both 1-dimensional
// and two-dimensional input streams.

#include <stdio.h>

kernel void sum( fixed a<>, fixed b<>, out fixed c<> ) {
	c = a + b;
}

int main() {
	int i, j;
	fixed a1< 100 >;
	fixed b1< 100 >;
	fixed c1< 100 >;
	fixed a2< 10, 10 >;
	fixed b2< 10, 10 >;
	fixed c2< 10, 10 >;
	fixed input_a1[100];
	fixed input_b1[100];
	fixed output_c1[100];
	fixed input_a2[10][10];
	fixed input_b2[10][10];
	fixed output_c2[10][10];
	
	// initialize data
	for( i = 0; i < 10; i++ )
	{
		for( j = 0; j < 10; j++ )
		{
			//in the GPU the integers are emulated with floats
			//therefore their useful accuracy is 24 bits due to float limitations
			input_a1[10*i+j] = (fixed) (unsigned char)200;
			input_b1[10*i+j] = (fixed)(unsigned char)((10*i+j)&0xFF);
			input_a2[i][j] = (fixed)(unsigned char)(128);
			input_b2[i][j] = (fixed)(unsigned char)((10*i+j)&0xFF);
		}
	}
	streamRead( a1, input_a1 );
	streamRead( b1, input_b1 );
	streamRead( a2, input_a1 );
	streamRead( b2, input_b2 );
	
	sum( a1, b1, c1 );
	sum( a2, b2, c2 );
	
	streamWrite( c1, output_c1 );
	streamWrite( c2, output_c2 );

	for( i = 0; i < 10; i++ )
	{
		for( j = 0; j < 10; j++ )
			printf( "%u ", output_c1[10*i+j].x );
		printf("\n");
	}
	
	for( i = 0; i < 10; i++ )
	{
		for( j = 0; j < 10; j++ )
			printf( "%u ", output_c2[i][j].x );
		printf("\n");
	}
	
	return 0;
}
