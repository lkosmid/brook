#include <stdio.h>
#include "timing.h"
#include "graphics.h"
extern int isdebug;
kernel void curve (float2 inp<>, out float height<>) {
  float2 input={512.0,512.0};
  input+=inp;
  height = input.x*input.x+input.y*input.y*input.y*input.y*input.x;
}
kernel void curve2 (float4 input<>, out float2 height<>) {
  float h1,h2;
  curve(input.xy,h1);curve(input.zw,h2);
  height.x=h1;height.y=h2;
}
void __print_cpu_inner (float a, float b, float c ,float d) {
  printf("%f %f -> %f %f\n",a,b,c,d);
}
kernel void evaluateError(float input<>, float actual <>, out float error<>) {
  error=abs((input-actual)/(actual+1));
}
kernel 
void shouldTessellate (float4 input <>, float toler, out float output<>) {
   float2 height;
   curve2 (input,height);
   {
      float3 bottomleft= {input.z,input.w,height.y};
      float3 topright = {input.x,input.y,height.x};
      float3 center = .5*topright+.5*bottomleft;//lerp (topright,
                      //      bottomleft,
                      //      float3(.5,.5,.5));
      float fheight,error;
      curve(center.xy,fheight);
      evaluateError(center.z,fheight,error);
      output= error>=toler;
      //printf(center.z,fheight,error,toler);
   }
}
kernel void Tessellate(float4 input<>, float shouldDivide<>, vout[4] float4 output<>) {
   float2 topleft = input.xy;
   float2 topright = input.zw;
   float2 center = .5*topleft+.5*topright;//lerp (topleft,topright,float2(.5,.5));
   if (shouldDivide) {
      output.xy = input.xy;
      output.zw = center;
   }else {
      output=input;
   }
   push(output);
   if (shouldDivide) {
      output.zw = center;
      output.xy = input.zw;
      push(output);
      output.xy = input.xw;
      push(output);
      output.xy = input.zy;
      push(output);
   }
}
char * charmalloc (unsigned int  s) {
  return (char*)malloc(s);
}
float4 * float4malloc(float f) {
  return (float4 *)malloc((unsigned int)f);
}
float tof (int i) {
	return (float)i;
}
float tofd (double i) {
	return (float)i;
}


#define STRIDE 1024
#define SIZE 1024
int main (int argc, char ** argv) {
  float toler = argc>1?tofd(atof(argv[1])):tofd(.1);
  int limit = argc>2?atoi(argv[2]):32;
  float4 input[4096]={float4(0,0,SIZE/2,SIZE/2),float4(0,SIZE/2,SIZE/2,SIZE),float4(SIZE/2,0,SIZE,SIZE/2),float4(SIZE/2,SIZE/2,SIZE,SIZE)};
  float lastsize;
  float4 polys<1,STRIDE>;
  int ite;
  if (argc>3) return haupt(argc,argv);
  for (ite=4;ite<4096;++ite) input[ite]=float4((float)1.0/floor(.5),(float)1.0/floor(.5),(float)1.0/floor(.5),(float)1.0/floor(.5));
  streamRead(polys,input);
  SetupMillisTimer();
  start = GetTimeMillis();
  ite=0;
  do {
    int lastsizeint;ite++;
    lastsize=streamSize(polys).y;
    lastsizeint=(int)lastsize;
    {
      float doTessellate<lastsizeint,STRIDE>;
      float4 nextPolys<1,STRIDE>;
      shouldTessellate(polys,toler,doTessellate);
      Tessellate(polys,doTessellate,nextPolys);
      streamSwap(polys,nextPolys);      
    }
  }while ((ite<STRIDE&&streamSize(polys).y==1)||(streamSize(polys).y<limit&&streamSize(polys).y!=lastsize));
  {
    float4 size = streamSize(polys);
    float4 * finaldata=float4malloc(size.x*size.y*sizeof(float4));
    char * data=charmalloc((SIZE+1)*(SIZE+1)*sizeof(char));
    memset(data,0,sizeof(char)*(1+SIZE)*(1+SIZE));
    streamWrite(polys,finaldata);    
    stop = GetTimeMillis();

    Draw(finaldata,size,data,SIZE+1);
    writePng("polys.ppm",data,SIZE+1,SIZE+1);
    free (data);   
  }
  if (isdebug==2)
     streamPrint(polys);
  printf ("%f ",(float)(stop-start));
  return 0;
}
