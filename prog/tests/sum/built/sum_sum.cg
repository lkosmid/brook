#if defined(DXPIXELSHADER)
#define fixed float
#define fixed2 float2
#define fixed3 float3
#define fixed4 float4
#endif
#define shortfixed float
#define shortfixed2 float2
#define shortfixed3 float3
#define shortfixed4 float4
#define double real
#define double2 real2
typedef struct double_struct {float2 x;} real;
typedef struct double2_struct {float4 xy;} real2;
#if defined(DXPIXELSHADER) || !defined(USERECT)
#define _stype1   sampler2D
#define _stype2   sampler2D
#define _stype3   sampler3D
#if defined(SHADERMODEL3)
#define __sample1(s,i) tex2Dlod((s),float4(i,0,0,0))
#define __sample2(s,i) tex2Dlod((s),float4(i,0,0))
#define __sample3(s,i) tex3Dlod((s),float4(i,0))
#else
#define __sample1(s,i) tex2D((s),float2(i,0))
#define __sample2(s,i) tex2D((s),(i))
#define __sample3(s,i) tex3D((s),(i))
#endif
#else
#define _stype1  samplerRECT
#define _stype2  samplerRECT
#define _stype3  sampler3D
#define __sample1(s,i) texRECT((s),float2(i,0))
#define __sample2(s,i) texRECT((s),(i))
#define __sample3(s,i) tex3D((s),(i))
#endif

#define __FRAGMENTKILL discard
#ifdef USERECT
#define SKIPSCALEBIAS
#endif

#ifdef SKIPSCALEBIAS
float __gatherindex1( float index, float4 scalebias ) { return (index+scalebias.z); }
float2 __gatherindex2( float2 index, float4 scalebias ) { return (index+scalebias.zw); }
float3 __gatherindex3( float3 index, float4 scalebias ) { return index; }
#define _computeindexof(a,b) float4(a, 0, 0)
#else
float __gatherindex1( float index, float4 scalebias ) { return index*scalebias.x+scalebias.z; }
float2 __gatherindex2( float2 index, float4 scalebias ) { return index*scalebias.xy+scalebias.zw; }
float3 __gatherindex3( float3 index, float4 scalebias ) { return index; }
#define _computeindexof(a,b) (b)
#endif

double __fetch_double( _stype1 s, float i ) { double r; r.x= __sample1(s,i).xy; return r;}
double __fetch_double( _stype2 s, float2 i ) { double r; r.x = __sample2(s,i).xy; return r;}
double __fetch_double( _stype3 s, float3 i ) { double r; r.x = __sample3(s,i).xy; return r;}
double2 __fetch_double2( _stype1 s, float i ) { double2 r; r.xy= __sample1(s,i).xyzw; return r;}
double2 __fetch_double2( _stype2 s, float2 i ) { double2 r; r.xy = __sample2(s,i).xyzw; return r;}
double2 __fetch_double2( _stype3 s, float3 i ) { double2 r; r.xy = __sample3(s,i).xyzw; return r;}
float __fetch_float( _stype1 s, float i ) { return __sample1(s,i).x; }
float __fetch_float( _stype2 s, float2 i ) { return __sample2(s,i).x; }
float __fetch_float( _stype3 s, float3 i ) { return __sample3(s,i).x; }
float2 __fetch_float2( _stype1 s, float i ) { return __sample1(s,i).xy; }
float2 __fetch_float2( _stype2 s, float2 i ) { return __sample2(s,i).xy; }
float2 __fetch_float2( _stype3 s, float3 i ) { return __sample3(s,i).xy; }
float3 __fetch_float3( _stype1 s, float i ) { return __sample1(s,i).xyz; }
float3 __fetch_float3( _stype2 s, float2 i ) { return __sample2(s,i).xyz; }
float3 __fetch_float3( _stype3 s, float3 i ) { return __sample3(s,i).xyz; }
float4 __fetch_float4( _stype1 s, float i ) { return __sample1(s,i).xyzw; }
float4 __fetch_float4( _stype2 s, float2 i ) { return __sample2(s,i).xyzw; }
float4 __fetch_float4( _stype3 s, float3 i ) { return __sample3(s,i).xyzw; }


float __gather_float( _stype1 s[1], float i ) { return __sample1(s[0],i).x; }
float __gather_float( _stype2 s[1], float2 i ) { return __sample2(s[0],i).x; }
float __gather_float( _stype3 s[1], float3 i ) { return __sample3(s[0],i).x; }
float2 __gather_float2( _stype1 s[1], float i ) { return __sample1(s[0],i).xy; }
float2 __gather_float2( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xy; }
float2 __gather_float2( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xy; }
float3 __gather_float3( _stype1 s[1], float i ) { return __sample1(s[0],i).xyz; }
float3 __gather_float3( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyz; }
float3 __gather_float3( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyz; }
float4 __gather_float4( _stype1 s[1], float i ) { return __sample1(s[0],i).xyzw; }
float4 __gather_float4( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyzw; }
float4 __gather_float4( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyzw; }
float __gather_shortfixed( _stype1 s[1], float i ) { return __sample1(s[0],i).x; }
float __gather_shortfixed( _stype2 s[1], float2 i ) { return __sample2(s[0],i).x; }
float __gather_shortfixed( _stype3 s[1], float3 i ) { return __sample3(s[0],i).x; }
float2 __gather_shortfixed2( _stype1 s[1], float i ) { return __sample1(s[0],i).xy; }
float2 __gather_shortfixed2( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xy; }
float2 __gather_shortfixed2( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xy; }
float3 __gather_shortfixed3( _stype1 s[1], float i ) { return __sample1(s[0],i).xyz; }
float3 __gather_shortfixed3( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyz; }
float3 __gather_shortfixed3( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyz; }
float4 __gather_shortfixed4( _stype1 s[1], float i ) { return __sample1(s[0],i).xyzw; }
float4 __gather_shortfixed4( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyzw; }
float4 __gather_shortfixed4( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyzw; }
float __gather_fixed( _stype1 s[1], float i ) { return __sample1(s[0],i).x; }
float __gather_fixed( _stype2 s[1], float2 i ) { return __sample2(s[0],i).x; }
float __gather_fixed( _stype3 s[1], float3 i ) { return __sample3(s[0],i).x; }
float2 __gather_fixed2( _stype1 s[1], float i ) { return __sample1(s[0],i).xy; }
float2 __gather_fixed2( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xy; }
float2 __gather_fixed2( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xy; }
float3 __gather_fixed3( _stype1 s[1], float i ) { return __sample1(s[0],i).xyz; }
float3 __gather_fixed3( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyz; }
float3 __gather_fixed3( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyz; }
float4 __gather_fixed4( _stype1 s[1], float i ) { return __sample1(s[0],i).xyzw; }
float4 __gather_fixed4( _stype2 s[1], float2 i ) { return __sample2(s[0],i).xyzw; }
float4 __gather_fixed4( _stype3 s[1], float3 i ) { return __sample3(s[0],i).xyzw; }


void sum (float  a,
           float  b,
           out float  c)
{
  c = a + b;
}
void main (
		uniform _stype2 _tex_a : register (s0),
		float2 _tex_a_pos : TEXCOORD0,
		uniform _stype2 _tex_b : register (s1),
		float2 _tex_b_pos : TEXCOORD1,
		#ifdef DXPIXELSHADER
		out float4 __output_0 : COLOR0,
		#else
		out float __output_0 : COLOR0,
		#endif
		uniform float4 __workspace    : register (c0)) {
	float  a;
	float  b;
	float  c;
a = __fetch_float(_tex_a, _tex_a_pos );
b = __fetch_float(_tex_b, _tex_b_pos );

	sum(
		a,
		b,
		c );

	#ifdef DXPIXELSHADER
	__output_0 = float4( c, 0, 0, 0);
	#else
	__output_0 = c;
	#endif
}
