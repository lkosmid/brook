
----------------------------------------------------------------
Brook Quick Start Clean Installation For a Windows System
(Last updated December 2015)



-----------------------------------------------------------------
Step 1. Install Cygwin

   1.1  Perform a "default" Cygwin install

   1.2 Add the 'Devel' tree by clicking on "Default" until it becomes
       "Install"

                
-----------------------------------------------------------------
Step 2. Install Microsoft Visual C++ compiler.

    Anything after Visual Studio 2003 (MSVC7.1) works (sometimes you
    may need to hand edit the .vcproj files and downgrade the version
    number). Either x86 or x64 works just fine.

    If you don't own Visual Studio, you can download the Visual C++
    compiler for *free* from Microsoft.
   
    2.1 Install the Visual C++ Express Edition
    http://msdn.microsoft.com/vstudio/express/visualc/

    You will also need the latest platform SDK

-----------------------------------------------------------------
Step 3. Install the DirectX 9 SDK

    Microsoft provides it here:
    http://msdn.microsoft.com/directx/sdk/

    NOTE: The default path will include ()'s.  Cygwin shells do not
    like this, so please change the directory to something like
    "DirectX SDK" instead of "DirectX SDK (December 2006)"

-----------------------------------------------------------------
Step 4. Install the CGC compiler from NVIDIA

    The minimum supported version of CGC is 1.3b2.  Get it from
    NVIDIA's developer site here:
    http://developer.nvidia.com/object/cg_toolkit.html

    NVIDIA provides CGC binaries only for x86. To use brook on other platforms, eg. ARM-based Raspberry Pi
    there are 3 options:
    a) Cross compile everything on an x86 host
    b) Generate .cpp files from .br files on an x86 host with CGC installed and compile and link on the target platform
    c) use qemu-i386 to emulate CGC

    For c) :

    Download and install CGC from NVIDIA using the tar.gz for Linux x86.

    Install qemu:
    apt-get install qemu-user

    Download i386 libc for qemu:
    mkdir tmp
    wget http://ipkg.nslu2-linux.org/feeds/optware/cs08q1armel/cross/unstable/qemu-libc-i386_2.3.6-1_arm.ipk
    tar xzf qemu-libc-i386_2.3.6-1_arm.ipk
    ar rc qemu-libc-i386_2.3.6-1_arm.deb debian-binary control.tar.gz data.tar.gz
    tar xvfz data.tar.gz

    sudo mkdir /lib/i386
    sudo cp -r lib /usr/i386 
    cd .. && rm -rf tmp

    sudo mv /usr/bin/cgc /usr/bin/cgc.i386

    sudo vi /usr/bin/cgc

    with the following contents:

    #!/bin/sh
    qemu-i386 -L /lib/i386 /usr/bin/cgc.i386 $@ 2>&1 |grep -v qemu |grep -v preload

    sudo chmod +x /usr/bin/cgc

    You can find useful reference for the above process in the following links:

    [1] https://wiki.debian.org/QemuUserEmulation
    [2] http://unix.stackexchange.com/questions/33268/running-debian-i386-binary-on-debian-armel-via-qemu

-----------------------------------------------------------------
Step 5. Set up your system environment variables

    If you are running from a Studio Studio.net installation, you'll
    want to set up your PATH, LIB, and INCLUDE environment variables as
    follows (assuming you've installed the software into the default
    locations).  The suggested method is to set these through
    Control Panel->System Properties->Advanced->
    Environment Variables->System Variables.
    PATH should already be there, and you'll need to modify it, and
    you'll likely need to add INCLUDE and LIB.

INCLUDE
    C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\include
    C:\Program Files\Microsoft Visual Studio 8\VC\include
    C:\Program Files\Microsoft Visual Studio 8\VC\PlatformSDK\Include

LIB
    C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\Lib
    C:\Program Files\Microsoft Visual Studio 8\VC\lib
    C:\Program Files\Microsoft Visual Studio 8\VC\PlatformSDK\Lib

PATH
    C:\Program Files\Microsoft Visual Studio 8\VC\bin
    C:\Program Files\Microsoft Visual Studio 8\Common7\IDE

    
    If you are using the free Visual Studio Express instead, your setup
    should look more like:

INCLUDE
    C:\Program Files\Microsoft Platform SDK for Windows XP SP2\Include
    C:\Program Files\Microsoft Visual C++ Express 2005\include

LIB
    C:\Program Files\Microsoft Platform SDK for Windows XP SP2\Lib
    C:\Program Files\Microsoft Visual C++ Express 2005\lib
    
PATH
    C:\Program Files\Microsoft Visual C++ Express 2005\bin


    For either setup, you'll also need to add the following lines to
    the PATH, INCLUDE, and LIB environment variables so the build
    environment.

INCLUDE
    C:\Program Files\Microsoft DirectX SDK\Include

LIB
    C:\Program Files\Microsoft DirectX SDK\Lib\x86

PATH
    C:\Program Files\Microsoft DirectX SDK\Utilities\Bin\x86
    C:\Program Files\NVIDIA Corporation\Cg\bin


-----------------------------------------------------------------
Step 6. Get the latest Video Drivers for your card.

    Check with either NVIDIA or ATI for the latest drivers.

    Drivers for ATI video cards can be found at:
    (http://www.ati.com/support/driver.html)

    Drivers for NVIDIA video cards can be found at:
    (http://www.nvidia.com/content/drivers/drivers.asp)


-----------------------------------------------------------------
Step 7.  Build Brook.

    If you'd like to use the MSVC project files you can. However these
    may well be out of date or incorrect compared to using GNU make.

    To use GNU make, type 'make' in the top-level directory of your
    Brook tree.  This will build the BRCC compiler, the Brook runtime
    environment, and all the Brook example applications and regression
    test apps.

    To build only BRCC:     make brcc
    To build only the runtime:  make runtime

    All the Brook applications now exist in the bin subdirectory of the
    root of your Brook tree.
